// Code generated by goyacc -l -o yy_parser.go grammar.y. DO NOT EDIT.
package sqlparser

import __yyfmt__ "fmt"

import (
	"bytes"
	"errors"
	"strings"
)

var keywordsNotAllowed = map[string]struct{}{
	// We don't allow non-deterministic keywords as identifiers.
	"CURRENT_TIME":      {},
	"CURRENT_DATE":      {},
	"CURRENT_TIMESTAMP": {},

	// SQLite reserved keywords that are not part of Tableland spec.
	// We can't allow them as identifiers because it will throw an error in SQLite.
	//
	// SQLite has more reserved keywords (eg. CREATE, INSERT, ...). But those are part of the Tableland grammar,
	// that means that the parser already checks from them.
	//
	// These were identified by running the `TestReservedKeywords` test.
	"REFERENCES":    {},
	"ADD":           {},
	"ALTER":         {},
	"AUTOINCREMENT": {},
	"COMMIT":        {},
	"DEFERRABLE":    {},
	"DROP":          {},
	"FOREIGN":       {},
	"INDEX":         {},
	"RETURNING":     {},
	"TRANSACTION":   {},
}

func isRowID(column Identifier) bool {
	if strings.EqualFold(string(column), "rowid") || strings.EqualFold(string(column), "_rowid_") || strings.EqualFold(string(column), "oid") {
		return true
	}

	return false
}

type yySymType struct {
	yys                  int
	bool                 bool
	string               string
	bytes                []byte
	expr                 Expr
	exprs                Exprs
	column               *Column
	table                *Table
	convertType          ConvertType
	when                 *When
	whens                []*When
	selectColumn         SelectColumn
	selectColumnList     SelectColumnList
	readStmt             ReadStatement
	baseSelect           *Select
	where                *Where
	limit                *Limit
	orderBy              OrderBy
	orderingTerm         *OrderingTerm
	nulls                NullsType
	tableExpr            TableExpr
	joinTableExpr        *JoinTableExpr
	columnList           ColumnList
	indexedColumnList    IndexedColumnList
	indexedColumn        *IndexedColumn
	subquery             *Subquery
	colTuple             ColTuple
	statement            Statement
	identifier           Identifier
	createTableStmt      *CreateTable
	columnDefList        []*ColumnDef
	columnDef            *ColumnDef
	columnConstraint     ColumnConstraint
	columnConstraints    []ColumnConstraint
	value                *Value
	tableConstraint      TableConstraint
	tableConstraints     []TableConstraint
	insertStmt           *Insert
	insertRows           []Exprs
	deleteStmt           *Delete
	updateStmt           *Update
	updateExpression     *UpdateExpr
	updateList           []*UpdateExpr
	grant                *Grant
	revoke               *Revoke
	strings              []string
	privileges           Privileges
	stmts                []Statement
	upsertClause         Upsert
	onConflictClauseList []*OnConflictClause
	onConflictClause     *OnConflictClause
	onConflictTarget     *OnConflictTarget
	collateOpt           Identifier
	joinOperator         *JoinOperator
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGRAL = 57348
const HEXNUM = 57349
const FLOAT = 57350
const BLOBVAL = 57351
const ERROR = 57352
const TRUE = 57353
const FALSE = 57354
const NULL = 57355
const AND = 57356
const NONE = 57357
const INTEGER = 57358
const TEXT = 57359
const CAST = 57360
const AS = 57361
const CASE = 57362
const WHEN = 57363
const THEN = 57364
const ELSE = 57365
const END = 57366
const SELECT = 57367
const FROM = 57368
const WHERE = 57369
const GROUP = 57370
const BY = 57371
const HAVING = 57372
const LIMIT = 57373
const OFFSET = 57374
const ORDER = 57375
const ASC = 57376
const DESC = 57377
const NULLS = 57378
const FIRST = 57379
const LAST = 57380
const DISTINCT = 57381
const ALL = 57382
const EXISTS = 57383
const FILTER = 57384
const UNION = 57385
const EXCEPT = 57386
const INTERSECT = 57387
const CREATE = 57388
const TABLE = 57389
const INT = 57390
const BLOB = 57391
const PRIMARY = 57392
const KEY = 57393
const UNIQUE = 57394
const CHECK = 57395
const DEFAULT = 57396
const GENERATED = 57397
const ALWAYS = 57398
const STORED = 57399
const VIRTUAL = 57400
const CONSTRAINT = 57401
const INSERT = 57402
const INTO = 57403
const VALUES = 57404
const DELETE = 57405
const UPDATE = 57406
const SET = 57407
const CONFLICT = 57408
const DO = 57409
const NOTHING = 57410
const GRANT = 57411
const TO = 57412
const REVOKE = 57413
const RIGHT = 57414
const FULL = 57415
const INNER = 57416
const LEFT = 57417
const NATURAL = 57418
const OUTER = 57419
const CROSS = 57420
const JOIN = 57421
const ON = 57422
const USING = 57423
const OR = 57424
const ANDOP = 57425
const NOT = 57426
const IS = 57427
const ISNOT = 57428
const MATCH = 57429
const GLOB = 57430
const REGEXP = 57431
const LIKE = 57432
const BETWEEN = 57433
const IN = 57434
const ISNULL = 57435
const NOTNULL = 57436
const NE = 57437
const LE = 57438
const GE = 57439
const INEQUALITY = 57440
const ESCAPE = 57441
const LSHIFT = 57442
const RSHIFT = 57443
const CONCAT = 57444
const JSON_EXTRACT_OP = 57445
const JSON_UNQUOTE_EXTRACT_OP = 57446
const COLLATE = 57447
const UNARY = 57448

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGRAL",
	"HEXNUM",
	"FLOAT",
	"BLOBVAL",
	"ERROR",
	"TRUE",
	"FALSE",
	"NULL",
	"AND",
	"'('",
	"','",
	"')'",
	"'.'",
	"';'",
	"NONE",
	"INTEGER",
	"TEXT",
	"CAST",
	"AS",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"SELECT",
	"FROM",
	"WHERE",
	"GROUP",
	"BY",
	"HAVING",
	"LIMIT",
	"OFFSET",
	"ORDER",
	"ASC",
	"DESC",
	"NULLS",
	"FIRST",
	"LAST",
	"DISTINCT",
	"ALL",
	"EXISTS",
	"FILTER",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"CREATE",
	"TABLE",
	"INT",
	"BLOB",
	"PRIMARY",
	"KEY",
	"UNIQUE",
	"CHECK",
	"DEFAULT",
	"GENERATED",
	"ALWAYS",
	"STORED",
	"VIRTUAL",
	"CONSTRAINT",
	"INSERT",
	"INTO",
	"VALUES",
	"DELETE",
	"UPDATE",
	"SET",
	"CONFLICT",
	"DO",
	"NOTHING",
	"GRANT",
	"TO",
	"REVOKE",
	"RIGHT",
	"FULL",
	"INNER",
	"LEFT",
	"NATURAL",
	"OUTER",
	"CROSS",
	"JOIN",
	"ON",
	"USING",
	"OR",
	"ANDOP",
	"NOT",
	"IS",
	"ISNOT",
	"MATCH",
	"GLOB",
	"REGEXP",
	"LIKE",
	"BETWEEN",
	"IN",
	"ISNULL",
	"NOTNULL",
	"NE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"INEQUALITY",
	"ESCAPE",
	"'&'",
	"'|'",
	"LSHIFT",
	"RSHIFT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"CONCAT",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"COLLATE",
	"'~'",
	"UNARY",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 70,
	18, 83,
	-2, 130,
	-1, 183,
	77, 55,
	78, 55,
	79, 55,
	80, 55,
	-2, 35,
	-1, 184,
	77, 55,
	78, 55,
	79, 55,
	80, 55,
	-2, 36,
	-1, 253,
	16, 186,
	17, 186,
	-2, 199,
	-1, 315,
	16, 187,
	17, 187,
	-2, 199,
}

const yyPrivate = 57344

const yyLast = 1691

var yyAct = [...]int16{
	281, 457, 422, 158, 440, 160, 71, 58, 344, 280,
	267, 311, 236, 371, 310, 316, 294, 296, 374, 260,
	183, 179, 303, 268, 222, 215, 125, 163, 94, 455,
	147, 5, 184, 56, 110, 111, 112, 123, 123, 91,
	39, 354, 65, 59, 242, 297, 54, 412, 47, 90,
	411, 95, 229, 41, 372, 373, 410, 349, 37, 88,
	378, 141, 142, 143, 145, 146, 322, 324, 325, 326,
	323, 52, 57, 375, 88, 84, 85, 132, 133, 134,
	135, 243, 275, 106, 107, 108, 109, 101, 102, 103,
	104, 105, 110, 111, 112, 123, 436, 416, 262, 56,
	435, 181, 187, 188, 189, 190, 191, 192, 193, 194,
	195, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	150, 352, 228, 213, 450, 70, 297, 167, 89, 169,
	165, 103, 104, 105, 110, 111, 112, 123, 57, 185,
	180, 173, 168, 87, 38, 182, 86, 235, 206, 226,
	219, 15, 35, 218, 231, 232, 368, 38, 39, 312,
	238, 38, 38, 265, 239, 263, 261, 217, 458, 459,
	406, 245, 246, 262, 331, 95, 157, 241, 398, 395,
	262, 330, 138, 31, 220, 25, 234, 362, 233, 364,
	365, 366, 367, 42, 345, 230, 44, 43, 152, 33,
	34, 237, 48, 247, 266, 51, 276, 273, 237, 306,
	307, 249, 166, 38, 27, 38, 220, 272, 312, 274,
	156, 363, 166, 319, 285, 38, 185, 210, 209, 208,
	211, 212, 207, 277, 320, 92, 50, 288, 265, 259,
	263, 261, 159, 302, 413, 265, 283, 263, 261, 214,
	217, 244, 138, 101, 102, 103, 104, 105, 110, 111,
	112, 123, 423, 424, 36, 317, 166, 305, 300, 356,
	15, 357, 358, 309, 223, 336, 332, 7, 39, 333,
	15, 321, 98, 166, 165, 337, 223, 327, 284, 186,
	166, 346, 347, 328, 266, 180, 8, 99, 166, 429,
	185, 9, 46, 350, 15, 24, 185, 22, 40, 348,
	172, 270, 38, 351, 140, 16, 453, 452, 17, 18,
	369, 383, 27, 49, 19, 343, 20, 317, 360, 45,
	370, 361, 28, 29, 30, 329, 381, 298, 448, 382,
	380, 379, 353, 376, 377, 298, 442, 132, 133, 134,
	135, 308, 384, 106, 107, 108, 109, 101, 102, 103,
	104, 105, 110, 111, 112, 123, 166, 16, 335, 438,
	17, 18, 289, 408, 402, 225, 19, 166, 20, 335,
	39, 271, 355, 255, 256, 313, 38, 298, 437, 414,
	335, 434, 38, 335, 390, 270, 335, 334, 421, 415,
	269, 425, 426, 418, 251, 417, 298, 301, 430, 420,
	240, 427, 428, 446, 432, 254, 257, 340, 342, 341,
	298, 299, 431, 39, 166, 72, 81, 83, 82, 73,
	174, 74, 75, 76, 164, 401, 237, 39, 359, 419,
	237, 451, 409, 407, 400, 397, 396, 456, 186, 393,
	392, 389, 385, 237, 293, 270, 460, 462, 461, 216,
	151, 154, 153, 441, 465, 149, 466, 148, 96, 399,
	388, 387, 106, 107, 108, 109, 101, 102, 103, 104,
	105, 110, 111, 112, 123, 81, 83, 82, 39, 271,
	39, 139, 394, 304, 165, 39, 21, 441, 1, 39,
	139, 23, 391, 295, 4, 2, 14, 13, 162, 161,
	12, 11, 292, 10, 250, 252, 314, 315, 166, 126,
	178, 264, 166, 227, 439, 155, 97, 248, 93, 221,
	339, 318, 404, 405, 53, 166, 454, 100, 26, 253,
	32, 117, 116, 121, 118, 166, 131, 130, 129, 136,
	137, 124, 119, 120, 128, 127, 132, 133, 134, 135,
	175, 122, 106, 107, 108, 109, 101, 102, 103, 104,
	105, 110, 111, 112, 123, 115, 166, 176, 177, 166,
	114, 463, 117, 116, 121, 118, 113, 131, 130, 129,
	136, 137, 124, 119, 120, 128, 127, 132, 133, 134,
	135, 170, 258, 106, 107, 108, 109, 101, 102, 103,
	104, 105, 110, 111, 112, 123, 287, 403, 66, 282,
	144, 69, 171, 68, 6, 117, 116, 121, 118, 3,
	131, 130, 129, 136, 137, 124, 119, 120, 128, 127,
	132, 133, 134, 135, 464, 0, 106, 107, 108, 109,
	101, 102, 103, 104, 105, 110, 111, 112, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 117, 116, 121, 118, 0, 131, 130, 129,
	136, 137, 124, 119, 120, 128, 127, 132, 133, 134,
	135, 449, 0, 106, 107, 108, 109, 101, 102, 103,
	104, 105, 110, 111, 112, 123, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 116, 121, 118, 0, 131,
	130, 129, 136, 137, 124, 119, 120, 128, 127, 132,
	133, 134, 135, 447, 0, 106, 107, 108, 109, 101,
	102, 103, 104, 105, 110, 111, 112, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 117, 116, 121, 118, 0, 131, 130, 129, 136,
	137, 124, 119, 120, 128, 127, 132, 133, 134, 135,
	445, 0, 106, 107, 108, 109, 101, 102, 103, 104,
	105, 110, 111, 112, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 117, 116, 121, 118, 0, 131, 130,
	129, 136, 137, 124, 119, 120, 128, 127, 132, 133,
	134, 135, 444, 0, 106, 107, 108, 109, 101, 102,
	103, 104, 105, 110, 111, 112, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	117, 116, 121, 118, 0, 131, 130, 129, 136, 137,
	124, 119, 120, 128, 127, 132, 133, 134, 135, 443,
	0, 106, 107, 108, 109, 101, 102, 103, 104, 105,
	110, 111, 112, 123, 0, 0, 0, 0, 0, 0,
	0, 0, 117, 116, 121, 118, 0, 131, 130, 129,
	136, 137, 124, 119, 120, 128, 127, 132, 133, 134,
	135, 433, 0, 106, 107, 108, 109, 101, 102, 103,
	104, 105, 110, 111, 112, 123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 117,
	116, 121, 118, 0, 131, 130, 129, 136, 137, 124,
	119, 120, 128, 127, 132, 133, 134, 135, 386, 0,
	106, 107, 108, 109, 101, 102, 103, 104, 105, 110,
	111, 112, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 117, 116, 121, 118, 0, 131, 130, 129, 136,
	137, 124, 119, 120, 128, 127, 132, 133, 134, 135,
	0, 0, 106, 107, 108, 109, 101, 102, 103, 104,
	105, 110, 111, 112, 123, 338, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 117, 116,
	121, 118, 0, 131, 130, 129, 136, 137, 124, 119,
	120, 128, 127, 132, 133, 134, 135, 291, 0, 106,
	107, 108, 109, 101, 102, 103, 104, 105, 110, 111,
	112, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 117, 116, 121, 118, 0,
	131, 130, 129, 136, 137, 124, 119, 120, 128, 127,
	132, 133, 134, 135, 290, 0, 106, 107, 108, 109,
	101, 102, 103, 104, 105, 110, 111, 112, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 117, 116,
	121, 118, 0, 131, 130, 129, 136, 137, 124, 119,
	120, 128, 127, 132, 133, 134, 135, 286, 0, 106,
	107, 108, 109, 101, 102, 103, 104, 105, 110, 111,
	112, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 278, 0, 0, 0, 117, 116, 121, 118, 0,
	131, 130, 129, 136, 137, 124, 119, 120, 128, 127,
	132, 133, 134, 135, 0, 0, 106, 107, 108, 109,
	101, 102, 103, 104, 105, 110, 111, 112, 123, 224,
	117, 116, 121, 118, 0, 131, 130, 129, 136, 137,
	124, 119, 120, 128, 127, 132, 133, 134, 135, 0,
	0, 106, 107, 108, 109, 101, 102, 103, 104, 105,
	110, 111, 112, 123, 117, 116, 121, 118, 0, 131,
	130, 129, 136, 137, 124, 119, 120, 128, 127, 132,
	133, 134, 135, 0, 0, 106, 107, 108, 109, 101,
	102, 103, 104, 105, 110, 111, 112, 123, 0, 117,
	116, 121, 118, 0, 131, 130, 129, 136, 137, 124,
	119, 120, 128, 127, 132, 133, 134, 135, 0, 0,
	106, 107, 108, 109, 101, 102, 103, 104, 105, 110,
	111, 112, 123, 117, 116, 121, 118, 0, 131, 130,
	129, 136, 137, 124, 119, 120, 128, 127, 132, 133,
	134, 135, 0, 0, 106, 107, 108, 109, 101, 102,
	103, 104, 105, 110, 111, 112, 123, 116, 121, 118,
	0, 131, 130, 129, 136, 137, 124, 119, 120, 128,
	127, 132, 133, 134, 135, 0, 0, 106, 107, 108,
	109, 101, 102, 103, 104, 105, 110, 111, 112, 123,
	121, 118, 0, 131, 130, 129, 136, 137, 124, 119,
	120, 128, 127, 132, 133, 134, 135, 0, 0, 106,
	107, 108, 109, 101, 102, 103, 104, 105, 110, 111,
	112, 123, 39, 72, 81, 83, 82, 73, 0, 74,
	75, 76, 0, 64, 0, 279, 0, 0, 0, 0,
	0, 67, 0, 63, 0, 0, 0, 0, 15, 39,
	72, 81, 83, 82, 73, 0, 74, 75, 76, 0,
	64, 0, 0, 0, 77, 0, 0, 0, 67, 0,
	63, 0, 0, 0, 39, 72, 81, 83, 82, 73,
	0, 74, 75, 76, 0, 64, 0, 0, 0, 0,
	0, 77, 0, 67, 0, 63, 0, 0, 0, 0,
	0, 39, 72, 81, 83, 82, 73, 78, 74, 75,
	76, 79, 64, 80, 0, 0, 77, 0, 0, 0,
	67, 0, 63, 0, 0, 0, 0, 15, 0, 0,
	61, 60, 0, 0, 78, 0, 205, 0, 79, 62,
	80, 0, 0, 77, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 60, 78,
	0, 0, 0, 79, 0, 80, 62, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 60, 55, 0, 78, 0, 0, 0,
	79, 62, 80, 39, 72, 81, 83, 82, 73, 0,
	74, 75, 76, 0, 64, 0, 0, 0, 0, 61,
	60, 0, 67, 0, 63, 0, 0, 0, 62, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 0,
	0, 0, 79, 0, 80, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 60, 0, 0, 0, 0, 0, 0, 0,
	62,
}

var yyPact = [...]int16{
	250, -1000, -1000, 288, 286, -1000, -1000, -1000, 284, 131,
	-1000, -1000, -1000, -1000, -1000, 155, 86, 233, 491, 128,
	128, -1000, -1000, -1000, 302, 166, 240, 202, 160, -1000,
	-1000, 491, 1450, -1000, -1000, 491, 491, 76, -1000, -1000,
	58, -1000, -1000, -1000, -1000, 43, -1000, -1000, 1569, 176,
	1569, -1000, 453, 266, -1000, -1000, 495, 296, -1000, -1000,
	1569, 1569, 1569, 1569, 1477, -1000, -1000, 452, -1000, -1000,
	450, -1000, -1000, -1000, -1000, -1000, -1000, 445, 152, 447,
	446, -1000, -1000, -1000, 161, 210, 419, 491, 128, 491,
	585, 292, 166, 414, -1000, 538, 491, 210, 1450, 433,
	-1000, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
	1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1425, -1000,
	-1000, 135, 1569, 491, 444, -1000, 486, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	36, -1000, -1000, -1000, 248, 1216, 1182, 358, 1569, 8,
	-1000, 240, 445, 1569, 1569, 121, 80, 491, -1000, 1569,
	210, 394, -1000, -1000, 491, -57, -1000, 6, -1000, 220,
	1569, 1569, 491, -1000, 1569, 170, -1000, -1000, 388, -1000,
	362, 206, -1000, 82, 82, 376, 274, 17, 17, -83,
	-83, -83, 141, 141, 141, 141, -82, -82, -82, 245,
	364, -25, 1281, 1249, 245, 1569, -1000, 444, -1000, -1000,
	-1000, -1000, -1000, 1147, -1000, -1000, 1398, -1000, -1000, -1000,
	-1000, 260, -1000, 1569, -1000, -1000, 1113, 1569, 355, -1000,
	-1000, 1078, 1031, 439, -40, -1000, 404, -1000, 1216, -1000,
	491, 390, 1569, 488, 488, 1216, 1216, -1000, -1000, 167,
	334, 154, 369, 95, -1000, -1000, -1000, -1000, 188, 200,
	433, -1000, -1000, -18, -10, -1000, 433, -1000, -1000, 484,
	-1000, -1000, 318, 164, 157, 1569, 245, -1000, 1569, -1000,
	380, 1216, 246, -1000, 1569, 988, 397, 308, 363, 147,
	1569, 1569, 41, 1569, -1000, -40, -1000, 50, 491, -1000,
	-1000, -60, 1216, 366, -1000, 366, -1000, -1000, -1000, -1000,
	-1000, 214, 491, 95, -1000, 95, -1000, 132, -1000, 1569,
	1569, -31, -1000, -9, -9, -9, -24, -31, -1000, 376,
	-1000, -1000, 245, 245, -1000, 1569, -1000, 1216, 1569, 304,
	-1000, -1000, -1000, 147, -1000, 437, 941, 454, -1000, 436,
	377, -1000, 435, -1000, 434, 487, 123, 431, 430, -1000,
	-1000, -1000, 122, 456, -1000, 429, 420, 109, 428, 1216,
	363, -1000, 1569, 427, -28, -1000, -34, -37, -1000, -1000,
	-1000, 1216, 1216, -1000, -1000, 212, -1000, -1000, 1569, 1569,
	-1000, 25, 491, 1569, -1000, 424, 491, 1569, 223, -1000,
	1569, 1569, -1000, -1000, 479, 479, 275, 1569, 1216, 491,
	-1000, -1000, -1000, 1569, 894, 374, 27, 371, 352, 491,
	329, 852, -1000, -1000, -1000, 805, 763, -1000, -1000, 398,
	716, 321, 674, -1000, -1000, -1000, 54, 210, -1000, 300,
	-1000, -91, -1000, -1000, -1000, -1000, 1569, 106, -1000, -1000,
	419, -1000, -1000, 491, 223, 491, 627, -1000, -1000, -1000,
	210, -1000, -1000, -1000, 106, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 277, 629, 30, 296, 624, 0, 7, 623, 621,
	620, 619, 618, 617, 9, 616, 602, 586, 580, 575,
	561, 560, 540, 539, 2, 53, 538, 43, 537, 26,
	10, 23, 11, 125, 536, 46, 534, 39, 3, 531,
	8, 530, 24, 529, 48, 185, 528, 28, 527, 20,
	526, 32, 13, 12, 525, 524, 4, 42, 25, 523,
	1, 521, 18, 520, 21, 15, 517, 516, 6, 14,
	515, 514, 513, 512, 511, 510, 27, 5, 509, 508,
	507, 506, 22, 308, 505, 504, 16, 503, 17, 502,
	19, 498, 496,
}

var yyR1 = [...]int8{
	0, 91, 84, 84, 2, 2, 85, 85, 1, 1,
	1, 1, 1, 92, 92, 3, 3, 26, 26, 26,
	26, 4, 22, 22, 22, 36, 36, 35, 35, 35,
	28, 28, 28, 29, 29, 50, 50, 49, 49, 49,
	49, 30, 30, 30, 31, 31, 51, 51, 90, 90,
	90, 90, 90, 90, 90, 61, 61, 62, 62, 52,
	52, 52, 38, 38, 16, 16, 39, 39, 45, 45,
	46, 46, 47, 21, 21, 21, 48, 48, 48, 44,
	44, 44, 44, 37, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 7, 7, 7, 7, 7, 7,
	27, 53, 53, 17, 17, 17, 17, 17, 17, 17,
	17, 18, 18, 18, 18, 19, 19, 20, 20, 41,
	41, 41, 58, 58, 58, 57, 12, 12, 8, 8,
	8, 9, 9, 59, 59, 14, 14, 15, 15, 40,
	40, 10, 10, 42, 43, 43, 11, 11, 5, 63,
	63, 64, 23, 23, 23, 23, 67, 67, 66, 66,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 32,
	32, 24, 24, 24, 13, 13, 68, 68, 68, 60,
	60, 60, 71, 71, 70, 70, 69, 69, 69, 55,
	55, 56, 34, 34, 72, 72, 72, 54, 54, 73,
	73, 86, 86, 87, 87, 88, 88, 89, 89, 74,
	75, 77, 77, 78, 78, 79, 76, 80, 81, 82,
	82, 83, 83, 25, 25, 25, 33,
}

var yyR2 = [...]int8{
	0, 1, 2, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 0, 1, 3, 5, 1, 2, 1,
	1, 7, 0, 1, 1, 1, 3, 1, 2, 3,
	0, 1, 2, 1, 1, 2, 2, 2, 4, 3,
	3, 0, 1, 2, 1, 1, 4, 4, 1, 1,
	2, 4, 4, 4, 3, 0, 1, 0, 1, 0,
	2, 4, 0, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 3, 0, 1, 1, 0, 2, 2, 0,
	2, 4, 4, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 4,
	2, 2, 3, 5, 5, 3, 3, 3, 4, 1,
	1, 6, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	1, 1, 2, 1, 3, 3, 2, 3, 6, 6,
	8, 6, 5, 0, 1, 1, 3, 0, 1, 0,
	5, 0, 1, 4, 1, 2, 0, 2, 7, 1,
	3, 3, 1, 1, 1, 1, 0, 1, 1, 2,
	4, 3, 2, 5, 5, 3, 3, 8, 6, 0,
	2, 0, 1, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 0, 1, 2, 3, 6, 5, 5, 1,
	3, 3, 0, 2, 7, 5, 6, 0, 3, 3,
	5, 0, 1, 1, 2, 5, 8, 0, 4, 4,
	5, 1, 1, 1, 3, 7, 3, 6, 6, 1,
	3, 1, 3, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -91, -84, -2, -85, -3, -5, -1, -4, 51,
	-72, -74, -75, -80, -81, 30, 65, 68, 69, 74,
	76, -92, 19, -92, 19, -45, -26, 38, 48, 49,
	50, 52, -22, 44, 45, 66, 31, -37, -33, 4,
	-83, -25, 65, 69, 68, -83, -1, -44, 36, -4,
	34, 45, -37, -36, -35, 114, -6, -37, -7, -27,
	113, 112, 121, 25, 15, -57, -12, 23, -8, -9,
	-33, -68, 5, 9, 11, 12, 13, 46, 89, 93,
	95, 6, 8, 7, -37, -37, 70, 85, 16, 85,
	-6, -37, -45, -46, -47, -6, 15, -50, 16, 31,
	-28, 112, 113, 114, 115, 116, 108, 109, 110, 111,
	117, 118, 119, -17, -18, -19, 88, 87, 90, 98,
	99, 89, -20, 120, 97, -29, 24, 101, 100, 94,
	93, 92, 102, 103, 104, 105, 95, 96, -33, 5,
	18, -6, -6, -6, -10, -6, -6, -3, 15, 15,
	-57, 15, 46, 15, 15, -54, 59, 15, -38, 32,
	-77, -78, -79, -76, 15, -27, -33, -37, -25, -37,
	16, 37, 18, -44, 16, -21, 39, 40, -63, -64,
	-27, -38, -35, -49, -51, -37, 15, -6, -6, -6,
	-6, -6, -6, -6, -6, -6, -6, -6, -6, -6,
	-6, -6, -6, -6, -6, 91, 13, 97, 94, 93,
	92, 95, 96, -6, -33, -58, 15, -57, -29, 114,
	-27, -43, -42, 26, 17, 17, -6, -59, 114, 44,
	-57, -6, -6, 67, -3, 67, -53, -27, -6, -38,
	16, -53, 101, 75, 31, -6, -6, -47, -48, 41,
	-71, 16, -70, -23, 53, 21, 22, 54, -16, 33,
	-90, 84, 16, 83, -61, 81, -90, -30, -31, 24,
	-33, 5, -3, -49, -51, 107, -6, -58, 14, 17,
	-14, -6, -11, -42, 28, -6, 24, -15, -14, 17,
	16, 16, -73, 15, -86, -87, -88, 85, 16, 17,
	-76, 17, -6, -82, 5, -82, 42, 43, 17, -64,
	-69, -32, 64, 16, -67, -66, -65, -32, -39, 35,
	34, -49, 84, 80, 77, 78, 79, -49, -31, 17,
	17, 17, -6, -6, 17, 16, 29, -6, 27, -41,
	20, 22, 21, 17, -40, 47, -6, -6, -86, 16,
	-14, -88, 71, -27, 101, 16, 55, 57, 58, -33,
	-69, -65, 55, 89, 57, 58, 59, 60, 24, -6,
	-14, -52, 85, 86, -62, 82, -62, -62, 84, -52,
	-30, -6, -6, 17, -40, 15, 17, 17, 16, 15,
	17, -89, 15, 15, 5, 56, 15, 15, 56, 13,
	15, 15, -7, -13, 112, 113, 61, 15, -6, 15,
	84, 84, 84, 32, -6, -14, 72, -53, -14, 15,
	-53, -6, -24, 39, 40, -6, -6, -68, -68, 24,
	-6, -53, -6, 17, 17, 73, 69, 17, 17, -55,
	-56, -27, 17, 17, 17, 17, 15, 17, 17, 17,
	70, -38, 17, 16, -34, 120, -6, -60, 62, 63,
	-77, -56, -24, -33, 17, -38, -60,
}

var yyDef = [...]int16{
	0, -2, 1, 13, 13, 4, 5, 6, 68, 0,
	8, 9, 10, 11, 12, 22, 0, 0, 0, 0,
	0, 2, 14, 3, 14, 79, 0, 0, 17, 19,
	20, 0, 0, 23, 24, 0, 0, 0, 83, 256,
	0, 251, 253, 254, 255, 0, 7, 15, 0, 68,
	0, 18, 0, 0, 25, 27, 30, 0, 84, 85,
	0, 0, 0, 171, 0, 119, 120, 0, 122, 123,
	-2, 124, 125, 126, 127, 128, 129, 0, 0, 0,
	0, 206, 207, 208, 227, 62, 0, 0, 0, 0,
	80, 0, 79, 69, 70, 73, 0, 62, 0, 0,
	28, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 110,
	111, 0, 0, 0, 0, 31, 0, 133, 134, 135,
	137, 139, 141, 142, 143, 144, 145, 147, 33, 34,
	0, 103, 104, 105, 0, 172, 0, 0, 0, 163,
	156, 0, 0, 0, 0, 0, 0, 0, 239, 0,
	62, 241, 242, 243, 0, 0, 130, 0, 252, 0,
	0, 0, 0, 16, 0, 76, 74, 75, 212, 179,
	0, 64, 26, -2, -2, 41, 0, 87, 88, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 106, 107, 108, 0, 112, 0, 136, 138,
	140, 146, 148, 0, 115, 117, 0, 153, 32, 29,
	86, 176, 174, 0, 116, 155, 0, 167, 0, 164,
	157, 0, 0, 0, 231, 225, 0, 131, 63, 240,
	0, 0, 0, 0, 0, 81, 82, 71, 72, 0,
	0, 199, 213, -2, 182, 183, 184, 185, 66, 0,
	0, 48, 49, 0, 0, 56, 0, 37, 42, 0,
	44, 45, 0, 55, 55, 0, 109, 118, 0, 152,
	0, 165, 0, 175, 0, 0, 0, 0, 168, 169,
	0, 0, 231, 0, 226, 232, 233, 0, 0, 228,
	244, 0, 246, 247, 249, 248, 77, 78, 178, 180,
	214, 0, 0, 199, 181, -2, 188, 0, 21, 0,
	0, 59, 50, 57, 57, 57, 0, 59, 43, 41,
	39, 40, 102, 113, 154, 0, 114, 177, 0, 0,
	149, 150, 151, 169, 162, 0, 0, 0, 224, 0,
	0, 234, 237, 132, 0, 0, 0, 0, 0, 200,
	215, 189, 0, 0, 192, 0, 0, 0, 0, 67,
	65, 46, 0, 0, 0, 58, 0, 0, 54, 47,
	38, 166, 173, 121, 161, 0, 158, 159, 0, 0,
	229, 0, 0, 0, 250, 0, 0, 0, 201, 191,
	0, 0, 195, 196, 0, 0, 0, 0, 60, 0,
	51, 52, 53, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 202, 203, 0, 0, 204, 205, 0,
	0, 0, 0, 160, 230, 235, 0, 62, 245, 0,
	219, 222, 217, 218, 193, 194, 0, 209, 61, 170,
	0, 238, 216, 0, 201, 0, 0, 198, 210, 211,
	62, 220, 221, 223, 209, 236, 197,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 116, 108, 3,
	15, 17, 114, 112, 16, 113, 18, 115, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 19,
	102, 101, 103, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 109, 3, 121,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 20, 21, 22, 23, 24, 25, 26,
	27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
	87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 104, 105, 106, 107, 110, 111,
	117, 118, 119, 120, 122,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).ast = &AST{Statements: yyDollar[1].stmts}
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.stmts = []Statement{yyDollar[1].statement}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.stmts = yyDollar[1].stmts
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.statement = yyDollar[1].readStmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.statement = yyDollar[1].createTableStmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.stmts = []Statement{yyDollar[1].statement}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[3].statement)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).statementIdx++
			yyVAL.statement = yyDollar[1].insertStmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).statementIdx++
			yyVAL.statement = yyDollar[1].deleteStmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).statementIdx++
			yyVAL.statement = yyDollar[1].updateStmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).statementIdx++
			yyVAL.statement = yyDollar[1].grant
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).statementIdx++
			yyVAL.statement = yyDollar[1].revoke
		}
	case 13:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyDollar[1].baseSelect.OrderBy = yyDollar[2].orderBy
			yyDollar[1].baseSelect.Limit = yyDollar[3].limit
			yyVAL.readStmt = yyDollar[1].baseSelect
		}
	case 16:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.readStmt = &CompoundSelect{Type: yyDollar[2].string, Left: yyDollar[1].baseSelect, Right: yyDollar[3].baseSelect, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit}
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = CompoundUnionStr
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = CompoundUnionAllStr
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = CompoundExceptStr
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = CompoundIntersectStr
		}
	case 21:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.baseSelect = &Select{
				Distinct:         yyDollar[2].string,
				SelectColumnList: yyDollar[3].selectColumnList,
				From:             yyDollar[4].tableExpr,
				Where:            yyDollar[5].where,
				GroupBy:          GroupBy(yyDollar[6].exprs),
				Having:           yyDollar[7].where,
			}
		}
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = ""
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = DistinctStr
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = AllStr
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.selectColumnList = SelectColumnList{yyDollar[1].selectColumn}
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.selectColumnList = append(yyDollar[1].selectColumnList, yyDollar[3].selectColumn)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.selectColumn = &StarSelectColumn{}
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.selectColumn = &AliasedSelectColumn{Expr: yyDollar[1].expr, As: yyDollar[2].identifier}
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.selectColumn = &StarSelectColumn{TableRef: yyDollar[1].table}
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.identifier = Identifier("")
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = yyDollar[1].identifier
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.identifier = yyDollar[2].identifier
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = yyDollar[1].identifier
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = Identifier(string(yyDollar[1].bytes[1 : len(yyDollar[1].bytes)-1]))
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tableExpr = yyDollar[2].tableExpr
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tableExpr = yyDollar[2].joinTableExpr
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyDollar[1].table.IsTarget = true
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].table, As: yyDollar[2].identifier}
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: &Subquery{Select: yyDollar[2].readStmt}, As: yyDollar[4].identifier}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tableExpr = &ParenTableExpr{TableExpr: yyDollar[2].tableExpr}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tableExpr = yyDollar[2].joinTableExpr
		}
	case 41:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.identifier = Identifier("")
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = yyDollar[1].identifier
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.identifier = yyDollar[2].identifier
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = yyDollar[1].identifier
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = Identifier(string(yyDollar[1].bytes[1 : len(yyDollar[1].bytes)-1]))
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			if yyDollar[4].joinTableExpr == nil {
				yyVAL.joinTableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, JoinOperator: yyDollar[2].joinOperator, RightExpr: yyDollar[3].tableExpr}
			} else {
				if yyDollar[2].joinOperator.Natural {
					yylex.(*Lexer).AddError(&ErrNaturalJoinWithOnOrUsingClause{})
				}

				yyDollar[4].joinTableExpr.LeftExpr = yyDollar[1].tableExpr
				yyDollar[4].joinTableExpr.JoinOperator = yyDollar[2].joinOperator
				yyDollar[4].joinTableExpr.RightExpr = yyDollar[3].tableExpr
				yyVAL.joinTableExpr = yyDollar[4].joinTableExpr
			}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			if yyDollar[4].joinTableExpr == nil {
				yyVAL.joinTableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].joinTableExpr, JoinOperator: yyDollar[2].joinOperator, RightExpr: yyDollar[3].tableExpr}
			} else {
				if yyDollar[2].joinOperator.Natural {
					yylex.(*Lexer).AddError(&ErrNaturalJoinWithOnOrUsingClause{})
				}

				yyDollar[4].joinTableExpr.LeftExpr = yyDollar[1].joinTableExpr
				yyDollar[4].joinTableExpr.JoinOperator = yyDollar[2].joinOperator
				yyDollar[4].joinTableExpr.RightExpr = yyDollar[3].tableExpr
				yyVAL.joinTableExpr = yyDollar[4].joinTableExpr
			}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.joinOperator = &JoinOperator{Op: JoinStr}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.joinOperator = &JoinOperator{Op: JoinStr}
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.joinOperator = &JoinOperator{Op: JoinStr}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.joinOperator = &JoinOperator{Op: LeftJoinStr, Natural: yyDollar[1].bool, Outer: yyDollar[3].bool}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.joinOperator = &JoinOperator{Op: RightJoinStr, Natural: yyDollar[1].bool, Outer: yyDollar[3].bool}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.joinOperator = &JoinOperator{Op: FullJoinStr, Natural: yyDollar[1].bool, Outer: yyDollar[3].bool}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.joinOperator = &JoinOperator{Op: InnerJoinStr, Natural: yyDollar[1].bool}
		}
	case 55:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.bool = false
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.bool = true
		}
	case 57:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.bool = false
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.bool = true
		}
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.joinTableExpr = nil
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.joinTableExpr = &JoinTableExpr{On: yyDollar[2].expr}
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.joinTableExpr = &JoinTableExpr{Using: yyDollar[3].columnList}
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.where = nil
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.where = NewWhere(WhereStr, yyDollar[2].expr)
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exprs = nil
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.where = nil
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.where = NewWhere(HavingStr, yyDollar[2].expr)
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.orderBy = nil
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].orderingTerm}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].orderingTerm)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.orderingTerm = &OrderingTerm{Expr: yyDollar[1].expr, Direction: yyDollar[2].string, Nulls: yyDollar[3].nulls}
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = AscStr
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = AscStr
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = DescStr
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.nulls = NullsNil
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.nulls = NullsFirst
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.nulls = NullsLast
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.limit = nil
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.limit = &Limit{Limit: yyDollar[2].expr}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Limit: yyDollar[4].expr}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Limit: yyDollar[2].expr}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.table = &Table{Name: yyDollar[1].identifier}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].column
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyDollar[3].column.TableRef = yyDollar[1].table
			yyVAL.expr = yyDollar[3].column
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ConcatStr, Right: yyDollar[3].expr}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr}
		}
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr, Escape: yyDollar[5].expr}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			if value, ok := yyDollar[2].expr.(*Value); ok && value.Type == IntValue {
				yyVAL.expr = &Value{Type: IntValue, Value: append([]byte("-"), value.Value...)}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &IsExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.expr = &IsExpr{Left: yyDollar[1].expr, Right: &NotExpr{Expr: yyDollar[4].expr}}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &IsNullExpr{Expr: yyDollar[1].expr}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &NotNullExpr{Expr: yyDollar[1].expr}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &NotNullExpr{Expr: yyDollar[1].expr}
		}
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.expr = &BetweenExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 114:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, CollationName: yyDollar[3].identifier}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 121:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].value
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			str := yyDollar[1].bytes[1 : len(yyDollar[1].bytes)-1]
			if len(str) > MaxTextLength {
				yylex.(*Lexer).AddError(&ErrTextTooLong{Length: len(str), MaxAllowed: MaxTextLength})
			}
			yyVAL.expr = &Value{Type: StrValue, Value: str}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if len(yyDollar[1].bytes) > MaxBlobLength {
				yylex.(*Lexer).AddError(&ErrBlobTooBig{Length: len(yyDollar[1].bytes), MaxAllowed: MaxBlobLength})
			}
			yyVAL.expr = &Value{Type: BlobValue, Value: yyDollar[1].bytes}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = BoolValue(true)
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = BoolValue(false)
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &NullValue{}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.column = &Column{Name: Identifier(string(yyDollar[1].identifier))}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnList = ColumnList{yyDollar[1].column}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnList = append(yyDollar[1].columnList, yyDollar[3].column)
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = EqualStr
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = NotEqualStr
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = RegexpStr
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotRegexpStr
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = GlobStr
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotGlobStr
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = MatchStr
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotMatchStr
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = LessThanStr
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = GreaterThanStr
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = LessEqualStr
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = GreaterEqualStr
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = LikeStr
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotLikeStr
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = BetweenStr
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotBetweenStr
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = NoneStr
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = TextStr
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = IntegerStr
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.colTuple = Exprs{}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.colTuple = yyDollar[2].exprs
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.subquery = &Subquery{Select: yyDollar[2].readStmt}
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &NotExpr{Expr: &ExistsExpr{Subquery: yyDollar[3].subquery}}
		}
	case 158:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.expr = &FuncExpr{Name: Identifier("glob"), Args: Exprs{yyDollar[3].expr, yyDollar[5].expr}}
		}
	case 159:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.expr = &FuncExpr{Name: Identifier("like"), Args: Exprs{yyDollar[3].expr, yyDollar[5].expr}}
		}
	case 160:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.expr = &FuncExpr{Name: Identifier("like"), Args: Exprs{yyDollar[3].expr, yyDollar[5].expr, yyDollar[7].expr}}
		}
	case 161:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			lowered := strings.ToLower(string(yyDollar[1].identifier))
			isCustom, ok := AllowedFunctions[lowered]
			if !ok {
				yylex.(*Lexer).AddError(&ErrNoSuchFunction{FunctionName: string(yyDollar[1].identifier)})
			}

			if isCustom {
				if yyDollar[3].bool {
					yylex.(*Lexer).AddError(errors.New("custom function cannot have DISTINCT"))
				}

				if yyDollar[6].where != nil {
					yylex.(*Lexer).AddError(errors.New("custom function cannot have FILTER"))
				}
				yyVAL.expr = &CustomFuncExpr{Name: Identifier(lowered), Args: yyDollar[4].exprs}
			} else {
				yyVAL.expr = &FuncExpr{Name: Identifier(lowered), Distinct: yyDollar[3].bool, Args: yyDollar[4].exprs, Filter: yyDollar[6].where}
			}
		}
	case 162:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			lowered := strings.ToLower(string(yyDollar[1].identifier))
			isCustom, ok := AllowedFunctions[lowered]
			if !ok {
				yylex.(*Lexer).AddError(&ErrNoSuchFunction{FunctionName: string(yyDollar[1].identifier)})
			}

			if isCustom {
				yylex.(*Lexer).AddError(errors.New("custom function cannot be used with *"))
			} else {
				yyVAL.expr = &FuncExpr{Name: Identifier(lowered), Distinct: false, Args: nil, Filter: yyDollar[5].where}
			}
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.bool = false
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.bool = true
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exprs = Exprs{}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.where = nil
		}
	case 170:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.where = &Where{Type: WhereStr, Expr: yyDollar[4].expr}
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.expr = nil
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.when = &When{Condition: yyDollar[2].expr, Value: yyDollar[4].expr}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.expr = nil
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 178:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			if len(yyDollar[5].columnDefList) > MaxAllowedColumns {
				yylex.(*Lexer).AddError(&ErrTooManyColumns{ColumnCount: len(yyDollar[5].columnDefList), MaxAllowed: MaxAllowedColumns})
			}

			// We have to replace a primary key table constraint with an equivalent column constraint primary key,
			// so we can add the autoincrement flag, as part of the rules of the Tableland Protocol.
			//
			// That happens because a primary key table constraint that references a single INTEGER column
			// would be an alias to rowid. For cases where a column becomes an alias to rowid we want to force the AUTOINCREMENT.
			//
			// The exception to the above rule is when a table constraint primary key has order DESC. In that case, we replace with an
			// equivalent column constrain without forcing AUTOINCREMENT and avoiding being interpreted as an alias.
			for index, tableConstraint := range yyDollar[6].tableConstraints {
				if tableConstraintPK, ok := tableConstraint.(*TableConstraintPrimaryKey); ok && len(tableConstraintPK.Columns) == 1 {
					for _, columnDef := range yyDollar[5].columnDefList {
						if columnDef.Type == TypeIntegerStr && !columnDef.HasPrimaryKey() {
							if tableConstraintPK != nil && columnDef.Column.Name == tableConstraintPK.Columns[0].Column.Name {
								forceAutoincrement := tableConstraintPK.Columns[0].Order != PrimaryKeyOrderDesc
								columnDef.Constraints = append(columnDef.Constraints, &ColumnConstraintPrimaryKey{Name: tableConstraintPK.Name, AutoIncrement: forceAutoincrement, Order: tableConstraintPK.Columns[0].Order})
								yyDollar[6].tableConstraints = append(yyDollar[6].tableConstraints[:index], yyDollar[6].tableConstraints[index+1:]...)
							}
						}
					}
				}
			}
			yyDollar[3].table.IsTarget = true
			yyVAL.createTableStmt = &CreateTable{Table: yyDollar[3].table, ColumnsDef: yyDollar[5].columnDefList, Constraints: yyDollar[6].tableConstraints}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnDefList = []*ColumnDef{yyDollar[1].columnDef}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnDefList = append(yyDollar[1].columnDefList, yyDollar[3].columnDef)
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if isRowID(yyDollar[1].column.Name) {
				yylex.(*Lexer).AddError(&ErrRowIDNotAllowed{})
			}

			if yyDollar[2].string == TypeIntegerStr {
				for _, constraint := range yyDollar[3].columnConstraints {
					if primaryKey, ok := constraint.(*ColumnConstraintPrimaryKey); ok {
						if primaryKey.Order != PrimaryKeyOrderDesc {
							primaryKey.AutoIncrement = true
						}
					}
				}
			}
			yyVAL.columnDef = &ColumnDef{Column: yyDollar[1].column, Type: yyDollar[2].string, Constraints: yyDollar[3].columnConstraints}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeIntStr
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeIntegerStr
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeTextStr
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeBlobStr
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.columnConstraints = []ColumnConstraint{}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnConstraints = yyDollar[1].columnConstraints
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if _, ok := yyDollar[1].columnConstraint.(*ColumnConstraintPrimaryKey); ok {
				if yylex.(*Lexer).createStmtHasPrimaryKey {
					yylex.(*Lexer).AddError(&ErrMultiplePrimaryKey{})
				} else {
					yylex.(*Lexer).createStmtHasPrimaryKey = true
				}
			}
			yyVAL.columnConstraints = []ColumnConstraint{yyDollar[1].columnConstraint}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			if _, ok := yyDollar[2].columnConstraint.(*ColumnConstraintPrimaryKey); ok && yylex.(*Lexer).createStmtHasPrimaryKey {
				yylex.(*Lexer).AddError(&ErrMultiplePrimaryKey{})
			}
			yyVAL.columnConstraints = append(yyDollar[1].columnConstraints, yyDollar[2].columnConstraint)
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintPrimaryKey{Name: yyDollar[1].identifier, Order: yyDollar[4].string}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintNotNull{Name: yyDollar[1].identifier}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintUnique{Name: yyDollar[1].identifier}
		}
	case 193:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintCheck{Name: yyDollar[1].identifier, Expr: yyDollar[4].expr}
		}
	case 194:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintDefault{Name: yyDollar[1].identifier, Expr: yyDollar[4].expr, Parenthesis: true}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintDefault{Name: yyDollar[1].identifier, Expr: yyDollar[3].expr}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintDefault{Name: yyDollar[1].identifier, Expr: yyDollar[3].expr}
		}
	case 197:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintGenerated{Name: yyDollar[1].identifier, Expr: yyDollar[6].expr, GeneratedAlways: true, IsStored: yyDollar[8].bool}
		}
	case 198:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintGenerated{Name: yyDollar[1].identifier, Expr: yyDollar[4].expr, GeneratedAlways: false, IsStored: yyDollar[6].bool}
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.identifier = Identifier("")
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.identifier = yyDollar[2].identifier
		}
	case 201:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = PrimaryKeyOrderEmpty
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = PrimaryKeyOrderAsc
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = PrimaryKeyOrderDesc
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = yyDollar[2].value
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyDollar[2].value.Value = append([]byte("-"), yyDollar[2].value.Value...)
			yyVAL.expr = yyDollar[2].value
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Value{Type: IntValue, Value: yyDollar[1].bytes}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).AddError(&ErrNumericLiteralFloat{Value: yyDollar[1].bytes})
			yyVAL.value = &Value{Type: FloatValue, Value: yyDollar[1].bytes}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Value{Type: HexNumValue, Value: yyDollar[1].bytes}
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.bool = false
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.bool = true
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.bool = false
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.tableConstraints = []TableConstraint{}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tableConstraints = yyDollar[1].tableConstraints
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			if _, ok := yyDollar[2].tableConstraint.(*TableConstraintPrimaryKey); ok {
				if yylex.(*Lexer).createStmtHasPrimaryKey {
					yylex.(*Lexer).AddError(&ErrMultiplePrimaryKey{})
				} else {
					yylex.(*Lexer).createStmtHasPrimaryKey = true
				}
			}
			yyVAL.tableConstraints = []TableConstraint{yyDollar[2].tableConstraint}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if _, ok := yyDollar[3].tableConstraint.(*TableConstraintPrimaryKey); ok && yylex.(*Lexer).createStmtHasPrimaryKey {
				yylex.(*Lexer).AddError(&ErrMultiplePrimaryKey{})
			}
			yyVAL.tableConstraints = append(yyDollar[1].tableConstraints, yyDollar[3].tableConstraint)
		}
	case 216:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.tableConstraint = &TableConstraintPrimaryKey{Name: yyDollar[1].identifier, Columns: yyDollar[5].indexedColumnList}
		}
	case 217:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.tableConstraint = &TableConstraintUnique{Name: yyDollar[1].identifier, Columns: yyDollar[4].columnList}
		}
	case 218:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.tableConstraint = &TableConstraintCheck{Name: yyDollar[1].identifier, Expr: yyDollar[4].expr}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.indexedColumnList = IndexedColumnList{yyDollar[1].indexedColumn}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.indexedColumnList = append(yyDollar[1].indexedColumnList, yyDollar[3].indexedColumn)
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.indexedColumn = &IndexedColumn{Column: yyDollar[1].column, CollationName: yyDollar[2].identifier, Order: yyDollar[3].string}
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.identifier = Identifier("")
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.identifier = Identifier(string(yyDollar[2].identifier))
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			for i := 0; i < len(yyDollar[4].columnList); i++ {
				if isRowID(yyDollar[4].columnList[i].Name) {
					yylex.(*Lexer).AddError(&ErrRowIDNotAllowed{})
				}
			}

			for _, row := range yyDollar[6].insertRows {
				for _, expr := range row {
					if containsSubquery(expr) {
						yylex.(*Lexer).AddError(&ErrStatementContainsSubquery{StatementKind: "insert"})
					}
				}
			}
			yyDollar[3].table.IsTarget = true
			yyVAL.insertStmt = &Insert{Table: yyDollar[3].table, Columns: yyDollar[4].columnList, Rows: yyDollar[6].insertRows, Upsert: yyDollar[7].upsertClause}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyDollar[3].table.IsTarget = true
			yyVAL.insertStmt = &Insert{Table: yyDollar[3].table, Columns: ColumnList{}, Rows: []Exprs{}, DefaultValues: true}
		}
	case 226:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyDollar[3].table.IsTarget = true

			err := yyDollar[5].readStmt.walkSubtree(func(node Node) (bool, error) {
				if _, ok := node.(*Subquery); ok {
					return true, &ErrStatementContainsSubquery{StatementKind: "insert+select"}
				}

				if _, ok := node.(*JoinTableExpr); ok {
					return true, &ErrContainsJoinTableExpr{}
				}

				return false, nil
			})
			if err != nil {
				yylex.(*Lexer).AddError(err)
			}

			if sel, ok := yyDollar[5].readStmt.(*Select); ok {
				if sel.Having != nil || sel.GroupBy != nil {
					yylex.(*Lexer).AddError(&ErrHavingOrGroupByIsNotAllowed{})
				}

				if sel.OrderBy == nil {
					sel.OrderBy = OrderBy{&OrderingTerm{Expr: &Column{Name: Identifier("rowid")}, Direction: AscStr, Nulls: NullsNil}}
				} else {
					sel.OrderBy = append(sel.OrderBy, &OrderingTerm{Expr: &Column{Name: Identifier("rowid")}, Direction: AscStr, Nulls: NullsNil})
				}

				yyVAL.insertStmt = &Insert{Table: yyDollar[3].table, Columns: ColumnList{}, Rows: []Exprs{}, Select: sel, Upsert: yyDollar[6].upsertClause}
			} else {
				yylex.(*Lexer).AddError(&ErrCompoudSelectNotAllowed{})
				yyVAL.insertStmt = &Insert{Table: yyDollar[3].table, Columns: ColumnList{}, Rows: []Exprs{}, Upsert: yyDollar[6].upsertClause}
			}
		}
	case 227:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.columnList = ColumnList{}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnList = yyDollar[2].columnList
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.insertRows = []Exprs{yyDollar[2].exprs}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.insertRows = append(yyDollar[1].insertRows, yyDollar[4].exprs)
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.upsertClause = nil
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			allConflictClausesExceptLast := yyDollar[1].onConflictClauseList[0 : len(yyDollar[1].onConflictClauseList)-1]
			for _, clause := range allConflictClausesExceptLast {
				if clause.Target == nil {
					yylex.(*Lexer).AddError(&ErrUpsertMissingTarget{})
				}
			}
			yyVAL.upsertClause = yyDollar[1].onConflictClauseList
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.onConflictClauseList = []*OnConflictClause{yyDollar[1].onConflictClause}
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.onConflictClauseList = append(yyDollar[1].onConflictClauseList, yyDollar[2].onConflictClause)
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.onConflictClause = &OnConflictClause{
				Target: yyDollar[3].onConflictTarget,
			}
		}
	case 236:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			if yyDollar[8].where != nil && containsSubquery(yyDollar[8].where) {
				yylex.(*Lexer).AddError(&ErrStatementContainsSubquery{StatementKind: "where"})
			}

			yyVAL.onConflictClause = &OnConflictClause{
				Target: yyDollar[3].onConflictTarget,
				DoUpdate: &OnConflictUpdate{
					Exprs: yyDollar[7].updateList,
					Where: yyDollar[8].where,
				},
			}
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.onConflictTarget = nil
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			if yyDollar[4].where != nil && containsSubquery(yyDollar[4].where) {
				yylex.(*Lexer).AddError(&ErrStatementContainsSubquery{StatementKind: "where"})
			}

			yyVAL.onConflictTarget = &OnConflictTarget{
				Columns: yyDollar[2].columnList,
				Where:   yyDollar[4].where,
			}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			if yyDollar[4].where != nil && containsSubquery(yyDollar[4].where) {
				yylex.(*Lexer).AddError(&ErrStatementContainsSubquery{StatementKind: "delete"})
			}
			yyDollar[3].table.IsTarget = true
			yyVAL.deleteStmt = &Delete{Table: yyDollar[3].table, Where: yyDollar[4].where}
		}
	case 240:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			if yyDollar[5].where != nil && containsSubquery(yyDollar[5].where) {
				yylex.(*Lexer).AddError(&ErrStatementContainsSubquery{StatementKind: "where"})
			}
			yyDollar[2].table.IsTarget = true
			yyVAL.updateStmt = &Update{Table: yyDollar[2].table, Exprs: yyDollar[4].updateList, Where: yyDollar[5].where}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.updateList = yyDollar[1].updateList
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.updateList = yyDollar[1].updateList
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if containsSubquery(yyDollar[1].updateExpression.Expr) {
				yylex.(*Lexer).AddError(&ErrStatementContainsSubquery{StatementKind: "update"})
			}
			yyVAL.updateList = []*UpdateExpr{yyDollar[1].updateExpression}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.updateList = append(yyDollar[1].updateList, yyDollar[3].updateExpression)
		}
	case 245:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			if len(yyDollar[2].columnList) != len(yyDollar[6].exprs) {
				yylex.(*Lexer).AddError(&ErrUpdateColumnsAndValuesDiffer{ColumnsCount: len(yyDollar[2].columnList), ValuesCount: len(yyDollar[6].exprs)})
				yyVAL.updateList = []*UpdateExpr{}
			} else {
				exprs := make([]*UpdateExpr, len(yyDollar[2].columnList))
				for i := 0; i < len(yyDollar[2].columnList); i++ {
					if isRowID(yyDollar[2].columnList[i].Name) {
						yylex.(*Lexer).AddError(&ErrRowIDNotAllowed{})
					}
					exprs[i] = &UpdateExpr{Column: yyDollar[2].columnList[i], Expr: yyDollar[6].exprs[i]}
				}
				yyVAL.updateList = exprs
			}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if isRowID(yyDollar[1].column.Name) {
				yylex.(*Lexer).AddError(&ErrRowIDNotAllowed{})
			}
			yyVAL.updateExpression = &UpdateExpr{Column: yyDollar[1].column, Expr: yyDollar[3].expr}
		}
	case 247:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyDollar[4].table.IsTarget = true
			yyVAL.grant = &Grant{Table: yyDollar[4].table, Privileges: yyDollar[2].privileges, Roles: yyDollar[6].strings}
		}
	case 248:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyDollar[4].table.IsTarget = true
			yyVAL.revoke = &Revoke{Table: yyDollar[4].table, Privileges: yyDollar[2].privileges, Roles: yyDollar[6].strings}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.strings = []string{string(yyDollar[1].bytes[1 : len(yyDollar[1].bytes)-1])}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.strings = append(yyDollar[1].strings, string(yyDollar[3].bytes[1:len(yyDollar[3].bytes)-1]))
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			privileges := make(map[string]struct{})
			privileges[yyDollar[1].string] = struct{}{}
			yyVAL.privileges = Privileges(privileges)
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if _, ok := yyDollar[1].privileges[yyDollar[3].string]; ok {
				yylex.(*Lexer).AddError(&ErrGrantRepeatedPrivilege{Privilege: yyDollar[3].string})
			}

			yyDollar[1].privileges[yyDollar[3].string] = struct{}{}
			yyVAL.privileges = yyDollar[1].privileges
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = "insert"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = "update"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = "delete"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			literalUpper := bytes.ToUpper(yyDollar[1].bytes)
			if _, ok := keywordsNotAllowed[string(literalUpper)]; ok {
				yylex.(*Lexer).AddError(&ErrKeywordIsNotAllowed{Keyword: string(yyDollar[1].bytes)})
			}

			yyVAL.identifier = Identifier(yyDollar[1].bytes)
		}
	}
	goto yystack /* stack new state and value */
}
