// Code generated by goyacc -l -o yy_parser.go grammar.y. DO NOT EDIT.
package sqlparser

import __yyfmt__ "fmt"

import (
	"bytes"
	"strings"
)

var keywordsNotAllowed = map[string]struct{}{
	// We don't allow non-deterministic keywords as identifiers.
	"CURRENT_TIME":      {},
	"CURRENT_DATE":      {},
	"CURRENT_TIMESTAMP": {},

	// SQLite reserved keywords that are not part of Tableland spec.
	// We can't allow them as identifiers because it will throw an error in SQLite.
	//
	// SQLite has more reserved keywords (eg. CREATE, INSERT, ...). But those are part of the Tableland grammar,
	// that means that the parser already checks from them.
	//
	// These were identified by running the `TestReservedKeywords` test.
	"REFERENCES":    {},
	"ADD":           {},
	"ALTER":         {},
	"AUTOINCREMENT": {},
	"COMMIT":        {},
	"DEFERRABLE":    {},
	"DROP":          {},
	"EXCEPT":        {},
	"FOREIGN":       {},
	"INDEX":         {},
	"INTERSECT":     {},
	"RETURNING":     {},
	"TRANSACTION":   {},
	"UNION":         {},
}

type yySymType struct {
	yys                  int
	bool                 bool
	string               string
	bytes                []byte
	expr                 Expr
	exprs                Exprs
	column               *Column
	table                *Table
	convertType          ConvertType
	when                 *When
	whens                []*When
	SelectColumn         SelectColumn
	SelectColumnList     SelectColumnList
	selectStmt           *Select
	where                *Where
	limit                *Limit
	orderBy              OrderBy
	orderingTerm         *OrderingTerm
	nulls                NullsType
	tableExprList        TableExprList
	tableExpr            TableExpr
	joinTableExpr        *JoinTableExpr
	columnList           ColumnList
	subquery             *Subquery
	colTuple             ColTuple
	statement            Statement
	identifier           Identifier
	createTableStmt      *CreateTable
	columnDefList        []*ColumnDef
	columnDef            *ColumnDef
	columnConstraint     ColumnConstraint
	columnConstraints    []ColumnConstraint
	value                *Value
	tableConstraint      TableConstraint
	tableConstraints     []TableConstraint
	insertStmt           *Insert
	insertRows           []Exprs
	deleteStmt           *Delete
	updateStmt           *Update
	updateExpression     *UpdateExpr
	updateList           []*UpdateExpr
	grant                *Grant
	revoke               *Revoke
	strings              []string
	privileges           Privileges
	stmts                []Statement
	upsertClause         Upsert
	onConflictClauseList []*OnConflictClause
	onConflictClause     *OnConflictClause
	onConflictTarget     *OnConflictTarget
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGRAL = 57348
const HEXNUM = 57349
const FLOAT = 57350
const BLOBVAL = 57351
const ERROR = 57352
const TRUE = 57353
const FALSE = 57354
const NULL = 57355
const AND = 57356
const NONE = 57357
const INTEGER = 57358
const NUMERIC = 57359
const REAL = 57360
const TEXT = 57361
const CAST = 57362
const AS = 57363
const CASE = 57364
const WHEN = 57365
const THEN = 57366
const ELSE = 57367
const END = 57368
const SELECT = 57369
const FROM = 57370
const WHERE = 57371
const GROUP = 57372
const BY = 57373
const HAVING = 57374
const LIMIT = 57375
const OFFSET = 57376
const ORDER = 57377
const ASC = 57378
const DESC = 57379
const NULLS = 57380
const FIRST = 57381
const LAST = 57382
const DISTINCT = 57383
const ALL = 57384
const EXISTS = 57385
const FILTER = 57386
const CREATE = 57387
const TABLE = 57388
const INT = 57389
const BLOB = 57390
const ANY = 57391
const PRIMARY = 57392
const KEY = 57393
const UNIQUE = 57394
const CHECK = 57395
const DEFAULT = 57396
const GENERATED = 57397
const ALWAYS = 57398
const STORED = 57399
const VIRTUAL = 57400
const CONSTRAINT = 57401
const INSERT = 57402
const INTO = 57403
const VALUES = 57404
const DELETE = 57405
const UPDATE = 57406
const SET = 57407
const CONFLICT = 57408
const DO = 57409
const NOTHING = 57410
const GRANT = 57411
const TO = 57412
const REVOKE = 57413
const JOIN = 57414
const ON = 57415
const USING = 57416
const OR = 57417
const ANDOP = 57418
const NOT = 57419
const IS = 57420
const ISNOT = 57421
const MATCH = 57422
const GLOB = 57423
const REGEXP = 57424
const LIKE = 57425
const BETWEEN = 57426
const IN = 57427
const ISNULL = 57428
const NOTNULL = 57429
const NE = 57430
const LE = 57431
const GE = 57432
const INEQUALITY = 57433
const ESCAPE = 57434
const LSHIFT = 57435
const RSHIFT = 57436
const CONCAT = 57437
const JSON_EXTRACT_OP = 57438
const JSON_UNQUOTE_EXTRACT_OP = 57439
const COLLATE = 57440
const UNARY = 57441

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGRAL",
	"HEXNUM",
	"FLOAT",
	"BLOBVAL",
	"ERROR",
	"TRUE",
	"FALSE",
	"NULL",
	"AND",
	"'('",
	"','",
	"')'",
	"'.'",
	"';'",
	"NONE",
	"INTEGER",
	"NUMERIC",
	"REAL",
	"TEXT",
	"CAST",
	"AS",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"SELECT",
	"FROM",
	"WHERE",
	"GROUP",
	"BY",
	"HAVING",
	"LIMIT",
	"OFFSET",
	"ORDER",
	"ASC",
	"DESC",
	"NULLS",
	"FIRST",
	"LAST",
	"DISTINCT",
	"ALL",
	"EXISTS",
	"FILTER",
	"CREATE",
	"TABLE",
	"INT",
	"BLOB",
	"ANY",
	"PRIMARY",
	"KEY",
	"UNIQUE",
	"CHECK",
	"DEFAULT",
	"GENERATED",
	"ALWAYS",
	"STORED",
	"VIRTUAL",
	"CONSTRAINT",
	"INSERT",
	"INTO",
	"VALUES",
	"DELETE",
	"UPDATE",
	"SET",
	"CONFLICT",
	"DO",
	"NOTHING",
	"GRANT",
	"TO",
	"REVOKE",
	"JOIN",
	"ON",
	"USING",
	"OR",
	"ANDOP",
	"NOT",
	"IS",
	"ISNOT",
	"MATCH",
	"GLOB",
	"REGEXP",
	"LIKE",
	"BETWEEN",
	"IN",
	"ISNULL",
	"NOTNULL",
	"NE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"INEQUALITY",
	"ESCAPE",
	"'&'",
	"'|'",
	"LSHIFT",
	"RSHIFT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"CONCAT",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"COLLATE",
	"'~'",
	"UNARY",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 57,
	18, 68,
	-2, 115,
	-1, 254,
	16, 175,
	17, 175,
	-2, 188,
	-1, 306,
	16, 176,
	17, 176,
	-2, 188,
}

const yyPrivate = 57344

const yyLast = 1527

var yyAct = [...]int16{
	240, 426, 143, 380, 58, 239, 212, 45, 312, 301,
	302, 307, 295, 226, 322, 157, 208, 227, 196, 146,
	188, 268, 141, 129, 5, 43, 156, 155, 84, 85,
	86, 91, 92, 93, 104, 104, 46, 57, 32, 316,
	106, 52, 91, 92, 93, 104, 123, 203, 122, 124,
	125, 127, 128, 218, 41, 31, 323, 324, 310, 15,
	313, 76, 16, 17, 30, 31, 31, 31, 18, 280,
	19, 44, 225, 76, 71, 72, 73, 224, 34, 219,
	43, 119, 398, 160, 161, 162, 163, 164, 165, 166,
	167, 168, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 153, 350, 429, 186, 417, 132, 74, 202, 416,
	211, 148, 149, 31, 210, 31, 179, 28, 31, 303,
	313, 32, 150, 77, 152, 372, 44, 158, 364, 224,
	361, 200, 427, 428, 154, 75, 205, 206, 347, 27,
	296, 192, 187, 214, 134, 119, 35, 190, 191, 37,
	36, 140, 25, 26, 217, 151, 423, 355, 193, 149,
	335, 319, 336, 337, 431, 432, 215, 341, 272, 343,
	344, 345, 346, 356, 209, 149, 204, 213, 149, 235,
	273, 303, 222, 231, 213, 149, 233, 232, 183, 182,
	181, 184, 185, 180, 342, 139, 229, 31, 244, 389,
	390, 236, 142, 359, 79, 32, 158, 247, 220, 29,
	8, 285, 197, 197, 242, 243, 159, 395, 23, 267,
	194, 80, 190, 7, 256, 33, 257, 258, 21, 263,
	424, 193, 149, 8, 121, 281, 265, 403, 282, 274,
	275, 276, 270, 329, 286, 38, 277, 39, 263, 418,
	297, 298, 299, 148, 149, 255, 259, 260, 32, 230,
	8, 31, 31, 31, 294, 308, 229, 278, 314, 300,
	158, 158, 158, 320, 263, 410, 263, 407, 9, 321,
	228, 284, 400, 284, 397, 327, 284, 351, 328, 209,
	149, 325, 326, 15, 284, 283, 16, 17, 223, 279,
	315, 149, 18, 248, 19, 263, 266, 330, 289, 292,
	293, 291, 290, 199, 339, 284, 229, 308, 340, 317,
	349, 263, 264, 32, 357, 82, 83, 84, 85, 86,
	91, 92, 93, 104, 147, 360, 304, 32, 252, 223,
	216, 338, 414, 385, 376, 373, 366, 363, 159, 362,
	358, 352, 348, 368, 374, 331, 378, 381, 377, 262,
	383, 189, 133, 137, 387, 382, 136, 391, 392, 386,
	135, 131, 130, 365, 396, 393, 394, 68, 70, 69,
	32, 230, 353, 399, 32, 120, 269, 32, 20, 1,
	375, 311, 409, 22, 309, 213, 149, 32, 120, 213,
	149, 4, 419, 420, 381, 2, 14, 421, 13, 145,
	144, 12, 11, 213, 149, 425, 261, 10, 251, 107,
	253, 305, 213, 149, 306, 207, 201, 138, 78, 422,
	379, 318, 434, 354, 195, 435, 288, 113, 114, 115,
	116, 430, 234, 87, 88, 89, 90, 82, 83, 84,
	85, 86, 91, 92, 93, 104, 271, 436, 40, 81,
	388, 254, 24, 404, 103, 96, 148, 149, 405, 406,
	95, 94, 221, 98, 97, 102, 99, 246, 112, 111,
	110, 117, 118, 105, 100, 101, 109, 108, 113, 114,
	115, 116, 334, 333, 87, 88, 89, 90, 82, 83,
	84, 85, 86, 91, 92, 93, 104, 98, 97, 102,
	99, 369, 112, 111, 110, 117, 118, 105, 100, 101,
	109, 108, 113, 114, 115, 116, 401, 53, 87, 88,
	89, 90, 82, 83, 84, 85, 86, 91, 92, 93,
	104, 241, 126, 56, 55, 6, 3, 0, 0, 402,
	0, 0, 0, 0, 0, 0, 98, 97, 102, 99,
	0, 112, 111, 110, 117, 118, 105, 100, 101, 109,
	108, 113, 114, 115, 116, 433, 0, 87, 88, 89,
	90, 82, 83, 84, 85, 86, 91, 92, 93, 104,
	98, 97, 102, 99, 0, 112, 111, 110, 117, 118,
	105, 100, 101, 109, 108, 113, 114, 115, 116, 415,
	0, 87, 88, 89, 90, 82, 83, 84, 85, 86,
	91, 92, 93, 104, 87, 88, 89, 90, 82, 83,
	84, 85, 86, 91, 92, 93, 104, 0, 98, 97,
	102, 99, 0, 112, 111, 110, 117, 118, 105, 100,
	101, 109, 108, 113, 114, 115, 116, 413, 0, 87,
	88, 89, 90, 82, 83, 84, 85, 86, 91, 92,
	93, 104, 98, 97, 102, 99, 0, 112, 111, 110,
	117, 118, 105, 100, 101, 109, 108, 113, 114, 115,
	116, 412, 0, 87, 88, 89, 90, 82, 83, 84,
	85, 86, 91, 92, 93, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 97, 102, 99, 0, 112, 111, 110, 117, 118,
	105, 100, 101, 109, 108, 113, 114, 115, 116, 411,
	0, 87, 88, 89, 90, 82, 83, 84, 85, 86,
	91, 92, 93, 104, 98, 97, 102, 99, 0, 112,
	111, 110, 117, 118, 105, 100, 101, 109, 108, 113,
	114, 115, 116, 408, 0, 87, 88, 89, 90, 82,
	83, 84, 85, 86, 91, 92, 93, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 97, 102, 99, 0, 112, 111, 110,
	117, 118, 105, 100, 101, 109, 108, 113, 114, 115,
	116, 384, 0, 87, 88, 89, 90, 82, 83, 84,
	85, 86, 91, 92, 93, 104, 98, 97, 102, 99,
	0, 112, 111, 110, 117, 118, 105, 100, 101, 109,
	108, 113, 114, 115, 116, 332, 0, 87, 88, 89,
	90, 82, 83, 84, 85, 86, 91, 92, 93, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 97, 102, 99, 0, 112,
	111, 110, 117, 118, 105, 100, 101, 109, 108, 113,
	114, 115, 116, 287, 0, 87, 88, 89, 90, 82,
	83, 84, 85, 86, 91, 92, 93, 104, 98, 97,
	102, 99, 0, 112, 111, 110, 117, 118, 105, 100,
	101, 109, 108, 113, 114, 115, 116, 250, 0, 87,
	88, 89, 90, 82, 83, 84, 85, 86, 91, 92,
	93, 104, 0, 0, 98, 97, 102, 99, 0, 112,
	111, 110, 117, 118, 105, 100, 101, 109, 108, 113,
	114, 115, 116, 249, 0, 87, 88, 89, 90, 82,
	83, 84, 85, 86, 91, 92, 93, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 97, 102, 99, 0, 112, 111, 110, 117,
	118, 105, 100, 101, 109, 108, 113, 114, 115, 116,
	245, 0, 87, 88, 89, 90, 82, 83, 84, 85,
	86, 91, 92, 93, 104, 0, 0, 98, 97, 102,
	99, 0, 112, 111, 110, 117, 118, 105, 100, 101,
	109, 108, 113, 114, 115, 116, 237, 0, 87, 88,
	89, 90, 82, 83, 84, 85, 86, 91, 92, 93,
	104, 0, 0, 0, 98, 97, 102, 99, 0, 112,
	111, 110, 117, 118, 105, 100, 101, 109, 108, 113,
	114, 115, 116, 198, 0, 87, 88, 89, 90, 82,
	83, 84, 85, 86, 91, 92, 93, 104, 0, 59,
	68, 70, 69, 60, 0, 61, 62, 63, 0, 367,
	0, 0, 98, 97, 102, 99, 0, 112, 111, 110,
	117, 118, 105, 100, 101, 109, 108, 113, 114, 115,
	116, 0, 0, 87, 88, 89, 90, 82, 83, 84,
	85, 86, 91, 92, 93, 104, 98, 97, 102, 99,
	0, 112, 111, 110, 117, 118, 105, 100, 101, 109,
	108, 113, 114, 115, 116, 0, 0, 87, 88, 89,
	90, 82, 83, 84, 85, 86, 91, 92, 93, 104,
	98, 97, 102, 99, 0, 112, 111, 110, 117, 118,
	105, 100, 101, 109, 108, 113, 114, 115, 116, 370,
	371, 87, 88, 89, 90, 82, 83, 84, 85, 86,
	91, 92, 93, 104, 97, 102, 99, 0, 112, 111,
	110, 117, 118, 105, 100, 101, 109, 108, 113, 114,
	115, 116, 0, 0, 87, 88, 89, 90, 82, 83,
	84, 85, 86, 91, 92, 93, 104, 102, 99, 0,
	112, 111, 110, 117, 118, 105, 100, 101, 109, 108,
	113, 114, 115, 116, 0, 0, 87, 88, 89, 90,
	82, 83, 84, 85, 86, 91, 92, 93, 104, 32,
	59, 68, 70, 69, 60, 0, 61, 62, 63, 0,
	51, 0, 238, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 50, 0, 0, 0, 0, 8, 32, 59,
	68, 70, 69, 60, 0, 61, 62, 63, 0, 51,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 54,
	0, 50, 0, 32, 59, 68, 70, 69, 60, 0,
	61, 62, 63, 0, 51, 0, 0, 0, 0, 0,
	0, 0, 64, 0, 54, 0, 50, 65, 0, 0,
	0, 66, 0, 67, 32, 59, 68, 70, 69, 60,
	0, 61, 62, 63, 0, 51, 0, 64, 0, 0,
	48, 47, 0, 0, 0, 54, 65, 50, 178, 49,
	66, 0, 67, 32, 59, 68, 70, 69, 60, 0,
	61, 62, 63, 0, 51, 0, 0, 0, 64, 48,
	47, 65, 0, 0, 54, 66, 50, 67, 49, 0,
	0, 8, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 48, 47, 42, 64, 0, 0,
	0, 0, 65, 49, 0, 0, 66, 0, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 48, 47, 0, 0, 0,
	0, 65, 0, 0, 49, 66, 0, 67, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 48, 47, 0, 0, 113, 114,
	115, 116, 0, 49, 87, 88, 89, 90, 82, 83,
	84, 85, 86, 91, 92, 93, 104,
}

var yyPact = [...]int16{
	228, -1000, -1000, 209, 199, -1000, -1000, -1000, 106, 88,
	-1000, -1000, -1000, -1000, -1000, 51, 176, 383, 81, 81,
	-1000, -1000, -1000, -6, 1339, -1000, -1000, 383, 383, 383,
	37, -1000, -1000, 57, -1000, -1000, -1000, -1000, 45, -1000,
	188, -1000, -1000, 393, 216, -1000, -1000, 1370, 1370, 1370,
	1370, 1399, -1000, -1000, 357, -1000, -1000, 356, -1000, -1000,
	-1000, -1000, -1000, -1000, 347, 96, 355, 351, -1000, -1000,
	-1000, 348, 136, 168, 319, 383, 81, 383, 168, 1339,
	333, -1000, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
	1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1314,
	-1000, -1000, 103, 1370, 383, 346, -1000, 380, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 34, -1000, 202, -1000, -1000, 184, 1110, 1076, 296,
	1370, 1, -1000, 178, 347, 1370, 1370, 383, 47, 43,
	383, -1000, 1370, 168, 324, -1000, -1000, 383, -41, -1000,
	4, -1000, 175, 147, -1000, 323, 0, -5, 254, 201,
	-79, -79, -68, -68, -68, 220, 220, 220, 220, -78,
	-78, -78, 1413, 523, 342, 1175, 1143, 1413, 1370, -1000,
	346, -1000, -1000, -1000, -1000, -1000, 1042, -1000, -1000, 1285,
	-1000, -1000, -1000, -1000, 383, 185, -1000, 1370, -1000, -1000,
	994, 1370, 286, -1000, -1000, 957, 921, 322, -1000, 203,
	344, -1000, 305, -1000, 1110, -1000, 383, 289, 1370, 381,
	381, 131, 144, 333, 333, 333, -1000, -1000, 376, -1000,
	-1000, 250, 282, 52, 1370, 1413, -1000, 1370, -1000, 278,
	1110, 180, -1000, 1370, 874, 288, 247, 299, 91, 1370,
	1370, 235, 117, 320, 55, -1000, -1000, -1000, -1000, -1000,
	-1000, 42, 1370, 383, -1000, -1000, -55, 1110, 303, -1000,
	303, 121, 1370, 1370, -1000, -22, -22, -1000, 254, -1000,
	-1000, 1413, 1413, -1000, 1370, -1000, 1110, 1370, 226, -1000,
	-1000, -1000, -1000, -1000, 91, -1000, 340, 838, 476, -1000,
	-1000, -1000, 105, 383, 55, -1000, 55, -1000, 112, -1000,
	337, -18, -1000, 31, 270, -1000, 336, 377, 119, 137,
	1110, 299, -1000, 1370, 335, -1000, -1000, 1110, 1110, -1000,
	-1000, 169, -1000, -1000, 1370, 74, 334, 332, -1000, -1000,
	-1000, 72, 360, -1000, 331, 1104, 64, 330, 1370, -1000,
	329, -1000, 1370, -1000, -1000, 1370, 1370, 1110, 383, 1370,
	804, 328, 383, 1370, 158, -1000, 1370, 1370, -1000, -1000,
	371, 371, 191, 1370, 267, 10, 383, 265, 510, 221,
	-1000, 427, 260, 756, -1000, 383, 258, 722, -1000, -1000,
	-1000, 674, 640, -1000, -1000, 327, 592, -1000, 36, 232,
	-1000, 1370, 1370, 1370, 113, -1000, -1000, -1000, -1000, 213,
	-1000, -1000, -1000, -1000, 1370, 70, -1000, 33, 168, 1110,
	1110, -1000, -1000, 120, -1000, 558, -1000, -1000, -1000, 319,
	-1000, -1000, -1000, 70, 168, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 223, 546, 23, 545, 0, 7, 544, 543, 542,
	541, 527, 511, 5, 477, 472, 471, 470, 465, 464,
	463, 462, 461, 460, 78, 36, 459, 40, 13, 17,
	10, 37, 54, 458, 46, 22, 456, 12, 436, 18,
	434, 433, 431, 430, 3, 429, 27, 428, 15, 26,
	14, 6, 427, 41, 20, 426, 1, 425, 16, 11,
	424, 421, 4, 9, 420, 418, 417, 416, 412, 411,
	19, 2, 410, 409, 408, 406, 21, 225, 405, 401,
	394, 391, 8, 390, 389, 388,
}

var yyR1 = [...]int8{
	0, 84, 78, 78, 2, 2, 79, 79, 1, 1,
	1, 1, 1, 85, 85, 3, 21, 21, 21, 33,
	33, 32, 32, 32, 26, 26, 26, 27, 27, 47,
	47, 46, 46, 48, 48, 48, 48, 28, 28, 28,
	29, 29, 49, 49, 50, 50, 50, 35, 35, 15,
	15, 36, 36, 42, 42, 43, 43, 44, 20, 20,
	20, 45, 45, 45, 41, 41, 41, 41, 34, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 6,
	6, 6, 6, 6, 6, 25, 51, 51, 16, 16,
	16, 16, 16, 16, 16, 16, 17, 17, 17, 17,
	18, 18, 19, 19, 38, 38, 38, 38, 38, 54,
	54, 54, 53, 11, 11, 7, 7, 7, 8, 8,
	55, 55, 13, 13, 14, 14, 37, 37, 9, 9,
	39, 40, 40, 10, 10, 4, 57, 57, 58, 22,
	22, 22, 22, 22, 22, 61, 61, 60, 60, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 30, 30,
	23, 23, 23, 12, 12, 62, 62, 62, 56, 56,
	56, 65, 65, 64, 64, 63, 63, 63, 66, 66,
	52, 52, 67, 67, 80, 80, 81, 81, 82, 82,
	83, 83, 68, 69, 71, 71, 72, 72, 73, 70,
	74, 75, 76, 76, 77, 77, 24, 24, 24, 31,
}

var yyR2 = [...]int8{
	0, 1, 2, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 0, 1, 9, 0, 1, 1, 1,
	3, 1, 2, 3, 0, 1, 2, 1, 1, 2,
	2, 1, 3, 2, 4, 3, 3, 0, 1, 2,
	1, 1, 4, 4, 0, 2, 4, 0, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 3, 0, 1,
	1, 0, 2, 2, 0, 2, 4, 4, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 4, 2, 2, 3, 5, 5,
	3, 3, 3, 4, 1, 1, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 3, 3, 2, 3, 6, 6, 8, 6, 5,
	0, 1, 1, 3, 0, 1, 0, 5, 0, 1,
	4, 1, 2, 0, 2, 7, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 2, 4,
	3, 2, 5, 5, 3, 3, 8, 6, 0, 2,
	0, 1, 1, 2, 2, 1, 1, 1, 0, 1,
	1, 0, 1, 2, 3, 6, 5, 5, 7, 5,
	0, 3, 3, 5, 0, 1, 1, 2, 5, 8,
	0, 4, 4, 5, 1, 1, 1, 3, 7, 3,
	6, 6, 1, 3, 1, 3, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -84, -78, -2, -79, -3, -4, -1, 32, 50,
	-66, -68, -69, -74, -75, 65, 68, 69, 74, 76,
	-85, 19, -85, 19, -21, 46, 47, 51, 66, 33,
	-34, -31, 4, -77, -24, 65, 69, 68, -77, -1,
	-33, -32, 107, -5, -34, -6, -25, 106, 105, 114,
	27, 15, -53, -11, 25, -7, -8, -31, -62, 5,
	9, 11, 12, 13, 48, 82, 86, 88, 6, 8,
	7, -34, -34, -34, 70, 78, 16, 78, -47, 16,
	33, -26, 105, 106, 107, 108, 109, 101, 102, 103,
	104, 110, 111, 112, -16, -17, -18, 81, 80, 83,
	91, 92, 82, -19, 113, 90, -27, 26, 94, 93,
	87, 86, 85, 95, 96, 97, 98, 88, 89, -31,
	5, 18, -5, -34, -5, -5, -9, -5, -5, -3,
	15, 15, -53, 15, 48, 15, 15, 15, -52, 59,
	15, -35, 34, -71, -72, -73, -70, 15, -25, -31,
	-34, -24, -34, -35, -32, -46, -49, -48, -34, 15,
	-5, -5, -5, -5, -5, -5, -5, -5, -5, -5,
	-5, -5, -5, -5, -5, -5, -5, -5, 84, 13,
	90, 87, 86, 85, 88, 89, -5, -31, -54, 15,
	-53, -27, 107, -25, 18, -40, -39, 28, 17, 17,
	-5, -55, 107, 46, -53, -5, -5, -57, -58, -25,
	67, 67, -51, -25, -5, -35, 16, -51, 94, 75,
	33, -15, 35, 16, 77, 77, -28, -29, 26, -31,
	5, -3, -46, -49, 100, -5, -54, 14, 17, -13,
	-5, -10, -39, 30, -5, 26, -14, -13, 17, 16,
	16, -65, 16, -64, -22, 52, 21, 23, 24, 53,
	54, -67, 15, 16, 17, -70, 17, -5, -76, 5,
	-76, -36, 37, 36, -48, -48, -48, -29, 17, 17,
	17, -5, -5, 17, 16, 31, -5, 29, -38, 20,
	24, 23, 21, 22, 17, -37, 49, -5, -5, 17,
	-58, -63, -30, 64, 16, -61, -60, -59, -30, -80,
	16, -81, -82, 78, -13, -25, 94, 16, -42, 40,
	-5, -13, -50, 78, 79, -50, -28, -5, -5, 17,
	-37, 15, 17, 17, 16, 55, 57, 58, -31, -63,
	-59, 55, 82, 57, 58, 59, 60, 26, 15, -82,
	71, 17, 15, 5, -41, 38, 36, -5, 15, 34,
	-5, 56, 15, 15, 56, 13, 15, 15, -6, -12,
	105, 106, 61, 15, -13, -83, 15, -13, -5, -43,
	-44, -5, -51, -5, 17, 15, -51, -5, -23, 41,
	42, -5, -5, -62, -62, 26, -5, 17, 72, -51,
	17, 16, 39, 16, -20, 41, 42, 17, 17, -51,
	17, 17, 17, 17, 15, 17, 73, 69, 17, -5,
	-5, -44, -45, 43, 17, -5, -56, 62, 63, 70,
	-35, 44, 45, 17, -71, -56, -35,
}

var yyDef = [...]int16{
	0, -2, 1, 13, 13, 4, 5, 6, 16, 0,
	8, 9, 10, 11, 12, 0, 0, 0, 0, 0,
	2, 14, 3, 14, 0, 17, 18, 0, 0, 0,
	0, 68, 239, 0, 234, 236, 237, 238, 0, 7,
	0, 19, 21, 24, 0, 69, 70, 0, 0, 0,
	158, 0, 104, 105, 0, 107, 108, -2, 109, 110,
	111, 112, 113, 114, 0, 0, 0, 0, 195, 196,
	197, 0, 210, 47, 0, 0, 0, 0, 47, 0,
	0, 22, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 96, 0, 0, 0, 0, 25, 0, 118, 119,
	120, 122, 124, 126, 127, 128, 129, 130, 132, 27,
	28, 0, 88, 0, 89, 90, 0, 159, 0, 0,
	0, 150, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 47, 224, 225, 226, 0, 0, 115,
	0, 235, 0, 49, 20, 29, 30, 31, 37, 0,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 91, 92, 93, 0, 97,
	0, 121, 123, 125, 131, 133, 0, 100, 102, 0,
	140, 26, 23, 71, 0, 163, 161, 0, 101, 142,
	0, 154, 0, 151, 144, 0, 0, 201, 166, 0,
	0, 209, 0, 116, 48, 223, 0, 0, 0, 0,
	0, 51, 0, 0, 0, 0, 33, 38, 0, 40,
	41, 0, 0, 0, 0, 94, 103, 0, 139, 0,
	152, 0, 162, 0, 0, 0, 0, 155, 156, 0,
	0, 0, 188, 202, -2, 169, 170, 171, 172, 173,
	174, 214, 0, 0, 211, 227, 0, 229, 230, 232,
	231, 53, 0, 0, 32, 44, 44, 39, 37, 35,
	36, 87, 98, 141, 0, 99, 164, 0, 0, 134,
	135, 136, 137, 138, 156, 149, 0, 0, 0, 165,
	167, 203, 0, 0, 188, 168, -2, 177, 0, 208,
	0, 215, 216, 0, 0, 117, 0, 0, 64, 0,
	52, 50, 43, 0, 0, 42, 34, 153, 160, 106,
	148, 0, 145, 146, 0, 0, 0, 0, 189, 204,
	178, 0, 0, 181, 0, 0, 0, 0, 0, 217,
	220, 212, 0, 233, 15, 0, 0, 45, 0, 0,
	0, 0, 0, 0, 190, 180, 0, 0, 184, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 65, 54,
	55, 58, 0, 0, 147, 0, 0, 0, 179, 191,
	192, 0, 0, 193, 194, 0, 0, 213, 0, 0,
	228, 0, 0, 0, 61, 59, 60, 46, 157, 0,
	206, 207, 182, 183, 0, 198, 218, 0, 47, 66,
	67, 56, 57, 0, 205, 0, 187, 199, 200, 0,
	221, 62, 63, 198, 47, 186, 219,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 109, 101, 3,
	15, 17, 107, 105, 16, 106, 18, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 19,
	95, 94, 96, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 114,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 20, 21, 22, 23, 24, 25, 26,
	27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
	87, 88, 89, 90, 91, 92, 93, 97, 98, 99,
	100, 103, 104, 110, 111, 112, 113, 115,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).ast = &AST{Statements: yyDollar[1].stmts}
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.stmts = []Statement{yyDollar[1].statement}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.stmts = yyDollar[1].stmts
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.statement = yyDollar[1].selectStmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.statement = yyDollar[1].createTableStmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.stmts = []Statement{yyDollar[1].statement}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[3].statement)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).statementIdx++
			yyVAL.statement = yyDollar[1].insertStmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).statementIdx++
			yyVAL.statement = yyDollar[1].deleteStmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).statementIdx++
			yyVAL.statement = yyDollar[1].updateStmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).statementIdx++
			yyVAL.statement = yyDollar[1].grant
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).statementIdx++
			yyVAL.statement = yyDollar[1].revoke
		}
	case 13:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
		}
	case 15:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.selectStmt = &Select{
				Distinct:         yyDollar[2].string,
				SelectColumnList: yyDollar[3].SelectColumnList,
				From:             yyDollar[4].tableExprList,
				Where:            yyDollar[5].where,
				GroupBy:          GroupBy(yyDollar[6].exprs),
				Having:           yyDollar[7].where,
				OrderBy:          yyDollar[8].orderBy,
				Limit:            yyDollar[9].limit,
			}
		}
	case 16:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = ""
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = DistinctStr
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = AllStr
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.SelectColumnList = SelectColumnList{yyDollar[1].SelectColumn}
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.SelectColumnList = append(yyDollar[1].SelectColumnList, yyDollar[3].SelectColumn)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.SelectColumn = &StarSelectColumn{}
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.SelectColumn = &AliasedSelectColumn{Expr: yyDollar[1].expr, As: yyDollar[2].identifier}
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.SelectColumn = &StarSelectColumn{TableRef: yyDollar[1].table}
		}
	case 24:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.identifier = Identifier("")
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = yyDollar[1].identifier
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.identifier = yyDollar[2].identifier
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = yyDollar[1].identifier
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = Identifier(string(yyDollar[1].bytes[1 : len(yyDollar[1].bytes)-1]))
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tableExprList = yyDollar[2].tableExprList
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tableExprList = TableExprList{yyDollar[2].joinTableExpr}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tableExprList = TableExprList{yyDollar[1].tableExpr}
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tableExprList = append(yyVAL.tableExprList, yyDollar[3].tableExpr)
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].table, As: yyDollar[2].identifier}
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: &Subquery{Select: yyDollar[2].selectStmt}, As: yyDollar[4].identifier}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tableExpr = &ParenTableExpr{TableExprList: yyDollar[2].tableExprList}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tableExpr = yyDollar[2].joinTableExpr
		}
	case 37:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.identifier = Identifier("")
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = yyDollar[1].identifier
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.identifier = yyDollar[2].identifier
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = yyDollar[1].identifier
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = Identifier(string(yyDollar[1].bytes[1 : len(yyDollar[1].bytes)-1]))
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			if yyDollar[4].joinTableExpr == nil {
				yyVAL.joinTableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, JoinOperator: JoinStr, RightExpr: yyDollar[3].tableExpr}
			} else {
				yyDollar[4].joinTableExpr.LeftExpr = yyDollar[1].tableExpr
				yyDollar[4].joinTableExpr.JoinOperator = JoinStr
				yyDollar[4].joinTableExpr.RightExpr = yyDollar[3].tableExpr
				yyVAL.joinTableExpr = yyDollar[4].joinTableExpr
			}
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			if yyDollar[4].joinTableExpr == nil {
				yyVAL.joinTableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].joinTableExpr, JoinOperator: JoinStr, RightExpr: yyDollar[3].tableExpr}
			} else {
				yyDollar[4].joinTableExpr.LeftExpr = yyDollar[1].joinTableExpr
				yyDollar[4].joinTableExpr.JoinOperator = JoinStr
				yyDollar[4].joinTableExpr.RightExpr = yyDollar[3].tableExpr
				yyVAL.joinTableExpr = yyDollar[4].joinTableExpr
			}
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.joinTableExpr = nil
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.joinTableExpr = &JoinTableExpr{On: yyDollar[2].expr}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.joinTableExpr = &JoinTableExpr{Using: yyDollar[3].columnList}
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.where = nil
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.where = NewWhere(WhereStr, yyDollar[2].expr)
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exprs = nil
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.where = nil
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.where = NewWhere(HavingStr, yyDollar[2].expr)
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.orderBy = nil
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].orderingTerm}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].orderingTerm)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.orderingTerm = &OrderingTerm{Expr: yyDollar[1].expr, Direction: yyDollar[2].string, Nulls: yyDollar[3].nulls}
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = AscStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = AscStr
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = DescStr
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.nulls = NullsNil
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.nulls = NullsFirst
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.nulls = NullsLast
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.limit = nil
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.limit = &Limit{Limit: yyDollar[2].expr}
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Limit: yyDollar[4].expr}
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Limit: yyDollar[2].expr}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.table = &Table{Name: yyDollar[1].identifier}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].column
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyDollar[3].column.TableRef = yyDollar[1].table
			yyVAL.expr = yyDollar[3].column
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ConcatStr, Right: yyDollar[3].expr}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr, Escape: yyDollar[5].expr}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			if value, ok := yyDollar[2].expr.(*Value); ok && value.Type == IntValue {
				yyVAL.expr = &Value{Type: IntValue, Value: append([]byte("-"), value.Value...)}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &IsExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.expr = &IsExpr{Left: yyDollar[1].expr, Right: &NotExpr{Expr: yyDollar[4].expr}}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &IsNullExpr{Expr: yyDollar[1].expr}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &NotNullExpr{Expr: yyDollar[1].expr}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &NotNullExpr{Expr: yyDollar[1].expr}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.expr = &BetweenExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, CollationName: yyDollar[3].identifier}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 106:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].value
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			str := yyDollar[1].bytes[1 : len(yyDollar[1].bytes)-1]
			if len(str) > MaxTextLength {
				yylex.(*Lexer).AddError(&ErrTextTooLong{Length: len(str), MaxAllowed: MaxTextLength})
			}
			yyVAL.expr = &Value{Type: StrValue, Value: str}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if len(yyDollar[1].bytes) > MaxBlobLength {
				yylex.(*Lexer).AddError(&ErrBlobTooBig{Length: len(yyDollar[1].bytes), MaxAllowed: MaxBlobLength})
			}
			yyVAL.expr = &Value{Type: BlobValue, Value: yyDollar[1].bytes}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = BoolValue(true)
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = BoolValue(false)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &NullValue{}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.column = &Column{Name: Identifier(string(yyDollar[1].identifier))}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnList = ColumnList{yyDollar[1].column}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnList = append(yyDollar[1].columnList, yyDollar[3].column)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = EqualStr
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = NotEqualStr
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = RegexpStr
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotRegexpStr
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = GlobStr
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotGlobStr
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = MatchStr
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotMatchStr
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = LessThanStr
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = GreaterThanStr
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = LessEqualStr
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = GreaterEqualStr
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = LikeStr
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotLikeStr
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = BetweenStr
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotBetweenStr
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = NoneStr
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = TextStr
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = RealStr
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = IntegerStr
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = NumericStr
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.colTuple = Exprs{}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.colTuple = yyDollar[2].exprs
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.subquery = &Subquery{Select: yyDollar[2].selectStmt}
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &NotExpr{Expr: &ExistsExpr{Subquery: yyDollar[3].subquery}}
		}
	case 145:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.expr = &FuncExpr{Name: Identifier("glob"), Args: Exprs{yyDollar[3].expr, yyDollar[5].expr}}
		}
	case 146:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.expr = &FuncExpr{Name: Identifier("like"), Args: Exprs{yyDollar[3].expr, yyDollar[5].expr}}
		}
	case 147:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.expr = &FuncExpr{Name: Identifier("like"), Args: Exprs{yyDollar[3].expr, yyDollar[5].expr, yyDollar[7].expr}}
		}
	case 148:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			lowered := strings.ToLower(string(yyDollar[1].identifier))
			if _, ok := AllowedFunctions[lowered]; !ok {
				yylex.(*Lexer).AddError(&ErrNoSuchFunction{FunctionName: string(yyDollar[1].identifier)})
			}
			yyVAL.expr = &FuncExpr{Name: Identifier(lowered), Distinct: yyDollar[3].bool, Args: yyDollar[4].exprs, Filter: yyDollar[6].where}
		}
	case 149:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			lowered := strings.ToLower(string(yyDollar[1].identifier))
			if _, ok := AllowedFunctions[lowered]; !ok {
				yylex.(*Lexer).AddError(&ErrNoSuchFunction{FunctionName: string(yyDollar[1].identifier)})
			}
			yyVAL.expr = &FuncExpr{Name: Identifier(lowered), Distinct: false, Args: nil, Filter: yyDollar[5].where}
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.bool = false
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.bool = true
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exprs = nil
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.where = nil
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.where = &Where{Type: WhereStr, Expr: yyDollar[4].expr}
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.expr = nil
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.when = &When{Condition: yyDollar[2].expr, Value: yyDollar[4].expr}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.expr = nil
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 165:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			if len(yyDollar[5].columnDefList) > MaxAllowedColumns {
				yylex.(*Lexer).AddError(&ErrTooManyColumns{ColumnCount: len(yyDollar[5].columnDefList), MaxAllowed: MaxAllowedColumns})
			}
			yyVAL.createTableStmt = &CreateTable{Table: yyDollar[3].table, Columns: yyDollar[5].columnDefList, Constraints: yyDollar[6].tableConstraints}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnDefList = []*ColumnDef{yyDollar[1].columnDef}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnDefList = append(yyDollar[1].columnDefList, yyDollar[3].columnDef)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnDef = &ColumnDef{Name: yyDollar[1].column, Type: yyDollar[2].string, Constraints: yyDollar[3].columnConstraints}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeIntStr
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeIntegerStr
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeRealStr
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeTextStr
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeBlobStr
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeAnyStr
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.columnConstraints = []ColumnConstraint{}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnConstraints = yyDollar[1].columnConstraints
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if _, ok := yyDollar[1].columnConstraint.(*ColumnConstraintPrimaryKey); ok {
				if yylex.(*Lexer).createStmtHasPrimaryKey {
					yylex.(*Lexer).AddError(&ErrMultiplePrimaryKey{})
				} else {
					yylex.(*Lexer).createStmtHasPrimaryKey = true
				}
			}
			yyVAL.columnConstraints = []ColumnConstraint{yyDollar[1].columnConstraint}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			if _, ok := yyDollar[2].columnConstraint.(*ColumnConstraintPrimaryKey); ok && yylex.(*Lexer).createStmtHasPrimaryKey {
				yylex.(*Lexer).AddError(&ErrMultiplePrimaryKey{})
			}
			yyVAL.columnConstraints = append(yyDollar[1].columnConstraints, yyDollar[2].columnConstraint)
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintPrimaryKey{Name: yyDollar[1].identifier, Order: yyDollar[4].string}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintNotNull{Name: yyDollar[1].identifier}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintUnique{Name: yyDollar[1].identifier}
		}
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintCheck{Name: yyDollar[1].identifier, Expr: yyDollar[4].expr}
		}
	case 183:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintDefault{Name: yyDollar[1].identifier, Expr: yyDollar[4].expr, Parenthesis: true}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintDefault{Name: yyDollar[1].identifier, Expr: yyDollar[3].expr}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintDefault{Name: yyDollar[1].identifier, Expr: yyDollar[3].expr}
		}
	case 186:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintGenerated{Name: yyDollar[1].identifier, Expr: yyDollar[6].expr, GeneratedAlways: true, IsStored: yyDollar[8].bool}
		}
	case 187:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintGenerated{Name: yyDollar[1].identifier, Expr: yyDollar[4].expr, GeneratedAlways: false, IsStored: yyDollar[6].bool}
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.identifier = Identifier("")
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.identifier = yyDollar[2].identifier
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = ColumnConstraintPrimaryKeyOrderEmpty
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = ColumnConstraintPrimaryKeyOrderAsc
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = ColumnConstraintPrimaryKeyOrderDesc
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = yyDollar[2].value
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyDollar[2].value.Value = append([]byte("-"), yyDollar[2].value.Value...)
			yyVAL.expr = yyDollar[2].value
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Value{Type: IntValue, Value: yyDollar[1].bytes}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Value{Type: FloatValue, Value: yyDollar[1].bytes}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Value{Type: HexNumValue, Value: yyDollar[1].bytes}
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.bool = false
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.bool = true
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.bool = false
		}
	case 201:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.tableConstraints = []TableConstraint{}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tableConstraints = yyDollar[1].tableConstraints
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			if _, ok := yyDollar[2].tableConstraint.(*TableConstraintPrimaryKey); ok {
				if yylex.(*Lexer).createStmtHasPrimaryKey {
					yylex.(*Lexer).AddError(&ErrMultiplePrimaryKey{})
				} else {
					yylex.(*Lexer).createStmtHasPrimaryKey = true
				}
			}
			yyVAL.tableConstraints = []TableConstraint{yyDollar[2].tableConstraint}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if _, ok := yyDollar[3].tableConstraint.(*TableConstraintPrimaryKey); ok && yylex.(*Lexer).createStmtHasPrimaryKey {
				yylex.(*Lexer).AddError(&ErrMultiplePrimaryKey{})
			}
			yyVAL.tableConstraints = append(yyDollar[1].tableConstraints, yyDollar[3].tableConstraint)
		}
	case 205:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.tableConstraint = &TableConstraintPrimaryKey{Name: yyDollar[1].identifier, Columns: yyDollar[5].columnList}
		}
	case 206:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.tableConstraint = &TableConstraintUnique{Name: yyDollar[1].identifier, Columns: yyDollar[4].columnList}
		}
	case 207:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.tableConstraint = &TableConstraintCheck{Name: yyDollar[1].identifier, Expr: yyDollar[4].expr}
		}
	case 208:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			for _, row := range yyDollar[6].insertRows {
				for _, expr := range row {
					if expr.ContainsSubquery() {
						yylex.(*Lexer).AddError(&ErrStatementContainsSubquery{StatementKind: "insert"})
					}
				}
			}
			yyVAL.insertStmt = &Insert{Table: yyDollar[3].table, Columns: yyDollar[4].columnList, Rows: yyDollar[6].insertRows, Upsert: yyDollar[7].upsertClause}
		}
	case 209:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.insertStmt = &Insert{Table: yyDollar[3].table, Columns: ColumnList{}, Rows: []Exprs{}, DefaultValues: true}
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.columnList = ColumnList{}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnList = yyDollar[2].columnList
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.insertRows = []Exprs{yyDollar[2].exprs}
		}
	case 213:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.insertRows = append(yyDollar[1].insertRows, yyDollar[4].exprs)
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.upsertClause = nil
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			allConflictClausesExceptLast := yyDollar[1].onConflictClauseList[0 : len(yyDollar[1].onConflictClauseList)-1]
			for _, clause := range allConflictClausesExceptLast {
				if clause.Target == nil {
					yylex.(*Lexer).AddError(&ErrUpsertMissingTarget{})
				}
			}
			yyVAL.upsertClause = yyDollar[1].onConflictClauseList
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.onConflictClauseList = []*OnConflictClause{yyDollar[1].onConflictClause}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.onConflictClauseList = append(yyDollar[1].onConflictClauseList, yyDollar[2].onConflictClause)
		}
	case 218:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.onConflictClause = &OnConflictClause{
				Target: yyDollar[3].onConflictTarget,
			}
		}
	case 219:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			if yyDollar[8].where != nil && yyDollar[8].where.Expr.ContainsSubquery() {
				yylex.(*Lexer).AddError(&ErrStatementContainsSubquery{StatementKind: "where"})
			}

			yyVAL.onConflictClause = &OnConflictClause{
				Target: yyDollar[3].onConflictTarget,
				DoUpdate: &OnConflictUpdate{
					Exprs: yyDollar[7].updateList,
					Where: yyDollar[8].where,
				},
			}
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.onConflictTarget = nil
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			if yyDollar[4].where != nil && yyDollar[4].where.Expr.ContainsSubquery() {
				yylex.(*Lexer).AddError(&ErrStatementContainsSubquery{StatementKind: "where"})
			}

			yyVAL.onConflictTarget = &OnConflictTarget{
				Columns: yyDollar[2].columnList,
				Where:   yyDollar[4].where,
			}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			if yyDollar[4].where != nil && yyDollar[4].where.Expr.ContainsSubquery() {
				yylex.(*Lexer).AddError(&ErrStatementContainsSubquery{StatementKind: "delete"})
			}
			yyVAL.deleteStmt = &Delete{Table: yyDollar[3].table, Where: yyDollar[4].where}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			if yyDollar[5].where != nil && yyDollar[5].where.Expr.ContainsSubquery() {
				yylex.(*Lexer).AddError(&ErrStatementContainsSubquery{StatementKind: "where"})
			}
			yyVAL.updateStmt = &Update{Table: yyDollar[2].table, Exprs: yyDollar[4].updateList, Where: yyDollar[5].where}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.updateList = yyDollar[1].updateList
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.updateList = yyDollar[1].updateList
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if yyDollar[1].updateExpression.Expr.ContainsSubquery() {
				yylex.(*Lexer).AddError(&ErrStatementContainsSubquery{StatementKind: "update"})
			}
			yyVAL.updateList = []*UpdateExpr{yyDollar[1].updateExpression}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.updateList = append(yyDollar[1].updateList, yyDollar[3].updateExpression)
		}
	case 228:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			if len(yyDollar[2].columnList) != len(yyDollar[6].exprs) {
				yylex.(*Lexer).AddError(&ErrUpdateColumnsAndValuesDiffer{ColumnsCount: len(yyDollar[2].columnList), ValuesCount: len(yyDollar[6].exprs)})
				yyVAL.updateList = []*UpdateExpr{}
			} else {
				exprs := make([]*UpdateExpr, len(yyDollar[2].columnList))
				for i := 0; i < len(yyDollar[2].columnList); i++ {
					exprs[i] = &UpdateExpr{Column: yyDollar[2].columnList[i], Expr: yyDollar[6].exprs[i]}
				}
				yyVAL.updateList = exprs
			}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.updateExpression = &UpdateExpr{Column: yyDollar[1].column, Expr: yyDollar[3].expr}
		}
	case 230:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.grant = &Grant{Table: yyDollar[4].table, Privileges: yyDollar[2].privileges, Roles: yyDollar[6].strings}
		}
	case 231:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.revoke = &Revoke{Table: yyDollar[4].table, Privileges: yyDollar[2].privileges, Roles: yyDollar[6].strings}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.strings = []string{string(yyDollar[1].bytes[1 : len(yyDollar[1].bytes)-1])}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.strings = append(yyDollar[1].strings, string(yyDollar[3].bytes[1:len(yyDollar[3].bytes)-1]))
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			privileges := make(map[string]struct{})
			privileges[yyDollar[1].string] = struct{}{}
			yyVAL.privileges = Privileges(privileges)
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if _, ok := yyDollar[1].privileges[yyDollar[3].string]; ok {
				yylex.(*Lexer).AddError(&ErrGrantRepeatedPrivilege{Privilege: yyDollar[3].string})
			}

			yyDollar[1].privileges[yyDollar[3].string] = struct{}{}
			yyVAL.privileges = yyDollar[1].privileges
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = "insert"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = "update"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = "delete"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			literalUpper := bytes.ToUpper(yyDollar[1].bytes)
			if _, ok := keywordsNotAllowed[string(literalUpper)]; ok {
				yylex.(*Lexer).AddError(&ErrKeywordIsNotAllowed{Keyword: string(yyDollar[1].bytes)})
			}

			yyVAL.identifier = Identifier(yyDollar[1].bytes)
		}
	}
	goto yystack /* stack new state and value */
}
