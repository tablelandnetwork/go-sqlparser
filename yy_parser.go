// Code generated by goyacc -l -o yy_parser.go grammar.y. DO NOT EDIT.
package sqlparser

import __yyfmt__ "fmt"

import (
	"bytes"
	"errors"
	"strings"
)

var keywordsNotAllowed = map[string]struct{}{
	// We don't allow non-deterministic keywords as identifiers.
	"CURRENT_TIME":      {},
	"CURRENT_DATE":      {},
	"CURRENT_TIMESTAMP": {},

	// SQLite reserved keywords that are not part of Tableland spec.
	// We can't allow them as identifiers because it will throw an error in SQLite.
	//
	// SQLite has more reserved keywords (eg. CREATE, INSERT, ...). But those are part of the Tableland grammar,
	// that means that the parser already checks from them.
	//
	// These were identified by running the `TestReservedKeywords` test.
	"REFERENCES":    {},
	"AUTOINCREMENT": {},
	"COMMIT":        {},
	"DEFERRABLE":    {},
	"FOREIGN":       {},
	"INDEX":         {},
	"RETURNING":     {},
	"TRANSACTION":   {},
}

func isRowID(column Identifier) bool {
	if strings.EqualFold(string(column), "rowid") || strings.EqualFold(string(column), "_rowid_") || strings.EqualFold(string(column), "oid") {
		return true
	}

	return false
}

type yySymType struct {
	yys                  int
	bool                 bool
	string               string
	bytes                []byte
	expr                 Expr
	exprs                Exprs
	column               *Column
	table                *Table
	convertType          ConvertType
	when                 *When
	whens                []*When
	selectColumn         SelectColumn
	selectColumnList     SelectColumnList
	readStmt             ReadStatement
	baseSelect           *Select
	where                *Where
	limit                *Limit
	orderBy              OrderBy
	orderingTerm         *OrderingTerm
	nulls                NullsType
	tableExpr            TableExpr
	joinTableExpr        *JoinTableExpr
	columnList           ColumnList
	indexedColumnList    IndexedColumnList
	indexedColumn        *IndexedColumn
	subquery             *Subquery
	colTuple             ColTuple
	statement            Statement
	identifier           Identifier
	createTableStmt      *CreateTable
	columnDefList        []*ColumnDef
	columnDef            *ColumnDef
	columnConstraint     ColumnConstraint
	columnConstraints    []ColumnConstraint
	value                *Value
	tableConstraint      TableConstraint
	tableConstraints     []TableConstraint
	insertStmt           *Insert
	insertRows           []Exprs
	deleteStmt           *Delete
	updateStmt           *Update
	updateExpression     *UpdateExpr
	updateList           []*UpdateExpr
	grant                *Grant
	revoke               *Revoke
	alterTableStmt       *AlterTable
	strings              []string
	privileges           Privileges
	stmts                []Statement
	upsertClause         Upsert
	onConflictClauseList []*OnConflictClause
	onConflictClause     *OnConflictClause
	onConflictTarget     *OnConflictTarget
	collateOpt           Identifier
	joinOperator         *JoinOperator
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGRAL = 57348
const HEXNUM = 57349
const FLOAT = 57350
const BLOBVAL = 57351
const ERROR = 57352
const TRUE = 57353
const FALSE = 57354
const NULL = 57355
const AND = 57356
const NONE = 57357
const INTEGER = 57358
const TEXT = 57359
const CAST = 57360
const AS = 57361
const CASE = 57362
const WHEN = 57363
const THEN = 57364
const ELSE = 57365
const END = 57366
const SELECT = 57367
const FROM = 57368
const WHERE = 57369
const GROUP = 57370
const BY = 57371
const HAVING = 57372
const LIMIT = 57373
const OFFSET = 57374
const ORDER = 57375
const ASC = 57376
const DESC = 57377
const NULLS = 57378
const FIRST = 57379
const LAST = 57380
const DISTINCT = 57381
const ALL = 57382
const EXISTS = 57383
const FILTER = 57384
const UNION = 57385
const EXCEPT = 57386
const INTERSECT = 57387
const CREATE = 57388
const TABLE = 57389
const INT = 57390
const BLOB = 57391
const PRIMARY = 57392
const KEY = 57393
const UNIQUE = 57394
const CHECK = 57395
const DEFAULT = 57396
const GENERATED = 57397
const ALWAYS = 57398
const STORED = 57399
const VIRTUAL = 57400
const CONSTRAINT = 57401
const INSERT = 57402
const INTO = 57403
const VALUES = 57404
const DELETE = 57405
const UPDATE = 57406
const SET = 57407
const CONFLICT = 57408
const DO = 57409
const NOTHING = 57410
const GRANT = 57411
const TO = 57412
const REVOKE = 57413
const ALTER = 57414
const RENAME = 57415
const COLUMN = 57416
const ADD = 57417
const DROP = 57418
const RIGHT = 57419
const FULL = 57420
const INNER = 57421
const LEFT = 57422
const NATURAL = 57423
const OUTER = 57424
const CROSS = 57425
const JOIN = 57426
const ON = 57427
const USING = 57428
const OR = 57429
const ANDOP = 57430
const NOT = 57431
const IS = 57432
const ISNOT = 57433
const MATCH = 57434
const GLOB = 57435
const REGEXP = 57436
const LIKE = 57437
const BETWEEN = 57438
const IN = 57439
const ISNULL = 57440
const NOTNULL = 57441
const NE = 57442
const LE = 57443
const GE = 57444
const INEQUALITY = 57445
const ESCAPE = 57446
const LSHIFT = 57447
const RSHIFT = 57448
const CONCAT = 57449
const JSON_EXTRACT_OP = 57450
const JSON_UNQUOTE_EXTRACT_OP = 57451
const COLLATE = 57452
const UNARY = 57453

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGRAL",
	"HEXNUM",
	"FLOAT",
	"BLOBVAL",
	"ERROR",
	"TRUE",
	"FALSE",
	"NULL",
	"AND",
	"'('",
	"','",
	"')'",
	"'.'",
	"';'",
	"NONE",
	"INTEGER",
	"TEXT",
	"CAST",
	"AS",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"SELECT",
	"FROM",
	"WHERE",
	"GROUP",
	"BY",
	"HAVING",
	"LIMIT",
	"OFFSET",
	"ORDER",
	"ASC",
	"DESC",
	"NULLS",
	"FIRST",
	"LAST",
	"DISTINCT",
	"ALL",
	"EXISTS",
	"FILTER",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"CREATE",
	"TABLE",
	"INT",
	"BLOB",
	"PRIMARY",
	"KEY",
	"UNIQUE",
	"CHECK",
	"DEFAULT",
	"GENERATED",
	"ALWAYS",
	"STORED",
	"VIRTUAL",
	"CONSTRAINT",
	"INSERT",
	"INTO",
	"VALUES",
	"DELETE",
	"UPDATE",
	"SET",
	"CONFLICT",
	"DO",
	"NOTHING",
	"GRANT",
	"TO",
	"REVOKE",
	"ALTER",
	"RENAME",
	"COLUMN",
	"ADD",
	"DROP",
	"RIGHT",
	"FULL",
	"INNER",
	"LEFT",
	"NATURAL",
	"OUTER",
	"CROSS",
	"JOIN",
	"ON",
	"USING",
	"OR",
	"ANDOP",
	"NOT",
	"IS",
	"ISNOT",
	"MATCH",
	"GLOB",
	"REGEXP",
	"LIKE",
	"BETWEEN",
	"IN",
	"ISNULL",
	"NOTNULL",
	"NE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"INEQUALITY",
	"ESCAPE",
	"'&'",
	"'|'",
	"LSHIFT",
	"RSHIFT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"CONCAT",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"COLLATE",
	"'~'",
	"UNARY",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 73,
	18, 84,
	-2, 131,
	-1, 190,
	82, 56,
	83, 56,
	84, 56,
	85, 56,
	-2, 36,
	-1, 191,
	82, 56,
	83, 56,
	84, 56,
	85, 56,
	-2, 37,
	-1, 264,
	1, 187,
	16, 187,
	17, 187,
	19, 187,
	-2, 200,
	-1, 329,
	1, 188,
	16, 188,
	17, 188,
	19, 188,
	-2, 200,
}

const yyPrivate = 57344

const yyLast = 1682

var yyAct = [...]int16{
	292, 473, 162, 438, 164, 74, 456, 243, 61, 358,
	278, 330, 389, 386, 291, 325, 324, 305, 271, 307,
	279, 314, 186, 167, 229, 222, 151, 5, 471, 191,
	98, 252, 129, 127, 190, 59, 62, 114, 115, 116,
	127, 41, 95, 68, 107, 108, 109, 114, 115, 116,
	127, 368, 94, 236, 99, 213, 249, 57, 50, 387,
	388, 308, 39, 428, 145, 146, 147, 149, 150, 43,
	427, 426, 393, 363, 91, 91, 55, 60, 336, 390,
	87, 88, 105, 106, 107, 108, 109, 114, 115, 116,
	127, 93, 338, 339, 340, 337, 174, 370, 175, 176,
	253, 273, 345, 59, 188, 250, 194, 195, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
	208, 209, 210, 211, 154, 452, 169, 220, 235, 451,
	37, 73, 432, 171, 366, 173, 466, 187, 89, 217,
	216, 215, 218, 219, 214, 60, 192, 308, 92, 90,
	16, 40, 326, 233, 242, 180, 226, 273, 238, 239,
	189, 172, 422, 225, 245, 40, 41, 246, 383, 40,
	40, 276, 224, 274, 272, 414, 248, 411, 256, 257,
	40, 227, 99, 48, 273, 344, 241, 240, 27, 44,
	161, 142, 46, 45, 474, 475, 359, 33, 244, 377,
	237, 379, 380, 381, 382, 244, 54, 254, 255, 156,
	277, 260, 258, 287, 29, 371, 227, 372, 373, 51,
	283, 170, 40, 285, 40, 333, 326, 276, 284, 274,
	272, 296, 170, 29, 160, 40, 192, 334, 378, 53,
	288, 96, 270, 30, 31, 32, 266, 267, 163, 299,
	313, 35, 36, 294, 276, 429, 274, 272, 224, 221,
	320, 321, 142, 17, 251, 38, 18, 19, 439, 440,
	16, 311, 20, 316, 21, 22, 170, 318, 265, 268,
	331, 350, 102, 41, 169, 323, 230, 346, 295, 317,
	347, 187, 319, 170, 193, 7, 351, 103, 8, 187,
	170, 342, 360, 361, 277, 26, 335, 230, 445, 16,
	42, 170, 341, 24, 192, 41, 282, 469, 468, 364,
	192, 362, 49, 179, 281, 40, 365, 52, 354, 356,
	355, 144, 47, 398, 384, 280, 309, 464, 309, 458,
	357, 376, 349, 454, 375, 331, 367, 309, 453, 385,
	396, 391, 392, 397, 395, 394, 75, 84, 86, 85,
	76, 343, 77, 78, 79, 322, 417, 399, 349, 450,
	349, 405, 349, 348, 309, 312, 309, 310, 300, 170,
	232, 41, 349, 369, 170, 41, 170, 170, 424, 327,
	418, 262, 168, 462, 170, 247, 193, 409, 181, 435,
	425, 16, 423, 40, 430, 416, 413, 410, 412, 40,
	408, 407, 281, 404, 437, 433, 400, 441, 442, 431,
	436, 304, 9, 434, 446, 223, 443, 444, 155, 158,
	448, 157, 153, 447, 152, 100, 17, 415, 315, 18,
	19, 170, 41, 282, 244, 20, 41, 21, 22, 244,
	84, 86, 85, 41, 143, 23, 467, 1, 374, 406,
	25, 306, 244, 472, 4, 2, 15, 14, 420, 421,
	13, 476, 457, 166, 478, 281, 477, 165, 12, 481,
	11, 303, 482, 136, 137, 138, 139, 403, 402, 110,
	111, 112, 113, 105, 106, 107, 108, 109, 114, 115,
	116, 127, 170, 169, 10, 261, 457, 263, 328, 329,
	185, 275, 234, 455, 159, 101, 41, 143, 110, 111,
	112, 113, 105, 106, 107, 108, 109, 114, 115, 116,
	127, 259, 97, 228, 353, 332, 130, 56, 470, 170,
	104, 28, 264, 34, 170, 182, 126, 119, 118, 117,
	269, 298, 419, 69, 293, 148, 72, 170, 71, 6,
	3, 0, 0, 121, 120, 125, 122, 170, 135, 134,
	133, 140, 141, 128, 123, 124, 132, 131, 136, 137,
	138, 139, 0, 0, 110, 111, 112, 113, 105, 106,
	107, 108, 109, 114, 115, 116, 127, 0, 170, 183,
	184, 170, 0, 479, 121, 120, 125, 122, 0, 135,
	134, 133, 140, 141, 128, 123, 124, 132, 131, 136,
	137, 138, 139, 177, 0, 110, 111, 112, 113, 105,
	106, 107, 108, 109, 114, 115, 116, 127, 0, 0,
	0, 0, 0, 0, 178, 0, 0, 0, 0, 0,
	0, 0, 121, 120, 125, 122, 0, 135, 134, 133,
	140, 141, 128, 123, 124, 132, 131, 136, 137, 138,
	139, 480, 0, 110, 111, 112, 113, 105, 106, 107,
	108, 109, 114, 115, 116, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	120, 125, 122, 0, 135, 134, 133, 140, 141, 128,
	123, 124, 132, 131, 136, 137, 138, 139, 465, 0,
	110, 111, 112, 113, 105, 106, 107, 108, 109, 114,
	115, 116, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 120, 125, 122,
	0, 135, 134, 133, 140, 141, 128, 123, 124, 132,
	131, 136, 137, 138, 139, 463, 0, 110, 111, 112,
	113, 105, 106, 107, 108, 109, 114, 115, 116, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 120, 125, 122, 0, 135, 134,
	133, 140, 141, 128, 123, 124, 132, 131, 136, 137,
	138, 139, 461, 0, 110, 111, 112, 113, 105, 106,
	107, 108, 109, 114, 115, 116, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 120, 125, 122, 0, 135, 134, 133, 140, 141,
	128, 123, 124, 132, 131, 136, 137, 138, 139, 460,
	0, 110, 111, 112, 113, 105, 106, 107, 108, 109,
	114, 115, 116, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 120, 125,
	122, 0, 135, 134, 133, 140, 141, 128, 123, 124,
	132, 131, 136, 137, 138, 139, 459, 0, 110, 111,
	112, 113, 105, 106, 107, 108, 109, 114, 115, 116,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 120, 125, 122, 0, 135,
	134, 133, 140, 141, 128, 123, 124, 132, 131, 136,
	137, 138, 139, 449, 0, 110, 111, 112, 113, 105,
	106, 107, 108, 109, 114, 115, 116, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 120, 125, 122, 0, 135, 134, 133, 140,
	141, 128, 123, 124, 132, 131, 136, 137, 138, 139,
	401, 0, 110, 111, 112, 113, 105, 106, 107, 108,
	109, 114, 115, 116, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 120,
	125, 122, 0, 135, 134, 133, 140, 141, 128, 123,
	124, 132, 131, 136, 137, 138, 139, 352, 0, 110,
	111, 112, 113, 105, 106, 107, 108, 109, 114, 115,
	116, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 121, 120, 125, 122, 0,
	135, 134, 133, 140, 141, 128, 123, 124, 132, 131,
	136, 137, 138, 139, 0, 0, 110, 111, 112, 113,
	105, 106, 107, 108, 109, 114, 115, 116, 127, 301,
	0, 0, 121, 120, 125, 122, 0, 135, 134, 133,
	140, 141, 128, 123, 124, 132, 131, 136, 137, 138,
	139, 0, 0, 110, 111, 112, 113, 105, 106, 107,
	108, 109, 114, 115, 116, 127, 121, 120, 125, 122,
	0, 135, 134, 133, 140, 141, 128, 123, 124, 132,
	131, 136, 137, 138, 139, 297, 0, 110, 111, 112,
	113, 105, 106, 107, 108, 109, 114, 115, 116, 127,
	0, 0, 0, 0, 0, 121, 120, 125, 122, 289,
	135, 134, 133, 140, 141, 128, 123, 124, 132, 131,
	136, 137, 138, 139, 0, 0, 110, 111, 112, 113,
	105, 106, 107, 108, 109, 114, 115, 116, 127, 0,
	0, 0, 0, 0, 0, 0, 231, 0, 0, 0,
	0, 0, 0, 121, 120, 125, 122, 0, 135, 134,
	133, 140, 141, 128, 123, 124, 132, 131, 136, 137,
	138, 139, 0, 0, 110, 111, 112, 113, 105, 106,
	107, 108, 109, 114, 115, 116, 127, 121, 120, 125,
	122, 0, 135, 134, 133, 140, 141, 128, 123, 124,
	132, 131, 136, 137, 138, 139, 0, 0, 110, 111,
	112, 113, 105, 106, 107, 108, 109, 114, 115, 116,
	127, 121, 120, 125, 122, 0, 135, 134, 133, 140,
	141, 128, 123, 124, 132, 131, 136, 137, 138, 139,
	0, 0, 110, 111, 112, 113, 105, 106, 107, 108,
	109, 114, 115, 116, 127, 121, 120, 125, 122, 0,
	135, 134, 133, 140, 141, 128, 123, 124, 132, 131,
	136, 137, 138, 139, 0, 0, 110, 111, 112, 113,
	105, 106, 107, 108, 109, 114, 115, 116, 127, 120,
	125, 122, 0, 135, 134, 133, 140, 141, 128, 123,
	124, 132, 131, 136, 137, 138, 139, 0, 0, 110,
	111, 112, 113, 105, 106, 107, 108, 109, 114, 115,
	116, 127, 125, 122, 0, 135, 134, 133, 140, 141,
	128, 123, 124, 132, 131, 136, 137, 138, 139, 0,
	0, 110, 111, 112, 113, 105, 106, 107, 108, 109,
	114, 115, 116, 127, 41, 75, 84, 86, 85, 76,
	0, 77, 78, 79, 0, 67, 0, 290, 0, 0,
	0, 0, 0, 70, 0, 66, 0, 0, 0, 0,
	16, 41, 75, 84, 86, 85, 76, 0, 77, 78,
	79, 0, 67, 0, 0, 0, 80, 0, 0, 0,
	70, 0, 66, 41, 75, 84, 86, 85, 76, 0,
	77, 78, 79, 0, 67, 0, 0, 0, 0, 0,
	0, 0, 70, 80, 66, 0, 0, 0, 0, 0,
	41, 75, 84, 86, 85, 76, 0, 77, 78, 79,
	0, 67, 0, 0, 81, 80, 0, 0, 82, 70,
	83, 66, 0, 0, 0, 0, 16, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 63, 0,
	0, 81, 80, 212, 0, 82, 65, 83, 0, 41,
	75, 84, 86, 85, 76, 0, 77, 78, 79, 0,
	67, 0, 0, 81, 64, 63, 0, 82, 70, 83,
	66, 0, 0, 65, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 64, 63, 58, 0,
	81, 80, 0, 0, 82, 65, 83, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 64, 63, 0, 0, 0, 136, 137,
	138, 139, 65, 286, 110, 111, 112, 113, 105, 106,
	107, 108, 109, 114, 115, 116, 127, 0, 0, 81,
	0, 0, 0, 82, 0, 83, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 64, 63, 0, 0, 0, 0, 0, 0,
	0, 65,
}

var yyPact = [...]int16{
	371, -1000, -1000, 294, 286, -1000, -1000, -1000, 195, 145,
	-1000, -1000, -1000, -1000, -1000, -1000, 207, 64, 234, 442,
	124, 124, 131, -1000, -1000, -1000, 198, 183, 240, 205,
	161, -1000, -1000, 442, 1479, -1000, -1000, 442, 442, 68,
	-1000, -1000, 59, -1000, -1000, -1000, -1000, 58, 442, -1000,
	-1000, 1555, 176, 1555, -1000, 420, 266, -1000, -1000, 512,
	313, -1000, -1000, 1555, 1555, 1555, 1555, 1506, -1000, -1000,
	419, -1000, -1000, 417, -1000, -1000, -1000, -1000, -1000, -1000,
	413, 163, 416, 414, -1000, -1000, -1000, 175, 216, 377,
	442, 124, 442, 18, 607, 305, 183, 382, -1000, 560,
	442, 216, 1479, 381, -1000, 1555, 1555, 1555, 1555, 1555,
	1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555,
	1555, 1555, 1457, -1000, -1000, 42, 1555, 442, 410, -1000,
	449, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 37, -1000, -1000, -1000, 281, 1243,
	1209, 363, 1555, 9, -1000, 240, 413, 1555, 1555, 120,
	87, 442, -1000, 1555, 216, 379, -1000, -1000, 442, -50,
	-1000, 30, -1000, 233, 21, 21, 21, 1555, 1555, 442,
	-1000, 1555, 170, -1000, -1000, 375, -1000, 225, 209, -1000,
	141, 141, 311, 279, -75, -75, -85, -85, -85, -35,
	-35, -35, -35, -92, -92, -92, 376, 405, 1521, 1308,
	1276, 376, 1555, -1000, 410, -1000, -1000, -1000, -1000, -1000,
	1175, -1000, -1000, 1430, -1000, -1000, -1000, -1000, 260, -1000,
	1555, -1000, -1000, 1141, 1555, 361, -1000, -1000, 1093, 1054,
	406, -29, -1000, 360, -1000, 1243, -1000, 442, 358, 1555,
	433, 433, 442, -1000, 442, 442, 1243, 1243, -1000, -1000,
	218, 348, 162, 373, 88, -1000, -1000, -1000, -1000, 190,
	203, 381, -1000, -1000, -11, 10, -1000, 381, -1000, -1000,
	438, -1000, -1000, 344, 168, 85, 1555, 376, -1000, 1555,
	-1000, 356, 1243, 252, -1000, 1555, 1020, 308, 323, 366,
	149, 1555, 1555, 57, 1555, -1000, -29, -1000, 63, 442,
	-1000, -1000, -55, 1243, 367, -1000, 367, 22, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 160, 442, 88, -1000, 88,
	-1000, 144, -1000, 1555, 1555, -31, -1000, -8, -8, -8,
	-17, -31, -1000, 311, -1000, -1000, 376, 376, -1000, 1555,
	-1000, 1243, 1555, 316, -1000, -1000, -1000, 149, -1000, 401,
	983, 471, -1000, 398, 354, -1000, 396, -1000, 395, 392,
	442, 121, 393, 391, -1000, -1000, -1000, 119, 424, -1000,
	390, 351, 101, 387, 1243, 366, -1000, 1555, 385, -18,
	-1000, -19, -26, -1000, -1000, -1000, 1243, 1243, -1000, -1000,
	223, -1000, -1000, 1555, 1555, -1000, 60, 442, 1555, -1000,
	-1000, 384, 442, 1555, 229, -1000, 1555, 1555, -1000, -1000,
	444, 444, 284, 1555, 1243, 442, -1000, -1000, -1000, 1555,
	936, 352, 56, 331, 326, 442, 322, 889, -1000, -1000,
	-1000, 842, 795, -1000, -1000, 378, 748, 320, 701, -1000,
	-1000, -1000, 66, 216, -1000, 301, -1000, -97, -1000, -1000,
	-1000, -1000, 1555, 132, -1000, -1000, 377, -1000, -1000, 442,
	229, 442, 654, -1000, -1000, -1000, 216, -1000, -1000, -1000,
	132, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 295, 560, 26, 298, 559, 0, 8, 558, 556,
	555, 554, 553, 552, 14, 551, 550, 549, 548, 547,
	546, 545, 543, 542, 3, 69, 541, 36, 540, 32,
	10, 20, 15, 131, 538, 57, 537, 42, 2, 535,
	9, 534, 24, 533, 58, 188, 532, 30, 531, 34,
	515, 29, 13, 7, 514, 513, 6, 43, 25, 512,
	1, 511, 12, 510, 22, 11, 509, 508, 5, 16,
	507, 505, 504, 481, 480, 478, 23, 4, 477, 473,
	470, 467, 466, 21, 310, 465, 464, 17, 461, 19,
	459, 18, 457, 455, 31,
}

var yyR1 = [...]int8{
	0, 92, 85, 85, 2, 2, 86, 86, 1, 1,
	1, 1, 1, 1, 93, 93, 3, 3, 26, 26,
	26, 26, 4, 22, 22, 22, 36, 36, 35, 35,
	35, 28, 28, 28, 29, 29, 50, 50, 49, 49,
	49, 49, 30, 30, 30, 31, 31, 51, 51, 91,
	91, 91, 91, 91, 91, 91, 61, 61, 62, 62,
	52, 52, 52, 38, 38, 16, 16, 39, 39, 45,
	45, 46, 46, 47, 21, 21, 21, 48, 48, 48,
	44, 44, 44, 44, 37, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 7, 7, 7, 7, 7,
	7, 27, 53, 53, 17, 17, 17, 17, 17, 17,
	17, 17, 18, 18, 18, 18, 19, 19, 20, 20,
	41, 41, 41, 58, 58, 58, 57, 12, 12, 8,
	8, 8, 9, 9, 59, 59, 14, 14, 15, 15,
	40, 40, 10, 10, 42, 43, 43, 11, 11, 5,
	63, 63, 64, 23, 23, 23, 23, 67, 67, 66,
	66, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	32, 32, 24, 24, 24, 13, 13, 68, 68, 68,
	60, 60, 60, 71, 71, 70, 70, 69, 69, 69,
	55, 55, 56, 34, 34, 72, 72, 72, 54, 54,
	73, 73, 87, 87, 88, 88, 89, 89, 90, 90,
	74, 75, 77, 77, 78, 78, 79, 76, 80, 81,
	83, 83, 84, 84, 25, 25, 25, 82, 82, 82,
	94, 94, 33,
}

var yyR2 = [...]int8{
	0, 1, 2, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 0, 1, 3, 5, 1, 2,
	1, 1, 7, 0, 1, 1, 1, 3, 1, 2,
	3, 0, 1, 2, 1, 1, 2, 2, 2, 4,
	3, 3, 0, 1, 2, 1, 1, 4, 4, 1,
	1, 2, 4, 4, 4, 3, 0, 1, 0, 1,
	0, 2, 4, 0, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 3, 0, 1, 1, 0, 2, 2,
	0, 2, 4, 4, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	4, 2, 2, 3, 5, 5, 3, 3, 3, 4,
	1, 1, 6, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 1, 1, 2, 1, 3, 3, 2, 3, 6,
	6, 8, 6, 5, 0, 1, 1, 3, 0, 1,
	0, 5, 0, 1, 4, 1, 2, 0, 2, 7,
	1, 3, 3, 1, 1, 1, 1, 0, 1, 1,
	2, 4, 3, 2, 5, 5, 3, 3, 8, 6,
	0, 2, 0, 1, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 0, 1, 2, 3, 6, 5, 5,
	1, 3, 3, 0, 2, 7, 5, 6, 0, 3,
	3, 5, 0, 1, 1, 2, 5, 8, 0, 4,
	4, 5, 1, 1, 1, 3, 7, 3, 6, 6,
	1, 3, 1, 3, 1, 1, 1, 8, 6, 6,
	0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -92, -85, -2, -86, -3, -5, -1, -4, 51,
	-72, -74, -75, -80, -81, -82, 30, 65, 68, 69,
	74, 76, 77, -93, 19, -93, 19, -45, -26, 38,
	48, 49, 50, 52, -22, 44, 45, 66, 31, -37,
	-33, 4, -84, -25, 65, 69, 68, -84, 52, -1,
	-44, 36, -4, 34, 45, -37, -36, -35, 119, -6,
	-37, -7, -27, 118, 117, 126, 25, 15, -57, -12,
	23, -8, -9, -33, -68, 5, 9, 11, 12, 13,
	46, 94, 98, 100, 6, 8, 7, -37, -37, 70,
	90, 16, 90, -37, -6, -37, -45, -46, -47, -6,
	15, -50, 16, 31, -28, 117, 118, 119, 120, 121,
	113, 114, 115, 116, 122, 123, 124, -17, -18, -19,
	93, 92, 95, 103, 104, 94, -20, 125, 102, -29,
	24, 106, 105, 99, 98, 97, 107, 108, 109, 110,
	100, 101, -33, 5, 18, -6, -6, -6, -10, -6,
	-6, -3, 15, 15, -57, 15, 46, 15, 15, -54,
	59, 15, -38, 32, -77, -78, -79, -76, 15, -27,
	-33, -37, -25, -37, 78, 80, 81, 16, 37, 18,
	-44, 16, -21, 39, 40, -63, -64, -27, -38, -35,
	-49, -51, -37, 15, -6, -6, -6, -6, -6, -6,
	-6, -6, -6, -6, -6, -6, -6, -6, -6, -6,
	-6, -6, 96, 13, 102, 99, 98, 97, 100, 101,
	-6, -33, -58, 15, -57, -29, 119, -27, -43, -42,
	26, 17, 17, -6, -59, 119, 44, -57, -6, -6,
	67, -3, 67, -53, -27, -6, -38, 16, -53, 106,
	75, 31, -94, 79, -94, -94, -6, -6, -47, -48,
	41, -71, 16, -70, -23, 53, 21, 22, 54, -16,
	33, -91, 89, 16, 88, -61, 86, -91, -30, -31,
	24, -33, 5, -3, -49, -51, 112, -6, -58, 14,
	17, -14, -6, -11, -42, 28, -6, 24, -15, -14,
	17, 16, 16, -73, 15, -87, -88, -89, 90, 16,
	17, -76, 17, -6, -83, 5, -83, -27, -64, -27,
	42, 43, 17, -64, -69, -32, 64, 16, -67, -66,
	-65, -32, -39, 35, 34, -49, 89, 85, 82, 83,
	84, -49, -31, 17, 17, 17, -6, -6, 17, 16,
	29, -6, 27, -41, 20, 22, 21, 17, -40, 47,
	-6, -6, -87, 16, -14, -89, 71, -27, 106, 16,
	75, 55, 57, 58, -33, -69, -65, 55, 94, 57,
	58, 59, 60, 24, -6, -14, -52, 90, 91, -62,
	87, -62, -62, 89, -52, -30, -6, -6, 17, -40,
	15, 17, 17, 16, 15, 17, -90, 15, 15, 5,
	-27, 56, 15, 15, 56, 13, 15, 15, -7, -13,
	117, 118, 61, 15, -6, 15, 89, 89, 89, 32,
	-6, -14, 72, -53, -14, 15, -53, -6, -24, 39,
	40, -6, -6, -68, -68, 24, -6, -53, -6, 17,
	17, 73, 69, 17, 17, -55, -56, -27, 17, 17,
	17, 17, 15, 17, 17, 17, 70, -38, 17, 16,
	-34, 125, -6, -60, 62, 63, -77, -56, -24, -33,
	17, -38, -60,
}

var yyDef = [...]int16{
	0, -2, 1, 14, 14, 4, 5, 6, 69, 0,
	8, 9, 10, 11, 12, 13, 23, 0, 0, 0,
	0, 0, 0, 2, 15, 3, 15, 80, 0, 0,
	18, 20, 21, 0, 0, 24, 25, 0, 0, 0,
	84, 262, 0, 252, 254, 255, 256, 0, 0, 7,
	16, 0, 69, 0, 19, 0, 0, 26, 28, 31,
	0, 85, 86, 0, 0, 0, 172, 0, 120, 121,
	0, 123, 124, -2, 125, 126, 127, 128, 129, 130,
	0, 0, 0, 0, 207, 208, 209, 228, 63, 0,
	0, 0, 0, 0, 81, 0, 80, 70, 71, 74,
	0, 63, 0, 0, 29, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 112, 0, 0, 0, 0, 32,
	0, 134, 135, 136, 138, 140, 142, 143, 144, 145,
	146, 148, 34, 35, 0, 104, 105, 106, 0, 173,
	0, 0, 0, 164, 157, 0, 0, 0, 0, 0,
	0, 0, 240, 0, 63, 242, 243, 244, 0, 0,
	131, 0, 253, 0, 260, 260, 260, 0, 0, 0,
	17, 0, 77, 75, 76, 213, 180, 0, 65, 27,
	-2, -2, 42, 0, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 107,
	108, 109, 0, 113, 0, 137, 139, 141, 147, 149,
	0, 116, 118, 0, 154, 33, 30, 87, 177, 175,
	0, 117, 156, 0, 168, 0, 165, 158, 0, 0,
	0, 232, 226, 0, 132, 64, 241, 0, 0, 0,
	0, 0, 0, 261, 0, 0, 82, 83, 72, 73,
	0, 0, 200, 214, -2, 183, 184, 185, 186, 67,
	0, 0, 49, 50, 0, 0, 57, 0, 38, 43,
	0, 45, 46, 0, 56, 56, 0, 110, 119, 0,
	153, 0, 166, 0, 176, 0, 0, 0, 0, 169,
	170, 0, 0, 232, 0, 227, 233, 234, 0, 0,
	229, 245, 0, 247, 248, 250, 249, 0, 258, 259,
	78, 79, 179, 181, 215, 0, 0, 200, 182, -2,
	189, 0, 22, 0, 0, 60, 51, 58, 58, 58,
	0, 60, 44, 42, 40, 41, 103, 114, 155, 0,
	115, 178, 0, 0, 150, 151, 152, 170, 163, 0,
	0, 0, 225, 0, 0, 235, 238, 133, 0, 0,
	0, 0, 0, 0, 201, 216, 190, 0, 0, 193,
	0, 0, 0, 0, 68, 66, 47, 0, 0, 0,
	59, 0, 0, 55, 48, 39, 167, 174, 122, 162,
	0, 159, 160, 0, 0, 230, 0, 0, 0, 251,
	257, 0, 0, 0, 202, 192, 0, 0, 196, 197,
	0, 0, 0, 0, 61, 0, 52, 53, 54, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 203,
	204, 0, 0, 205, 206, 0, 0, 0, 0, 161,
	231, 236, 0, 63, 246, 0, 220, 223, 218, 219,
	194, 195, 0, 210, 62, 171, 0, 239, 217, 0,
	202, 0, 0, 199, 211, 212, 63, 221, 222, 224,
	210, 237, 198,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 121, 113, 3,
	15, 17, 119, 117, 16, 118, 18, 120, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 19,
	107, 106, 108, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 114, 3, 126,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 20, 21, 22, 23, 24, 25, 26,
	27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
	87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 109,
	110, 111, 112, 115, 116, 122, 123, 124, 125, 127,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).ast = &AST{Statements: yyDollar[1].stmts}
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.stmts = []Statement{yyDollar[1].statement}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.stmts = yyDollar[1].stmts
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.statement = yyDollar[1].readStmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.statement = yyDollar[1].createTableStmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.stmts = []Statement{yyDollar[1].statement}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[3].statement)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).statementIdx++
			yyVAL.statement = yyDollar[1].insertStmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).statementIdx++
			yyVAL.statement = yyDollar[1].deleteStmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).statementIdx++
			yyVAL.statement = yyDollar[1].updateStmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).statementIdx++
			yyVAL.statement = yyDollar[1].grant
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).statementIdx++
			yyVAL.statement = yyDollar[1].revoke
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).statementIdx++
			yyVAL.statement = yyDollar[1].alterTableStmt
		}
	case 14:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyDollar[1].baseSelect.OrderBy = yyDollar[2].orderBy
			yyDollar[1].baseSelect.Limit = yyDollar[3].limit
			yyVAL.readStmt = yyDollar[1].baseSelect
		}
	case 17:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.readStmt = &CompoundSelect{Type: yyDollar[2].string, Left: yyDollar[1].baseSelect, Right: yyDollar[3].baseSelect, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit}
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = CompoundUnionStr
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = CompoundUnionAllStr
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = CompoundExceptStr
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = CompoundIntersectStr
		}
	case 22:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.baseSelect = &Select{
				Distinct:         yyDollar[2].string,
				SelectColumnList: yyDollar[3].selectColumnList,
				From:             yyDollar[4].tableExpr,
				Where:            yyDollar[5].where,
				GroupBy:          GroupBy(yyDollar[6].exprs),
				Having:           yyDollar[7].where,
			}
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = ""
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = DistinctStr
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = AllStr
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.selectColumnList = SelectColumnList{yyDollar[1].selectColumn}
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.selectColumnList = append(yyDollar[1].selectColumnList, yyDollar[3].selectColumn)
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.selectColumn = &StarSelectColumn{}
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.selectColumn = &AliasedSelectColumn{Expr: yyDollar[1].expr, As: yyDollar[2].identifier}
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.selectColumn = &StarSelectColumn{TableRef: yyDollar[1].table}
		}
	case 31:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.identifier = Identifier("")
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = yyDollar[1].identifier
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.identifier = yyDollar[2].identifier
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = yyDollar[1].identifier
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = Identifier(string(yyDollar[1].bytes[0:len(yyDollar[1].bytes)]))
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tableExpr = yyDollar[2].tableExpr
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tableExpr = yyDollar[2].joinTableExpr
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyDollar[1].table.IsTarget = true
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].table, As: yyDollar[2].identifier}
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: &Subquery{Select: yyDollar[2].readStmt}, As: yyDollar[4].identifier}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tableExpr = &ParenTableExpr{TableExpr: yyDollar[2].tableExpr}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tableExpr = yyDollar[2].joinTableExpr
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.identifier = Identifier("")
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = yyDollar[1].identifier
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.identifier = yyDollar[2].identifier
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = yyDollar[1].identifier
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = Identifier(string(yyDollar[1].bytes[0:len(yyDollar[1].bytes)]))
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			if yyDollar[4].joinTableExpr == nil {
				yyVAL.joinTableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, JoinOperator: yyDollar[2].joinOperator, RightExpr: yyDollar[3].tableExpr}
			} else {
				if yyDollar[2].joinOperator.Natural {
					yylex.(*Lexer).AddError(&ErrNaturalJoinWithOnOrUsingClause{})
				}

				yyDollar[4].joinTableExpr.LeftExpr = yyDollar[1].tableExpr
				yyDollar[4].joinTableExpr.JoinOperator = yyDollar[2].joinOperator
				yyDollar[4].joinTableExpr.RightExpr = yyDollar[3].tableExpr
				yyVAL.joinTableExpr = yyDollar[4].joinTableExpr
			}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			if yyDollar[4].joinTableExpr == nil {
				yyVAL.joinTableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].joinTableExpr, JoinOperator: yyDollar[2].joinOperator, RightExpr: yyDollar[3].tableExpr}
			} else {
				if yyDollar[2].joinOperator.Natural {
					yylex.(*Lexer).AddError(&ErrNaturalJoinWithOnOrUsingClause{})
				}

				yyDollar[4].joinTableExpr.LeftExpr = yyDollar[1].joinTableExpr
				yyDollar[4].joinTableExpr.JoinOperator = yyDollar[2].joinOperator
				yyDollar[4].joinTableExpr.RightExpr = yyDollar[3].tableExpr
				yyVAL.joinTableExpr = yyDollar[4].joinTableExpr
			}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.joinOperator = &JoinOperator{Op: JoinStr}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.joinOperator = &JoinOperator{Op: JoinStr}
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.joinOperator = &JoinOperator{Op: JoinStr}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.joinOperator = &JoinOperator{Op: LeftJoinStr, Natural: yyDollar[1].bool, Outer: yyDollar[3].bool}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.joinOperator = &JoinOperator{Op: RightJoinStr, Natural: yyDollar[1].bool, Outer: yyDollar[3].bool}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.joinOperator = &JoinOperator{Op: FullJoinStr, Natural: yyDollar[1].bool, Outer: yyDollar[3].bool}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.joinOperator = &JoinOperator{Op: InnerJoinStr, Natural: yyDollar[1].bool}
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.bool = false
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.bool = true
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.bool = false
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.bool = true
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.joinTableExpr = nil
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.joinTableExpr = &JoinTableExpr{On: yyDollar[2].expr}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.joinTableExpr = &JoinTableExpr{Using: yyDollar[3].columnList}
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.where = nil
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.where = NewWhere(WhereStr, yyDollar[2].expr)
		}
	case 65:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exprs = nil
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.where = nil
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.where = NewWhere(HavingStr, yyDollar[2].expr)
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.orderBy = nil
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].orderingTerm}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].orderingTerm)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.orderingTerm = &OrderingTerm{Expr: yyDollar[1].expr, Direction: yyDollar[2].string, Nulls: yyDollar[3].nulls}
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = AscStr
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = AscStr
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = DescStr
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.nulls = NullsNil
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.nulls = NullsFirst
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.nulls = NullsLast
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.limit = nil
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.limit = &Limit{Limit: yyDollar[2].expr}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Limit: yyDollar[4].expr}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Limit: yyDollar[2].expr}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.table = &Table{Name: yyDollar[1].identifier}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].column
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyDollar[3].column.TableRef = yyDollar[1].table
			yyVAL.expr = yyDollar[3].column
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ConcatStr, Right: yyDollar[3].expr}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr}
		}
	case 103:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr, Escape: yyDollar[5].expr}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			if value, ok := yyDollar[2].expr.(*Value); ok && value.Type == IntValue {
				yyVAL.expr = &Value{Type: IntValue, Value: append([]byte("-"), value.Value...)}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &IsExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.expr = &IsExpr{Left: yyDollar[1].expr, Right: &NotExpr{Expr: yyDollar[4].expr}}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &IsNullExpr{Expr: yyDollar[1].expr}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &NotNullExpr{Expr: yyDollar[1].expr}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &NotNullExpr{Expr: yyDollar[1].expr}
		}
	case 114:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.expr = &BetweenExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 115:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, CollationName: yyDollar[3].identifier}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].value
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			str := yyDollar[1].bytes[1 : len(yyDollar[1].bytes)-1]
			if len(str) > MaxTextLength {
				yylex.(*Lexer).AddError(&ErrTextTooLong{Length: len(str), MaxAllowed: MaxTextLength})
			}
			yyVAL.expr = &Value{Type: StrValue, Value: str}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if len(yyDollar[1].bytes) > MaxBlobLength {
				yylex.(*Lexer).AddError(&ErrBlobTooBig{Length: len(yyDollar[1].bytes), MaxAllowed: MaxBlobLength})
			}
			yyVAL.expr = &Value{Type: BlobValue, Value: yyDollar[1].bytes}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = BoolValue(true)
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = BoolValue(false)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &NullValue{}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.column = &Column{Name: Identifier(string(yyDollar[1].identifier))}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnList = ColumnList{yyDollar[1].column}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnList = append(yyDollar[1].columnList, yyDollar[3].column)
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = EqualStr
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = NotEqualStr
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = RegexpStr
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotRegexpStr
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = GlobStr
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotGlobStr
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = MatchStr
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotMatchStr
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = LessThanStr
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = GreaterThanStr
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = LessEqualStr
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = GreaterEqualStr
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = LikeStr
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotLikeStr
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = BetweenStr
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotBetweenStr
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = NoneStr
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = TextStr
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = IntegerStr
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.colTuple = Exprs{}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.colTuple = yyDollar[2].exprs
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.subquery = &Subquery{Select: yyDollar[2].readStmt}
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &NotExpr{Expr: &ExistsExpr{Subquery: yyDollar[3].subquery}}
		}
	case 159:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.expr = &FuncExpr{Name: Identifier("glob"), Args: Exprs{yyDollar[3].expr, yyDollar[5].expr}}
		}
	case 160:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.expr = &FuncExpr{Name: Identifier("like"), Args: Exprs{yyDollar[3].expr, yyDollar[5].expr}}
		}
	case 161:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.expr = &FuncExpr{Name: Identifier("like"), Args: Exprs{yyDollar[3].expr, yyDollar[5].expr, yyDollar[7].expr}}
		}
	case 162:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			lowered := strings.ToLower(string(yyDollar[1].identifier))
			isCustom, ok := AllowedFunctions[lowered]
			if !ok {
				yylex.(*Lexer).AddError(&ErrNoSuchFunction{FunctionName: string(yyDollar[1].identifier)})
			}

			if isCustom {
				if yyDollar[3].bool {
					yylex.(*Lexer).AddError(errors.New("custom function cannot have DISTINCT"))
				}

				if yyDollar[6].where != nil {
					yylex.(*Lexer).AddError(errors.New("custom function cannot have FILTER"))
				}
				yyVAL.expr = &CustomFuncExpr{Name: Identifier(lowered), Args: yyDollar[4].exprs}
			} else {
				yyVAL.expr = &FuncExpr{Name: Identifier(lowered), Distinct: yyDollar[3].bool, Args: yyDollar[4].exprs, Filter: yyDollar[6].where}
			}
		}
	case 163:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			lowered := strings.ToLower(string(yyDollar[1].identifier))
			isCustom, ok := AllowedFunctions[lowered]
			if !ok {
				yylex.(*Lexer).AddError(&ErrNoSuchFunction{FunctionName: string(yyDollar[1].identifier)})
			}

			if isCustom {
				yylex.(*Lexer).AddError(errors.New("custom function cannot be used with *"))
			} else {
				yyVAL.expr = &FuncExpr{Name: Identifier(lowered), Distinct: false, Args: nil, Filter: yyDollar[5].where}
			}
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.bool = false
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.bool = true
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exprs = Exprs{}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.where = nil
		}
	case 171:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.where = &Where{Type: WhereStr, Expr: yyDollar[4].expr}
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.expr = nil
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.when = &When{Condition: yyDollar[2].expr, Value: yyDollar[4].expr}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.expr = nil
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 179:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			if len(yyDollar[5].columnDefList) > MaxAllowedColumns {
				yylex.(*Lexer).AddError(&ErrTooManyColumns{ColumnCount: len(yyDollar[5].columnDefList), MaxAllowed: MaxAllowedColumns})
			}

			// We have to replace a primary key table constraint with an equivalent column constraint primary key,
			// so we can add the autoincrement flag, as part of the rules of the Tableland Protocol.
			//
			// That happens because a primary key table constraint that references a single INTEGER column
			// would be an alias to rowid. For cases where a column becomes an alias to rowid we want to force the AUTOINCREMENT.
			//
			// The exception to the above rule is when a table constraint primary key has order DESC. In that case, we replace with an
			// equivalent column constrain without forcing AUTOINCREMENT and avoiding being interpreted as an alias.
			for index, tableConstraint := range yyDollar[6].tableConstraints {
				if tableConstraintPK, ok := tableConstraint.(*TableConstraintPrimaryKey); ok && len(tableConstraintPK.Columns) == 1 {
					for _, columnDef := range yyDollar[5].columnDefList {
						if columnDef.Type == TypeIntegerStr && !columnDef.HasPrimaryKey() {
							if tableConstraintPK != nil && columnDef.Column.Name == tableConstraintPK.Columns[0].Column.Name {
								forceAutoincrement := tableConstraintPK.Columns[0].Order != PrimaryKeyOrderDesc
								columnDef.Constraints = append(columnDef.Constraints, &ColumnConstraintPrimaryKey{Name: tableConstraintPK.Name, AutoIncrement: forceAutoincrement, Order: tableConstraintPK.Columns[0].Order})
								yyDollar[6].tableConstraints = append(yyDollar[6].tableConstraints[:index], yyDollar[6].tableConstraints[index+1:]...)
							}
						}
					}
				}
			}
			yyDollar[3].table.IsTarget = true
			yyVAL.createTableStmt = &CreateTable{Table: yyDollar[3].table, ColumnsDef: yyDollar[5].columnDefList, Constraints: yyDollar[6].tableConstraints}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnDefList = []*ColumnDef{yyDollar[1].columnDef}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnDefList = append(yyDollar[1].columnDefList, yyDollar[3].columnDef)
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if isRowID(yyDollar[1].column.Name) {
				yylex.(*Lexer).AddError(&ErrRowIDNotAllowed{})
			}

			if yyDollar[2].string == TypeIntegerStr {
				for _, constraint := range yyDollar[3].columnConstraints {
					if primaryKey, ok := constraint.(*ColumnConstraintPrimaryKey); ok {
						if primaryKey.Order != PrimaryKeyOrderDesc {
							primaryKey.AutoIncrement = true
						}
					}
				}
			}
			yyVAL.columnDef = &ColumnDef{Column: yyDollar[1].column, Type: yyDollar[2].string, Constraints: yyDollar[3].columnConstraints}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeIntStr
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeIntegerStr
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeTextStr
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeBlobStr
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.columnConstraints = []ColumnConstraint{}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnConstraints = yyDollar[1].columnConstraints
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if _, ok := yyDollar[1].columnConstraint.(*ColumnConstraintPrimaryKey); ok {
				if yylex.(*Lexer).createStmtHasPrimaryKey {
					yylex.(*Lexer).AddError(&ErrMultiplePrimaryKey{})
				} else {
					yylex.(*Lexer).createStmtHasPrimaryKey = true
				}
			}
			yyVAL.columnConstraints = []ColumnConstraint{yyDollar[1].columnConstraint}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			if _, ok := yyDollar[2].columnConstraint.(*ColumnConstraintPrimaryKey); ok && yylex.(*Lexer).createStmtHasPrimaryKey {
				yylex.(*Lexer).AddError(&ErrMultiplePrimaryKey{})
			}
			yyVAL.columnConstraints = append(yyDollar[1].columnConstraints, yyDollar[2].columnConstraint)
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintPrimaryKey{Name: yyDollar[1].identifier, Order: yyDollar[4].string}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintNotNull{Name: yyDollar[1].identifier}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintUnique{Name: yyDollar[1].identifier}
		}
	case 194:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintCheck{Name: yyDollar[1].identifier, Expr: yyDollar[4].expr}
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintDefault{Name: yyDollar[1].identifier, Expr: yyDollar[4].expr, Parenthesis: true}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintDefault{Name: yyDollar[1].identifier, Expr: yyDollar[3].expr}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintDefault{Name: yyDollar[1].identifier, Expr: yyDollar[3].expr}
		}
	case 198:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintGenerated{Name: yyDollar[1].identifier, Expr: yyDollar[6].expr, GeneratedAlways: true, IsStored: yyDollar[8].bool}
		}
	case 199:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintGenerated{Name: yyDollar[1].identifier, Expr: yyDollar[4].expr, GeneratedAlways: false, IsStored: yyDollar[6].bool}
		}
	case 200:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.identifier = Identifier("")
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.identifier = yyDollar[2].identifier
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = PrimaryKeyOrderEmpty
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = PrimaryKeyOrderAsc
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = PrimaryKeyOrderDesc
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = yyDollar[2].value
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyDollar[2].value.Value = append([]byte("-"), yyDollar[2].value.Value...)
			yyVAL.expr = yyDollar[2].value
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Value{Type: IntValue, Value: yyDollar[1].bytes}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).AddError(&ErrNumericLiteralFloat{Value: yyDollar[1].bytes})
			yyVAL.value = &Value{Type: FloatValue, Value: yyDollar[1].bytes}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Value{Type: HexNumValue, Value: yyDollar[1].bytes}
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.bool = false
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.bool = true
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.bool = false
		}
	case 213:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.tableConstraints = []TableConstraint{}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tableConstraints = yyDollar[1].tableConstraints
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			if _, ok := yyDollar[2].tableConstraint.(*TableConstraintPrimaryKey); ok {
				if yylex.(*Lexer).createStmtHasPrimaryKey {
					yylex.(*Lexer).AddError(&ErrMultiplePrimaryKey{})
				} else {
					yylex.(*Lexer).createStmtHasPrimaryKey = true
				}
			}
			yyVAL.tableConstraints = []TableConstraint{yyDollar[2].tableConstraint}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if _, ok := yyDollar[3].tableConstraint.(*TableConstraintPrimaryKey); ok && yylex.(*Lexer).createStmtHasPrimaryKey {
				yylex.(*Lexer).AddError(&ErrMultiplePrimaryKey{})
			}
			yyVAL.tableConstraints = append(yyDollar[1].tableConstraints, yyDollar[3].tableConstraint)
		}
	case 217:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.tableConstraint = &TableConstraintPrimaryKey{Name: yyDollar[1].identifier, Columns: yyDollar[5].indexedColumnList}
		}
	case 218:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.tableConstraint = &TableConstraintUnique{Name: yyDollar[1].identifier, Columns: yyDollar[4].columnList}
		}
	case 219:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.tableConstraint = &TableConstraintCheck{Name: yyDollar[1].identifier, Expr: yyDollar[4].expr}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.indexedColumnList = IndexedColumnList{yyDollar[1].indexedColumn}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.indexedColumnList = append(yyDollar[1].indexedColumnList, yyDollar[3].indexedColumn)
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.indexedColumn = &IndexedColumn{Column: yyDollar[1].column, CollationName: yyDollar[2].identifier, Order: yyDollar[3].string}
		}
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.identifier = Identifier("")
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.identifier = Identifier(string(yyDollar[2].identifier))
		}
	case 225:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			for i := 0; i < len(yyDollar[4].columnList); i++ {
				if isRowID(yyDollar[4].columnList[i].Name) {
					yylex.(*Lexer).AddError(&ErrRowIDNotAllowed{})
				}
			}

			for _, row := range yyDollar[6].insertRows {
				for _, expr := range row {
					if containsSubquery(expr) {
						yylex.(*Lexer).AddError(&ErrStatementContainsSubquery{StatementKind: "insert"})
					}
				}
			}
			yyDollar[3].table.IsTarget = true
			yyVAL.insertStmt = &Insert{Table: yyDollar[3].table, Columns: yyDollar[4].columnList, Rows: yyDollar[6].insertRows, Upsert: yyDollar[7].upsertClause}
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyDollar[3].table.IsTarget = true
			yyVAL.insertStmt = &Insert{Table: yyDollar[3].table, Columns: ColumnList{}, Rows: []Exprs{}, DefaultValues: true}
		}
	case 227:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyDollar[3].table.IsTarget = true

			err := yyDollar[5].readStmt.walkSubtree(func(node Node) (bool, error) {
				if _, ok := node.(*Subquery); ok {
					return true, &ErrStatementContainsSubquery{StatementKind: "insert+select"}
				}

				if _, ok := node.(*JoinTableExpr); ok {
					return true, &ErrContainsJoinTableExpr{}
				}

				return false, nil
			})
			if err != nil {
				yylex.(*Lexer).AddError(err)
			}

			if sel, ok := yyDollar[5].readStmt.(*Select); ok {
				if sel.OrderBy == nil {
					sel.OrderBy = OrderBy{&OrderingTerm{Expr: &Column{Name: Identifier("rowid")}, Direction: AscStr, Nulls: NullsNil}}
				} else {
					sel.OrderBy = append(sel.OrderBy, &OrderingTerm{Expr: &Column{Name: Identifier("rowid")}, Direction: AscStr, Nulls: NullsNil})
				}

				yyVAL.insertStmt = &Insert{Table: yyDollar[3].table, Columns: yyDollar[4].columnList, Rows: []Exprs{}, Select: sel, Upsert: yyDollar[6].upsertClause}
			} else {
				yylex.(*Lexer).AddError(&ErrCompoudSelectNotAllowed{})
				yyVAL.insertStmt = &Insert{Table: yyDollar[3].table, Columns: yyDollar[4].columnList, Rows: []Exprs{}, Upsert: yyDollar[6].upsertClause}
			}
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.columnList = ColumnList{}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnList = yyDollar[2].columnList
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.insertRows = []Exprs{yyDollar[2].exprs}
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.insertRows = append(yyDollar[1].insertRows, yyDollar[4].exprs)
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.upsertClause = nil
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			allConflictClausesExceptLast := yyDollar[1].onConflictClauseList[0 : len(yyDollar[1].onConflictClauseList)-1]
			for _, clause := range allConflictClausesExceptLast {
				if clause.Target == nil {
					yylex.(*Lexer).AddError(&ErrUpsertMissingTarget{})
				}
			}
			yyVAL.upsertClause = yyDollar[1].onConflictClauseList
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.onConflictClauseList = []*OnConflictClause{yyDollar[1].onConflictClause}
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.onConflictClauseList = append(yyDollar[1].onConflictClauseList, yyDollar[2].onConflictClause)
		}
	case 236:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.onConflictClause = &OnConflictClause{
				Target: yyDollar[3].onConflictTarget,
			}
		}
	case 237:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			if yyDollar[8].where != nil && containsSubquery(yyDollar[8].where) {
				yylex.(*Lexer).AddError(&ErrStatementContainsSubquery{StatementKind: "where"})
			}

			yyVAL.onConflictClause = &OnConflictClause{
				Target: yyDollar[3].onConflictTarget,
				DoUpdate: &OnConflictUpdate{
					Exprs: yyDollar[7].updateList,
					Where: yyDollar[8].where,
				},
			}
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.onConflictTarget = nil
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			if yyDollar[4].where != nil && containsSubquery(yyDollar[4].where) {
				yylex.(*Lexer).AddError(&ErrStatementContainsSubquery{StatementKind: "where"})
			}

			yyVAL.onConflictTarget = &OnConflictTarget{
				Columns: yyDollar[2].columnList,
				Where:   yyDollar[4].where,
			}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			if yyDollar[4].where != nil && containsSubquery(yyDollar[4].where) {
				yylex.(*Lexer).AddError(&ErrStatementContainsSubquery{StatementKind: "delete"})
			}
			yyDollar[3].table.IsTarget = true
			yyVAL.deleteStmt = &Delete{Table: yyDollar[3].table, Where: yyDollar[4].where}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			if yyDollar[5].where != nil && containsSubquery(yyDollar[5].where) {
				yylex.(*Lexer).AddError(&ErrStatementContainsSubquery{StatementKind: "where"})
			}
			yyDollar[2].table.IsTarget = true
			yyVAL.updateStmt = &Update{Table: yyDollar[2].table, Exprs: yyDollar[4].updateList, Where: yyDollar[5].where}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.updateList = yyDollar[1].updateList
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.updateList = yyDollar[1].updateList
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if containsSubquery(yyDollar[1].updateExpression.Expr) {
				yylex.(*Lexer).AddError(&ErrStatementContainsSubquery{StatementKind: "update"})
			}
			yyVAL.updateList = []*UpdateExpr{yyDollar[1].updateExpression}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.updateList = append(yyDollar[1].updateList, yyDollar[3].updateExpression)
		}
	case 246:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			if len(yyDollar[2].columnList) != len(yyDollar[6].exprs) {
				yylex.(*Lexer).AddError(&ErrUpdateColumnsAndValuesDiffer{ColumnsCount: len(yyDollar[2].columnList), ValuesCount: len(yyDollar[6].exprs)})
				yyVAL.updateList = []*UpdateExpr{}
			} else {
				exprs := make([]*UpdateExpr, len(yyDollar[2].columnList))
				for i := 0; i < len(yyDollar[2].columnList); i++ {
					if isRowID(yyDollar[2].columnList[i].Name) {
						yylex.(*Lexer).AddError(&ErrRowIDNotAllowed{})
					}
					exprs[i] = &UpdateExpr{Column: yyDollar[2].columnList[i], Expr: yyDollar[6].exprs[i]}
				}
				yyVAL.updateList = exprs
			}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if isRowID(yyDollar[1].column.Name) {
				yylex.(*Lexer).AddError(&ErrRowIDNotAllowed{})
			}
			yyVAL.updateExpression = &UpdateExpr{Column: yyDollar[1].column, Expr: yyDollar[3].expr}
		}
	case 248:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyDollar[4].table.IsTarget = true
			yyVAL.grant = &Grant{Table: yyDollar[4].table, Privileges: yyDollar[2].privileges, Roles: yyDollar[6].strings}
		}
	case 249:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyDollar[4].table.IsTarget = true
			yyVAL.revoke = &Revoke{Table: yyDollar[4].table, Privileges: yyDollar[2].privileges, Roles: yyDollar[6].strings}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.strings = []string{string(yyDollar[1].bytes[1 : len(yyDollar[1].bytes)-1])}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.strings = append(yyDollar[1].strings, string(yyDollar[3].bytes[1:len(yyDollar[3].bytes)-1]))
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			privileges := make(map[string]struct{})
			privileges[yyDollar[1].string] = struct{}{}
			yyVAL.privileges = Privileges(privileges)
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if _, ok := yyDollar[1].privileges[yyDollar[3].string]; ok {
				yylex.(*Lexer).AddError(&ErrGrantRepeatedPrivilege{Privilege: yyDollar[3].string})
			}

			yyDollar[1].privileges[yyDollar[3].string] = struct{}{}
			yyVAL.privileges = yyDollar[1].privileges
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = "insert"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = "update"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = "delete"
		}
	case 257:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyDollar[3].table.IsTarget = true
			yyVAL.alterTableStmt = &AlterTable{
				Table: yyDollar[3].table,
				AlterTableClause: &AlterTableRename{
					OldColumn: yyDollar[6].column,
					NewColumn: yyDollar[8].column,
				},
			}
		}
	case 258:
		yyDollar = yyS[yypt-6 : yypt+1]
		{

			// Adds the following validation to the column definition:
			// - The column may not have a PRIMARY KEY or UNIQUE constraint.
			// - If a NOT NULL constraint is specified, then the column must have a default value other than NULL.
			var hasNotNull, hasDefault bool
			var defaultConstraint *ColumnConstraintDefault
			for _, constraint := range yyDollar[6].columnDef.Constraints {
				if _, hasPrimaryKey := constraint.(*ColumnConstraintPrimaryKey); hasPrimaryKey {
					yylex.(*Lexer).AddError(&ErrAlterTablePrimaryKeyNotAllowed{})
				}

				if _, hasUnique := constraint.(*ColumnConstraintUnique); hasUnique {
					yylex.(*Lexer).AddError(&ErrAlterTableUniqueNotAllowed{})
				}

				if _, ok := constraint.(*ColumnConstraintNotNull); ok {
					hasNotNull = true
				}

				if constraint, ok := constraint.(*ColumnConstraintDefault); ok {
					hasDefault = true
					defaultConstraint = constraint
				}
			}

			if hasNotNull && hasDefault && defaultConstraint != nil {
				if _, ok := defaultConstraint.Expr.(*NullValue); ok {
					yylex.(*Lexer).AddError(&ErrNotNullConstraintDefaultNotNull{})
				}
			}

			yyDollar[3].table.IsTarget = true
			yyVAL.alterTableStmt = &AlterTable{
				Table: yyDollar[3].table,
				AlterTableClause: &AlterTableAdd{
					ColumnDef: yyDollar[6].columnDef,
				},
			}
		}
	case 259:
		yyDollar = yyS[yypt-6 : yypt+1]
		{

			yyDollar[3].table.IsTarget = true
			yyVAL.alterTableStmt = &AlterTable{
				Table: yyDollar[3].table,
				AlterTableClause: &AlterTableDrop{
					Column: yyDollar[6].column,
				},
			}
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			literalUpper := bytes.ToUpper(yyDollar[1].bytes)
			if _, ok := keywordsNotAllowed[string(literalUpper)]; ok {
				yylex.(*Lexer).AddError(&ErrKeywordIsNotAllowed{Keyword: string(yyDollar[1].bytes)})
			}

			yyVAL.identifier = Identifier(yyDollar[1].bytes)
		}
	}
	goto yystack /* stack new state and value */
}
