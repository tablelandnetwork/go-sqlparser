// Code generated by goyacc -l -o yy_parser.go grammar.y. DO NOT EDIT.
package sqlparser

import __yyfmt__ "fmt"

const MaxColumnNameLength = 64

type yySymType struct {
	yys               int
	bool              bool
	string            string
	bytes             []byte
	expr              Expr
	exprs             Exprs
	column            *Column
	table             *Table
	convertType       ConvertType
	when              *When
	whens             []*When
	SelectColumn      SelectColumn
	SelectColumnList  SelectColumnList
	selectStmt        *Select
	where             *Where
	limit             *Limit
	orderBy           OrderBy
	orderingTerm      *OrderingTerm
	nulls             NullsType
	tableExprList     TableExprList
	tableExpr         TableExpr
	joinTableExpr     *JoinTableExpr
	columnList        ColumnList
	subquery          *Subquery
	colTuple          ColTuple
	statement         Statement
	identifier        Identifier
	createTableStmt   *CreateTable
	columnDefList     []*ColumnDef
	columnDef         *ColumnDef
	columnConstraint  ColumnConstraint
	columnConstraints []ColumnConstraint
	value             *Value
	tableConstraint   TableConstraint
	tableConstraints  []TableConstraint
	insertStmt        *Insert
	insertRows        []Exprs
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGRAL = 57348
const HEXNUM = 57349
const FLOAT = 57350
const BLOBVAL = 57351
const ERROR = 57352
const TRUE = 57353
const FALSE = 57354
const NULL = 57355
const AND = 57356
const NONE = 57357
const INTEGER = 57358
const NUMERIC = 57359
const REAL = 57360
const TEXT = 57361
const CAST = 57362
const AS = 57363
const CASE = 57364
const WHEN = 57365
const THEN = 57366
const ELSE = 57367
const END = 57368
const SELECT = 57369
const FROM = 57370
const WHERE = 57371
const GROUP = 57372
const BY = 57373
const HAVING = 57374
const LIMIT = 57375
const OFFSET = 57376
const ORDER = 57377
const ASC = 57378
const DESC = 57379
const NULLS = 57380
const FIRST = 57381
const LAST = 57382
const DISTINCT = 57383
const ALL = 57384
const EXISTS = 57385
const FILTER = 57386
const CREATE = 57387
const TABLE = 57388
const INT = 57389
const BLOB = 57390
const ANY = 57391
const PRIMARY = 57392
const KEY = 57393
const UNIQUE = 57394
const CHECK = 57395
const DEFAULT = 57396
const GENERATED = 57397
const ALWAYS = 57398
const STORED = 57399
const VIRTUAL = 57400
const CONSTRAINT = 57401
const INSERT = 57402
const INTO = 57403
const VALUES = 57404
const JOIN = 57405
const ON = 57406
const USING = 57407
const OR = 57408
const ANDOP = 57409
const NOT = 57410
const IS = 57411
const ISNOT = 57412
const MATCH = 57413
const GLOB = 57414
const REGEXP = 57415
const LIKE = 57416
const BETWEEN = 57417
const IN = 57418
const ISNULL = 57419
const NOTNULL = 57420
const NE = 57421
const LE = 57422
const GE = 57423
const INEQUALITY = 57424
const ESCAPE = 57425
const LSHIFT = 57426
const RSHIFT = 57427
const CONCAT = 57428
const JSON_EXTRACT_OP = 57429
const JSON_UNQUOTE_EXTRACT_OP = 57430
const COLLATE = 57431
const UNARY = 57432

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGRAL",
	"HEXNUM",
	"FLOAT",
	"BLOBVAL",
	"ERROR",
	"TRUE",
	"FALSE",
	"NULL",
	"AND",
	"'('",
	"','",
	"')'",
	"'.'",
	"';'",
	"NONE",
	"INTEGER",
	"NUMERIC",
	"REAL",
	"TEXT",
	"CAST",
	"AS",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"SELECT",
	"FROM",
	"WHERE",
	"GROUP",
	"BY",
	"HAVING",
	"LIMIT",
	"OFFSET",
	"ORDER",
	"ASC",
	"DESC",
	"NULLS",
	"FIRST",
	"LAST",
	"DISTINCT",
	"ALL",
	"EXISTS",
	"FILTER",
	"CREATE",
	"TABLE",
	"INT",
	"BLOB",
	"ANY",
	"PRIMARY",
	"KEY",
	"UNIQUE",
	"CHECK",
	"DEFAULT",
	"GENERATED",
	"ALWAYS",
	"STORED",
	"VIRTUAL",
	"CONSTRAINT",
	"INSERT",
	"INTO",
	"VALUES",
	"JOIN",
	"ON",
	"USING",
	"OR",
	"ANDOP",
	"NOT",
	"IS",
	"ISNOT",
	"MATCH",
	"GLOB",
	"REGEXP",
	"LIKE",
	"BETWEEN",
	"IN",
	"ISNULL",
	"NOTNULL",
	"NE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"INEQUALITY",
	"ESCAPE",
	"'&'",
	"'|'",
	"LSHIFT",
	"RSHIFT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"CONCAT",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"COLLATE",
	"'~'",
	"UNARY",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 34,
	18, 60,
	-2, 106,
	-1, 207,
	16, 166,
	17, 166,
	-2, 179,
	-1, 251,
	16, 167,
	17, 167,
	-2, 179,
}

const yyPrivate = 57344

const yyLast = 1301

var yyAct = [...]int16{
	193, 354, 312, 170, 35, 192, 24, 247, 23, 252,
	246, 240, 179, 260, 21, 117, 168, 157, 116, 180,
	148, 97, 104, 3, 115, 78, 96, 98, 99, 101,
	65, 66, 67, 78, 178, 22, 80, 177, 49, 51,
	29, 61, 62, 63, 64, 56, 57, 58, 59, 60,
	65, 66, 67, 78, 21, 162, 255, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 135, 136, 137, 22, 118, 154, 146, 87,
	88, 89, 90, 105, 187, 61, 62, 63, 64, 56,
	57, 58, 59, 60, 65, 66, 67, 78, 261, 262,
	172, 17, 153, 159, 154, 248, 225, 161, 165, 166,
	355, 356, 139, 306, 175, 298, 169, 171, 151, 110,
	150, 56, 57, 58, 59, 60, 65, 66, 67, 78,
	58, 59, 60, 65, 66, 67, 78, 295, 186, 188,
	241, 118, 184, 273, 185, 274, 275, 164, 36, 46,
	48, 47, 37, 19, 38, 39, 40, 177, 301, 197,
	16, 189, 153, 111, 248, 106, 200, 14, 15, 6,
	351, 152, 358, 359, 195, 143, 142, 141, 144, 145,
	140, 150, 321, 322, 257, 289, 217, 7, 226, 290,
	218, 227, 219, 220, 221, 174, 293, 231, 118, 118,
	118, 222, 8, 242, 243, 113, 50, 114, 53, 6,
	230, 209, 169, 210, 211, 253, 158, 119, 258, 182,
	183, 254, 245, 327, 259, 54, 158, 10, 196, 155,
	265, 95, 333, 266, 6, 263, 264, 229, 357, 304,
	305, 181, 208, 212, 213, 34, 36, 46, 48, 47,
	37, 268, 38, 39, 40, 267, 41, 244, 308, 253,
	277, 278, 291, 214, 352, 239, 31, 223, 28, 87,
	88, 89, 90, 294, 201, 61, 62, 63, 64, 56,
	57, 58, 59, 60, 65, 66, 67, 78, 163, 42,
	310, 313, 302, 309, 315, 229, 314, 249, 319, 171,
	318, 323, 324, 171, 93, 94, 214, 340, 328, 325,
	326, 214, 337, 205, 43, 176, 138, 344, 44, 285,
	45, 339, 229, 330, 171, 329, 81, 234, 237, 238,
	236, 235, 347, 348, 313, 346, 349, 26, 25, 229,
	228, 176, 224, 214, 215, 353, 27, 50, 279, 317,
	281, 282, 283, 284, 307, 300, 297, 296, 119, 292,
	287, 269, 361, 149, 299, 41, 280, 109, 108, 107,
	103, 72, 71, 76, 73, 102, 86, 85, 84, 91,
	92, 79, 74, 75, 83, 82, 87, 88, 89, 90,
	335, 336, 61, 62, 63, 64, 56, 57, 58, 59,
	60, 65, 66, 67, 78, 46, 48, 47, 9, 182,
	183, 93, 94, 11, 12, 154, 331, 276, 147, 50,
	72, 71, 76, 73, 1, 86, 85, 84, 91, 92,
	79, 74, 75, 83, 82, 87, 88, 89, 90, 332,
	286, 61, 62, 63, 64, 56, 57, 58, 59, 60,
	65, 66, 67, 78, 272, 271, 5, 204, 206, 250,
	251, 167, 160, 52, 350, 311, 256, 288, 156, 233,
	216, 72, 71, 76, 73, 112, 86, 85, 84, 91,
	92, 79, 74, 75, 83, 82, 87, 88, 89, 90,
	360, 18, 61, 62, 63, 64, 56, 57, 58, 59,
	60, 65, 66, 67, 78, 55, 320, 207, 13, 72,
	71, 76, 73, 334, 86, 85, 84, 91, 92, 79,
	74, 75, 83, 82, 87, 88, 89, 90, 345, 77,
	61, 62, 63, 64, 56, 57, 58, 59, 60, 65,
	66, 67, 78, 70, 72, 71, 76, 73, 69, 86,
	85, 84, 91, 92, 79, 74, 75, 83, 82, 87,
	88, 89, 90, 343, 68, 61, 62, 63, 64, 56,
	57, 58, 59, 60, 65, 66, 67, 78, 173, 199,
	303, 30, 72, 71, 76, 73, 194, 86, 85, 84,
	91, 92, 79, 74, 75, 83, 82, 87, 88, 89,
	90, 342, 100, 61, 62, 63, 64, 56, 57, 58,
	59, 60, 65, 66, 67, 78, 33, 72, 71, 76,
	73, 32, 86, 85, 84, 91, 92, 79, 74, 75,
	83, 82, 87, 88, 89, 90, 341, 4, 61, 62,
	63, 64, 56, 57, 58, 59, 60, 65, 66, 67,
	78, 2, 0, 0, 0, 72, 71, 76, 73, 0,
	86, 85, 84, 91, 92, 79, 74, 75, 83, 82,
	87, 88, 89, 90, 338, 0, 61, 62, 63, 64,
	56, 57, 58, 59, 60, 65, 66, 67, 78, 0,
	72, 71, 76, 73, 0, 86, 85, 84, 91, 92,
	79, 74, 75, 83, 82, 87, 88, 89, 90, 316,
	0, 61, 62, 63, 64, 56, 57, 58, 59, 60,
	65, 66, 67, 78, 0, 0, 0, 0, 72, 71,
	76, 73, 0, 86, 85, 84, 91, 92, 79, 74,
	75, 83, 82, 87, 88, 89, 90, 270, 0, 61,
	62, 63, 64, 56, 57, 58, 59, 60, 65, 66,
	67, 78, 0, 72, 71, 76, 73, 0, 86, 85,
	84, 91, 92, 79, 74, 75, 83, 82, 87, 88,
	89, 90, 0, 0, 61, 62, 63, 64, 56, 57,
	58, 59, 60, 65, 66, 67, 78, 232, 0, 0,
	0, 72, 71, 76, 73, 0, 86, 85, 84, 91,
	92, 79, 74, 75, 83, 82, 87, 88, 89, 90,
	203, 0, 61, 62, 63, 64, 56, 57, 58, 59,
	60, 65, 66, 67, 78, 0, 0, 0, 0, 72,
	71, 76, 73, 0, 86, 85, 84, 91, 92, 79,
	74, 75, 83, 82, 87, 88, 89, 90, 202, 0,
	61, 62, 63, 64, 56, 57, 58, 59, 60, 65,
	66, 67, 78, 0, 0, 72, 71, 76, 73, 0,
	86, 85, 84, 91, 92, 79, 74, 75, 83, 82,
	87, 88, 89, 90, 0, 0, 61, 62, 63, 64,
	56, 57, 58, 59, 60, 65, 66, 67, 78, 198,
	0, 0, 0, 72, 71, 76, 73, 0, 86, 85,
	84, 91, 92, 79, 74, 75, 83, 82, 87, 88,
	89, 90, 190, 0, 61, 62, 63, 64, 56, 57,
	58, 59, 60, 65, 66, 67, 78, 0, 0, 0,
	0, 0, 0, 0, 72, 71, 76, 73, 0, 86,
	85, 84, 91, 92, 79, 74, 75, 83, 82, 87,
	88, 89, 90, 0, 0, 61, 62, 63, 64, 56,
	57, 58, 59, 60, 65, 66, 67, 78, 0, 72,
	71, 76, 73, 0, 86, 85, 84, 91, 92, 79,
	74, 75, 83, 82, 87, 88, 89, 90, 0, 0,
	61, 62, 63, 64, 56, 57, 58, 59, 60, 65,
	66, 67, 78, 72, 71, 76, 73, 0, 86, 85,
	84, 91, 92, 79, 74, 75, 83, 82, 87, 88,
	89, 90, 0, 0, 61, 62, 63, 64, 56, 57,
	58, 59, 60, 65, 66, 67, 78, 71, 76, 73,
	0, 86, 85, 84, 91, 92, 79, 74, 75, 83,
	82, 87, 88, 89, 90, 0, 0, 61, 62, 63,
	64, 56, 57, 58, 59, 60, 65, 66, 67, 78,
	76, 73, 0, 86, 85, 84, 91, 92, 79, 74,
	75, 83, 82, 87, 88, 89, 90, 0, 0, 61,
	62, 63, 64, 56, 57, 58, 59, 60, 65, 66,
	67, 78, 34, 36, 46, 48, 47, 37, 0, 38,
	39, 40, 0, 41, 0, 191, 0, 0, 0, 0,
	0, 0, 0, 31, 0, 28, 0, 0, 0, 0,
	6, 0, 34, 36, 46, 48, 47, 37, 0, 38,
	39, 40, 0, 41, 0, 0, 42, 0, 0, 0,
	0, 0, 0, 31, 0, 28, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 43, 0, 0, 0, 44, 42, 45, 0, 34,
	36, 46, 48, 47, 37, 0, 38, 39, 40, 0,
	41, 0, 0, 0, 26, 25, 0, 0, 0, 0,
	31, 43, 28, 27, 0, 44, 0, 45, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 42, 26, 25, 20, 0, 0, 0,
	0, 0, 0, 27, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 43, 0,
	0, 0, 44, 0, 45, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 26, 25, 0, 0, 0, 0, 0, 0, 0,
	27,
}

var yyPact = [...]int16{
	137, -1000, -1000, 208, 208, 208, 121, 109, 35, -1000,
	-1000, -1000, -1000, 1148, -1000, -1000, 415, 415, 192, -1000,
	-1000, 300, 213, -1000, -1000, 1195, 1195, 1195, 1195, -1000,
	-1000, 360, -1000, -1000, 355, -1000, -1000, -1000, -1000, -1000,
	-1000, 177, 350, 117, 354, 353, -1000, -1000, -1000, 352,
	-1000, 104, 171, 1148, 343, -1000, 1195, 1195, 1195, 1195,
	1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
	1195, 1195, 1195, 241, -1000, -1000, 99, 1195, 414, 348,
	-1000, 407, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 73, -1000, 211, -1000, -1000,
	188, 952, 1195, 9, 271, -1000, 350, 1195, 1195, 411,
	411, 33, 160, 1195, -1000, 299, -31, -34, 215, 202,
	32, 32, -71, -71, -71, 25, 25, 25, 25, -79,
	-79, -79, 183, -51, -7, 1017, 985, 183, 1195, -1000,
	348, -1000, -1000, -1000, -1000, -1000, 918, -1000, -1000, 1118,
	-1000, -1000, -1000, -1000, -1000, 411, 198, -1000, 1195, 883,
	1195, 257, -1000, -1000, -1000, 842, 804, 297, -1000, 190,
	327, -1000, -1000, 149, 154, 952, 343, 343, 343, -1000,
	-1000, 405, -1000, -1000, 250, 325, 89, 1195, 183, -1000,
	1195, -1000, 323, 952, 179, -1000, 1195, 768, 307, 248,
	279, 91, 1195, 1195, 240, 100, 281, 41, -1000, -1000,
	-1000, -1000, -1000, -1000, 411, -11, 144, 1195, 1195, -1000,
	29, 29, -1000, 215, -1000, -1000, 183, 183, -1000, 1195,
	-1000, 952, 1195, 238, -1000, -1000, -1000, -1000, -1000, 91,
	-1000, 346, 730, 438, -1000, -1000, -1000, 88, 413, 41,
	-1000, 41, -1000, 293, -1000, 345, 147, 153, 952, 279,
	-1000, 1195, 344, -1000, -1000, 952, 952, -1000, -1000, 162,
	-1000, -1000, 1195, 81, 342, 341, -1000, -1000, -1000, 59,
	351, -1000, 340, 143, 52, 339, 242, 1195, -1000, 1195,
	1195, 952, 411, 1195, 692, 334, 411, 1195, 141, -1000,
	1195, 1195, -1000, -1000, 399, 399, 197, 1195, 310, 306,
	400, 216, -1000, 349, 295, 657, -1000, 411, 290, 619,
	-1000, -1000, -1000, 584, 546, -1000, -1000, 302, 511, 1195,
	-1000, 1195, 1195, 1195, 127, -1000, -1000, -1000, -1000, 247,
	-1000, -1000, -1000, -1000, 1195, 48, 221, 952, 952, -1000,
	-1000, 128, -1000, 473, -1000, -1000, -1000, -1000, -1000, -1000,
	48, -1000,
}

var yyPgo = [...]int16{
	0, 651, 22, 637, 0, 8, 621, 616, 602, 586,
	581, 580, 5, 579, 578, 564, 548, 543, 529, 513,
	508, 507, 506, 6, 505, 36, 12, 19, 7, 153,
	491, 21, 475, 470, 11, 469, 17, 468, 467, 466,
	465, 2, 464, 24, 463, 15, 18, 13, 3, 40,
	20, 462, 1, 461, 16, 9, 460, 459, 4, 10,
	458, 457, 456, 440, 424, 408,
}

var yyR1 = [...]int8{
	0, 64, 1, 1, 1, 65, 65, 2, 20, 20,
	20, 30, 30, 29, 29, 29, 24, 24, 24, 25,
	25, 44, 44, 43, 43, 45, 45, 45, 45, 26,
	26, 26, 27, 27, 46, 46, 47, 47, 47, 32,
	32, 14, 14, 33, 33, 39, 39, 40, 40, 41,
	19, 19, 19, 42, 42, 42, 38, 38, 38, 38,
	31, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	5, 5, 5, 5, 5, 5, 23, 48, 48, 15,
	15, 15, 15, 15, 15, 15, 15, 16, 16, 16,
	16, 17, 17, 18, 18, 35, 35, 35, 35, 35,
	50, 50, 50, 49, 10, 10, 6, 6, 6, 7,
	7, 51, 51, 12, 12, 13, 13, 34, 34, 8,
	8, 36, 37, 37, 9, 9, 3, 53, 53, 54,
	21, 21, 21, 21, 21, 21, 57, 57, 56, 56,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 28,
	28, 22, 22, 22, 11, 11, 58, 58, 58, 52,
	52, 52, 61, 61, 60, 60, 59, 59, 59, 62,
	62, 63, 63,
}

var yyR2 = [...]int8{
	0, 1, 2, 2, 2, 0, 1, 9, 0, 1,
	1, 1, 3, 1, 2, 3, 0, 1, 2, 1,
	1, 2, 2, 1, 3, 2, 4, 3, 3, 0,
	1, 2, 1, 1, 4, 4, 0, 2, 4, 0,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 3,
	0, 1, 1, 0, 2, 2, 0, 2, 4, 4,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 4, 2, 2, 3,
	5, 5, 3, 3, 4, 1, 1, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 3, 3, 2, 3, 6, 6, 8, 6,
	5, 0, 1, 1, 3, 0, 1, 0, 5, 0,
	1, 4, 1, 2, 0, 2, 7, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 2,
	4, 3, 2, 5, 5, 3, 3, 8, 6, 0,
	2, 0, 1, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 0, 1, 2, 3, 6, 5, 5, 8,
	5, 3, 5,
}

var yyChk = [...]int16{
	-1000, -64, -1, -2, -3, -62, 32, 50, 65, -65,
	19, -65, -65, -20, 46, 47, 51, 66, -30, -29,
	98, -4, -31, -5, -23, 97, 96, 105, 27, -49,
	-10, 25, -6, -7, 4, -58, 5, 9, 11, 12,
	13, 15, 48, 73, 77, 79, 6, 8, 7, -31,
	4, -31, -44, 16, 33, -24, 96, 97, 98, 99,
	100, 92, 93, 94, 95, 101, 102, 103, -15, -16,
	-17, 72, 71, 74, 82, 83, 73, -18, 104, 81,
	-25, 26, 85, 84, 78, 77, 76, 86, 87, 88,
	89, 79, 80, 4, 5, 18, -4, -31, -4, -4,
	-8, -4, 15, 15, -2, -49, 48, 15, 15, 15,
	15, 59, -32, 34, -29, -43, -46, -45, -31, 15,
	-4, -4, -4, -4, -4, -4, -4, -4, -4, -4,
	-4, -4, -4, -4, -4, -4, -4, -4, 75, 13,
	81, 78, 77, 76, 79, 80, -4, 4, -50, 15,
	-49, -25, 98, -23, 4, 18, -37, -36, 28, -4,
	-51, 98, 46, 17, -49, -4, -4, -53, -54, -23,
	-48, -23, 67, -14, 35, -4, 16, 68, 68, -26,
	-27, 26, 4, 5, -2, -43, -46, 91, -4, -50,
	14, 17, -12, -4, -9, -36, 30, -4, 26, -13,
	-12, 17, 16, 16, -61, 16, -60, -21, 52, 21,
	23, 24, 53, 54, 16, 17, -33, 37, 36, -45,
	-45, -45, -27, 17, 17, 17, -4, -4, 17, 16,
	31, -4, 29, -35, 20, 24, 23, 21, 22, 17,
	-34, 49, -4, -4, 17, -54, -59, -28, 64, 16,
	-57, -56, -55, -28, -23, 67, -39, 40, -4, -12,
	-47, 69, 70, -47, -26, -4, -4, 17, -34, 15,
	17, 17, 16, 55, 57, 58, 4, -59, -55, 55,
	73, 57, 58, 59, 60, 26, -63, 15, -38, 38,
	36, -4, 15, 34, -4, 56, 15, 15, 56, 13,
	15, 15, -5, -11, 96, 97, 61, 15, 16, -12,
	-4, -40, -41, -4, -48, -4, 17, 15, -48, -4,
	-22, 41, 42, -4, -4, -58, -58, 26, -4, 15,
	17, 16, 39, 16, -19, 41, 42, 17, 17, -48,
	17, 17, 17, 17, 15, 17, -12, -4, -4, -41,
	-42, 43, 17, -4, -52, 62, 63, 17, 44, 45,
	17, -52,
}

var yyDef = [...]int16{
	0, -2, 1, 5, 5, 5, 8, 0, 0, 2,
	6, 3, 4, 0, 9, 10, 0, 0, 0, 11,
	13, 16, 0, 61, 62, 0, 0, 0, 149, 95,
	96, 0, 98, 99, -2, 100, 101, 102, 103, 104,
	105, 0, 0, 0, 0, 0, 186, 187, 188, 0,
	60, 0, 39, 0, 0, 14, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 0, 0, 0, 0,
	17, 0, 109, 110, 111, 113, 115, 117, 118, 119,
	120, 121, 123, 19, 20, 0, 80, 0, 81, 82,
	0, 150, 0, 141, 0, 134, 0, 0, 0, 0,
	0, 0, 41, 0, 12, 21, 22, 23, 29, 0,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 83, 84, 85, 0, 89,
	0, 112, 114, 116, 122, 124, 0, 92, 93, 0,
	131, 18, 15, 63, 106, 0, 154, 152, 0, 0,
	145, 0, 142, 133, 135, 0, 0, 192, 157, 0,
	0, 107, 200, 43, 0, 40, 0, 0, 0, 25,
	30, 0, 32, 33, 0, 0, 0, 0, 86, 94,
	0, 130, 0, 143, 0, 153, 0, 0, 0, 0,
	146, 147, 0, 0, 0, 179, 193, -2, 160, 161,
	162, 163, 164, 165, 0, 0, 45, 0, 0, 24,
	36, 36, 31, 29, 27, 28, 79, 90, 132, 0,
	91, 155, 0, 0, 125, 126, 127, 128, 129, 147,
	140, 0, 0, 0, 156, 158, 194, 0, 0, 179,
	159, -2, 168, 0, 108, 0, 56, 0, 44, 42,
	35, 0, 0, 34, 26, 144, 151, 97, 139, 0,
	136, 137, 0, 0, 0, 0, 180, 195, 169, 0,
	0, 172, 0, 0, 0, 0, 199, 0, 7, 0,
	0, 37, 0, 0, 0, 0, 0, 0, 181, 171,
	0, 0, 175, 176, 0, 0, 0, 0, 0, 0,
	57, 46, 47, 50, 0, 0, 138, 0, 0, 0,
	170, 182, 183, 0, 0, 184, 185, 0, 0, 0,
	201, 0, 0, 0, 53, 51, 52, 38, 148, 0,
	197, 198, 173, 174, 0, 189, 0, 58, 59, 48,
	49, 0, 196, 0, 178, 190, 191, 202, 54, 55,
	189, 177,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 100, 92, 3,
	15, 17, 98, 96, 16, 97, 18, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 19,
	86, 85, 87, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 20, 21, 22, 23, 24, 25, 26,
	27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 88, 89,
	90, 91, 94, 95, 101, 102, 103, 104, 106,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).ast = &AST{yyDollar[1].statement}
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.statement = yyDollar[1].selectStmt
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.statement = yyDollar[1].createTableStmt
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.statement = yyDollar[1].insertStmt
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
		}
	case 7:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.selectStmt = &Select{
				Distinct:         yyDollar[2].string,
				SelectColumnList: yyDollar[3].SelectColumnList,
				From:             yyDollar[4].tableExprList,
				Where:            yyDollar[5].where,
				GroupBy:          GroupBy(yyDollar[6].exprs),
				Having:           yyDollar[7].where,
				OrderBy:          yyDollar[8].orderBy,
				Limit:            yyDollar[9].limit,
			}
		}
	case 8:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = ""
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = DistinctStr
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = AllStr
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.SelectColumnList = SelectColumnList{yyDollar[1].SelectColumn}
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.SelectColumnList = append(yyDollar[1].SelectColumnList, yyDollar[3].SelectColumn)
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.SelectColumn = &StarSelectColumn{}
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.SelectColumn = &AliasedSelectColumn{Expr: yyDollar[1].expr, As: yyDollar[2].identifier}
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.SelectColumn = &StarSelectColumn{TableRef: yyDollar[1].table}
		}
	case 16:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.identifier = Identifier("")
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = yyDollar[1].identifier
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.identifier = yyDollar[2].identifier
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = Identifier(string(yyDollar[1].bytes))
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = Identifier(string(yyDollar[1].bytes[1 : len(yyDollar[1].bytes)-1]))
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tableExprList = yyDollar[2].tableExprList
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tableExprList = TableExprList{yyDollar[2].joinTableExpr}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tableExprList = TableExprList{yyDollar[1].tableExpr}
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tableExprList = append(yyVAL.tableExprList, yyDollar[3].tableExpr)
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].table, As: yyDollar[2].identifier}
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: &Subquery{Select: yyDollar[2].selectStmt}, As: yyDollar[4].identifier}
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tableExpr = &ParenTableExpr{TableExprList: yyDollar[2].tableExprList}
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tableExpr = yyDollar[2].joinTableExpr
		}
	case 29:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.identifier = Identifier("")
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = yyDollar[1].identifier
		}
	case 31:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.identifier = yyDollar[2].identifier
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = Identifier(string(yyDollar[1].bytes))
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = Identifier(string(yyDollar[1].bytes))
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			if yyDollar[4].joinTableExpr == nil {
				yyVAL.joinTableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, JoinOperator: JoinStr, RightExpr: yyDollar[3].tableExpr}
			} else {
				yyDollar[4].joinTableExpr.LeftExpr = yyDollar[1].tableExpr
				yyDollar[4].joinTableExpr.JoinOperator = JoinStr
				yyDollar[4].joinTableExpr.RightExpr = yyDollar[3].tableExpr
				yyVAL.joinTableExpr = yyDollar[4].joinTableExpr
			}
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			if yyDollar[4].joinTableExpr == nil {
				yyVAL.joinTableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].joinTableExpr, JoinOperator: JoinStr, RightExpr: yyDollar[3].tableExpr}
			} else {
				yyDollar[4].joinTableExpr.LeftExpr = yyDollar[1].joinTableExpr
				yyDollar[4].joinTableExpr.JoinOperator = JoinStr
				yyDollar[4].joinTableExpr.RightExpr = yyDollar[3].tableExpr
				yyVAL.joinTableExpr = yyDollar[4].joinTableExpr
			}
		}
	case 36:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.joinTableExpr = nil
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.joinTableExpr = &JoinTableExpr{On: yyDollar[2].expr}
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.joinTableExpr = &JoinTableExpr{Using: yyDollar[3].columnList}
		}
	case 39:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.where = nil
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.where = NewWhere(WhereStr, yyDollar[2].expr)
		}
	case 41:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exprs = nil
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.where = nil
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.where = NewWhere(HavingStr, yyDollar[2].expr)
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.orderBy = nil
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].orderingTerm}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].orderingTerm)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.orderingTerm = &OrderingTerm{Expr: yyDollar[1].expr, Direction: yyDollar[2].string, Nulls: yyDollar[3].nulls}
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = AscStr
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = AscStr
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = DescStr
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.nulls = NullsNil
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.nulls = NullsFirst
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.nulls = NullsLast
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.limit = nil
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.limit = &Limit{Limit: yyDollar[2].expr}
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Limit: yyDollar[4].expr}
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Limit: yyDollar[2].expr}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.table = &Table{Name: Identifier(string(yyDollar[1].bytes))}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].column
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyDollar[3].column.TableRef = yyDollar[1].table
			yyVAL.expr = yyDollar[3].column
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ConcatStr, Right: yyDollar[3].expr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr}
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr, Escape: yyDollar[5].expr}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			if value, ok := yyDollar[2].expr.(*Value); ok && value.Type == IntValue {
				yyVAL.expr = &Value{Type: IntValue, Value: append([]byte("-"), value.Value...)}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &IsExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.expr = &IsExpr{Left: yyDollar[1].expr, Right: &NotExpr{Expr: yyDollar[4].expr}}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &IsNullExpr{Expr: yyDollar[1].expr}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &NotNullExpr{Expr: yyDollar[1].expr}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &NotNullExpr{Expr: yyDollar[1].expr}
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.expr = &BetweenExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, CollationName: string(yyDollar[3].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 97:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].value
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &Value{Type: StrValue, Value: yyDollar[1].bytes[1 : len(yyDollar[1].bytes)-1]}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &Value{Type: BlobValue, Value: yyDollar[1].bytes}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = BoolValue(true)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = BoolValue(false)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &NullValue{}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if len(yyDollar[1].bytes) > MaxColumnNameLength {
				yylex.Error(__yyfmt__.Sprintf("column length greater than %d", MaxColumnNameLength))
				return 1
			}
			yyVAL.column = &Column{Name: Identifier(string(yyDollar[1].bytes))}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnList = ColumnList{yyDollar[1].column}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnList = append(yyDollar[1].columnList, yyDollar[3].column)
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = EqualStr
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = NotEqualStr
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = RegexpStr
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotRegexpStr
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = GlobStr
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotGlobStr
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = MatchStr
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotMatchStr
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = LessThanStr
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = GreaterThanStr
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = LessEqualStr
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = GreaterEqualStr
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = LikeStr
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotLikeStr
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = BetweenStr
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotBetweenStr
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = NoneStr
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = TextStr
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = RealStr
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = IntegerStr
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = NumericStr
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.colTuple = Exprs{}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.colTuple = yyDollar[2].exprs
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.subquery = &Subquery{Select: yyDollar[2].selectStmt}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &NotExpr{Expr: &ExistsExpr{Subquery: yyDollar[3].subquery}}
		}
	case 136:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.expr = &FuncExpr{Name: Identifier("glob"), Args: Exprs{yyDollar[3].expr, yyDollar[5].expr}}
		}
	case 137:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.expr = &FuncExpr{Name: Identifier("like"), Args: Exprs{yyDollar[3].expr, yyDollar[5].expr}}
		}
	case 138:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.expr = &FuncExpr{Name: Identifier("like"), Args: Exprs{yyDollar[3].expr, yyDollar[5].expr, yyDollar[7].expr}}
		}
	case 139:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			if _, ok := AllowedFunctions[string(yyDollar[1].bytes)]; !ok {
				yylex.Error(__yyfmt__.Sprintf("no such function: %s,", string(yyDollar[1].bytes)))
				return 1
			}
			yyVAL.expr = &FuncExpr{Name: Identifier(string(yyDollar[1].bytes)), Distinct: yyDollar[3].bool, Args: yyDollar[4].exprs, Filter: yyDollar[6].where}
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			if _, ok := AllowedFunctions[string(yyDollar[1].bytes)]; !ok {
				yylex.Error(__yyfmt__.Sprintf("no such function: %s,", string(yyDollar[1].bytes)))
				return 1
			}
			yyVAL.expr = &FuncExpr{Name: Identifier(string(yyDollar[1].bytes)), Distinct: false, Args: nil, Filter: yyDollar[5].where}
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.bool = false
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.bool = true
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exprs = nil
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.where = nil
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.where = &Where{Type: WhereStr, Expr: yyDollar[4].expr}
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.expr = nil
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.when = &When{Condition: yyDollar[2].expr, Value: yyDollar[4].expr}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.expr = nil
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 156:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.createTableStmt = &CreateTable{Table: yyDollar[3].table, Columns: yyDollar[5].columnDefList, Constraints: yyDollar[6].tableConstraints}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnDefList = []*ColumnDef{yyDollar[1].columnDef}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnDefList = append(yyDollar[1].columnDefList, yyDollar[3].columnDef)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnDef = &ColumnDef{Name: yyDollar[1].column, Type: yyDollar[2].string, Constraints: yyDollar[3].columnConstraints}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeIntStr
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeIntegerStr
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeRealStr
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeTextStr
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeBlobStr
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeAnyStr
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.columnConstraints = []ColumnConstraint{}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnConstraints = yyDollar[1].columnConstraints
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnConstraints = []ColumnConstraint{yyDollar[1].columnConstraint}
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.columnConstraints = append(yyDollar[1].columnConstraints, yyDollar[2].columnConstraint)
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintPrimaryKey{Name: yyDollar[1].identifier, Order: yyDollar[4].string}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintNotNull{Name: yyDollar[1].identifier}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintUnique{Name: yyDollar[1].identifier}
		}
	case 173:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintCheck{Name: yyDollar[1].identifier, Expr: yyDollar[4].expr}
		}
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintDefault{Name: yyDollar[1].identifier, Expr: yyDollar[4].expr, Parenthesis: true}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintDefault{Name: yyDollar[1].identifier, Expr: yyDollar[3].expr}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintDefault{Name: yyDollar[1].identifier, Expr: yyDollar[3].expr}
		}
	case 177:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintGenerated{Name: yyDollar[1].identifier, Expr: yyDollar[6].expr, GeneratedAlways: true, IsStored: yyDollar[8].bool}
		}
	case 178:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintGenerated{Name: yyDollar[1].identifier, Expr: yyDollar[4].expr, GeneratedAlways: false, IsStored: yyDollar[6].bool}
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.identifier = Identifier("")
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.identifier = Identifier(string(yyDollar[2].bytes))
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = ColumnConstraintPrimaryKeyOrderEmpty
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = ColumnConstraintPrimaryKeyOrderAsc
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = ColumnConstraintPrimaryKeyOrderDesc
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = yyDollar[2].value
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyDollar[2].value.Value = append([]byte("-"), yyDollar[2].value.Value...)
			yyVAL.expr = yyDollar[2].value
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Value{Type: IntValue, Value: yyDollar[1].bytes}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Value{Type: FloatValue, Value: yyDollar[1].bytes}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Value{Type: HexNumValue, Value: yyDollar[1].bytes}
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.bool = false
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.bool = true
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.bool = false
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.tableConstraints = []TableConstraint{}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tableConstraints = yyDollar[1].tableConstraints
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tableConstraints = []TableConstraint{yyDollar[2].tableConstraint}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tableConstraints = append(yyDollar[1].tableConstraints, yyDollar[3].tableConstraint)
		}
	case 196:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.tableConstraint = &TableConstraintPrimaryKey{Name: yyDollar[1].identifier, Columns: yyDollar[5].columnList}
		}
	case 197:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.tableConstraint = &TableConstraintUnique{Name: yyDollar[1].identifier, Columns: yyDollar[4].columnList}
		}
	case 198:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.tableConstraint = &TableConstraintCheck{Name: yyDollar[1].identifier, Expr: yyDollar[4].expr}
		}
	case 199:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.insertStmt = &Insert{Table: yyDollar[3].table, Columns: yyDollar[5].columnList, Rows: yyDollar[8].insertRows}
		}
	case 200:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.insertStmt = &Insert{Table: yyDollar[3].table, Columns: ColumnList{}, Rows: []Exprs{}, DefaultValues: true}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.insertRows = []Exprs{yyDollar[2].exprs}
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.insertRows = append(yyDollar[1].insertRows, yyDollar[4].exprs)
		}
	}
	goto yystack /* stack new state and value */
}
