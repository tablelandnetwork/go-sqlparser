// Code generated by goyacc -l -o yy_parser.go grammar.y. DO NOT EDIT.
package sqlparser

import __yyfmt__ "fmt"

const MaxColumnNameLength = 64

type yySymType struct {
	yys              int
	bool             bool
	string           string
	bytes            []byte
	expr             Expr
	exprs            Exprs
	column           *Column
	table            *Table
	convertType      ConvertType
	when             *When
	whens            []*When
	SelectColumn     SelectColumn
	SelectColumnList SelectColumnList
	selectStmt       *Select
	where            *Where
	limit            *Limit
	orderBy          OrderBy
	orderingTerm     *OrderingTerm
	nulls            NullsType
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGRAL = 57348
const HEXNUM = 57349
const FLOAT = 57350
const BLOB = 57351
const ERROR = 57352
const TRUE = 57353
const FALSE = 57354
const NULL = 57355
const AND = 57356
const NONE = 57357
const INTEGER = 57358
const NUMERIC = 57359
const REAL = 57360
const TEXT = 57361
const CAST = 57362
const AS = 57363
const CASE = 57364
const WHEN = 57365
const THEN = 57366
const ELSE = 57367
const END = 57368
const SELECT = 57369
const FROM = 57370
const WHERE = 57371
const GROUP = 57372
const BY = 57373
const HAVING = 57374
const LIMIT = 57375
const OFFSET = 57376
const ORDER = 57377
const ASC = 57378
const DESC = 57379
const NULLS = 57380
const FIRST = 57381
const LAST = 57382
const DISTINCT = 57383
const ALL = 57384
const OR = 57385
const ANDOP = 57386
const NOT = 57387
const IS = 57388
const MATCH = 57389
const GLOB = 57390
const REGEXP = 57391
const LIKE = 57392
const BETWEEN = 57393
const IN = 57394
const ISNULL = 57395
const NOTNULL = 57396
const NE = 57397
const LE = 57398
const GE = 57399
const INEQUALITY = 57400
const ESCAPE = 57401
const LSHIFT = 57402
const RSHIFT = 57403
const CONCAT = 57404
const JSON_EXTRACT_OP = 57405
const JSON_UNQUOTE_EXTRACT_OP = 57406
const COLLATE = 57407
const UNARY = 57408

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGRAL",
	"HEXNUM",
	"FLOAT",
	"BLOB",
	"ERROR",
	"TRUE",
	"FALSE",
	"NULL",
	"AND",
	"'('",
	"','",
	"')'",
	"'.'",
	"NONE",
	"INTEGER",
	"NUMERIC",
	"REAL",
	"TEXT",
	"CAST",
	"AS",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"SELECT",
	"FROM",
	"WHERE",
	"GROUP",
	"BY",
	"HAVING",
	"LIMIT",
	"OFFSET",
	"ORDER",
	"ASC",
	"DESC",
	"NULLS",
	"FIRST",
	"LAST",
	"DISTINCT",
	"ALL",
	"OR",
	"ANDOP",
	"NOT",
	"IS",
	"MATCH",
	"GLOB",
	"REGEXP",
	"LIKE",
	"BETWEEN",
	"IN",
	"ISNULL",
	"NOTNULL",
	"NE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"INEQUALITY",
	"ESCAPE",
	"'&'",
	"'|'",
	"LSHIFT",
	"RSHIFT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"CONCAT",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"COLLATE",
	"'~'",
	"UNARY",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 20,
	18, 37,
	-2, 80,
}

const yyPrivate = 57344

const yyLast = 608

var yyAct = [...]uint8{
	10, 161, 78, 117, 55, 173, 13, 35, 36, 37,
	42, 43, 44, 55, 114, 72, 74, 75, 77, 79,
	38, 39, 40, 41, 33, 34, 35, 36, 37, 42,
	43, 44, 55, 153, 84, 85, 86, 87, 88, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 157, 163, 148, 109, 63, 64, 65, 66,
	56, 124, 38, 39, 40, 41, 33, 34, 35, 36,
	37, 42, 43, 44, 55, 164, 5, 6, 113, 174,
	175, 121, 158, 112, 49, 48, 53, 50, 62, 61,
	60, 67, 68, 134, 51, 52, 59, 58, 63, 64,
	65, 66, 149, 125, 38, 39, 40, 41, 33, 34,
	35, 36, 37, 42, 43, 44, 55, 123, 111, 130,
	128, 131, 113, 73, 135, 136, 31, 137, 11, 8,
	139, 103, 69, 70, 42, 43, 44, 55, 3, 138,
	118, 150, 30, 118, 115, 129, 120, 119, 151, 154,
	79, 71, 155, 57, 81, 11, 165, 120, 159, 162,
	80, 83, 69, 70, 169, 170, 162, 171, 114, 106,
	105, 104, 107, 108, 110, 49, 48, 53, 50, 62,
	61, 60, 67, 68, 82, 51, 52, 59, 58, 63,
	64, 65, 66, 1, 172, 38, 39, 40, 41, 33,
	34, 35, 36, 37, 42, 43, 44, 55, 167, 168,
	142, 145, 146, 144, 143, 49, 48, 53, 50, 62,
	61, 60, 67, 68, 160, 51, 52, 59, 58, 63,
	64, 65, 66, 140, 152, 38, 39, 40, 41, 33,
	34, 35, 36, 37, 42, 43, 44, 55, 156, 116,
	141, 147, 49, 48, 53, 50, 62, 61, 60, 67,
	68, 122, 51, 52, 59, 58, 63, 64, 65, 66,
	132, 7, 38, 39, 40, 41, 33, 34, 35, 36,
	37, 42, 43, 44, 55, 32, 4, 166, 54, 47,
	46, 45, 49, 48, 53, 50, 62, 61, 60, 67,
	68, 126, 51, 52, 59, 58, 63, 64, 65, 66,
	133, 127, 38, 39, 40, 41, 33, 34, 35, 36,
	37, 42, 43, 44, 55, 33, 34, 35, 36, 37,
	42, 43, 44, 55, 49, 48, 53, 50, 62, 61,
	60, 67, 68, 76, 51, 52, 59, 58, 63, 64,
	65, 66, 19, 12, 38, 39, 40, 41, 33, 34,
	35, 36, 37, 42, 43, 44, 55, 49, 48, 53,
	50, 62, 61, 60, 67, 68, 2, 51, 52, 59,
	58, 63, 64, 65, 66, 0, 0, 38, 39, 40,
	41, 33, 34, 35, 36, 37, 42, 43, 44, 55,
	48, 53, 50, 62, 61, 60, 67, 68, 0, 51,
	52, 59, 58, 63, 64, 65, 66, 0, 0, 38,
	39, 40, 41, 33, 34, 35, 36, 37, 42, 43,
	44, 55, 53, 50, 62, 61, 60, 67, 68, 0,
	51, 52, 59, 58, 63, 64, 65, 66, 0, 0,
	38, 39, 40, 41, 33, 34, 35, 36, 37, 42,
	43, 44, 55, 63, 64, 65, 66, 0, 0, 38,
	39, 40, 41, 33, 34, 35, 36, 37, 42, 43,
	44, 55, 20, 21, 22, 25, 23, 24, 0, 26,
	27, 28, 0, 18, 0, 0, 0, 0, 0, 0,
	0, 0, 29, 0, 17, 0, 20, 21, 22, 25,
	23, 24, 0, 26, 27, 28, 0, 18, 0, 0,
	0, 0, 0, 0, 0, 0, 29, 102, 17, 0,
	0, 20, 21, 22, 25, 23, 24, 0, 26, 27,
	28, 0, 18, 0, 0, 0, 0, 0, 0, 15,
	14, 29, 0, 17, 0, 0, 0, 0, 16, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 15, 14, 9, 0, 0, 0, 0,
	0, 0, 16, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 15, 14,
	0, 0, 0, 0, 0, 0, 0, 16,
}

var yyPact = [...]int16{
	107, -1000, -1000, 31, 502, -1000, -1000, 110, -1000, -1000,
	128, 133, -1000, -1000, 527, 527, 527, 527, 527, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 145,
	180, 502, -1000, 527, 527, 527, 527, 527, 527, 527,
	527, 527, 527, 527, 527, 527, 527, 527, 527, 527,
	478, -1000, -1000, 118, 527, 170, -1000, 158, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10, -1000, 126, -1000, -1000, 113, 320, 130, 320,
	527, 84, -1000, -1000, -66, -66, 58, 58, 58, 254,
	254, 254, 254, -75, -75, -75, 402, -47, -5, 383,
	352, 402, 527, -1000, -1000, -1000, -1000, -1000, -1000, 287,
	-1000, -1000, -1000, -1000, -1000, 164, 116, -1000, 527, -1000,
	527, 245, 59, 527, 527, 383, 527, 109, -1000, 527,
	205, 320, 191, 18, 67, 320, 402, 402, -1000, 320,
	527, 131, -1000, -1000, -1000, -1000, -1000, -6, 527, 527,
	320, -1000, 15, 47, 320, 141, -1000, 527, 527, 37,
	140, -1000, 168, 527, 527, 527, -37, -1000, -1000, 320,
	320, -1000, -1000, 36, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 376, 0, 353, 352, 343, 311, 2, 310, 291,
	290, 289, 288, 287, 286, 6, 285, 60, 129, 271,
	123, 261, 251, 250, 3, 249, 248, 234, 224, 1,
	194, 193,
}

var yyR1 = [...]int8{
	0, 31, 1, 14, 14, 14, 19, 19, 18, 18,
	18, 16, 16, 16, 17, 17, 21, 21, 8, 8,
	22, 22, 27, 27, 28, 28, 29, 13, 13, 13,
	30, 30, 30, 26, 26, 26, 26, 20, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	15, 9, 9, 9, 9, 9, 9, 9, 9, 10,
	10, 10, 10, 11, 11, 12, 12, 23, 23, 23,
	23, 23, 4, 7, 7, 5, 5, 24, 25, 25,
	6, 6,
}

var yyR2 = [...]int8{
	0, 1, 10, 0, 1, 1, 1, 3, 1, 2,
	3, 0, 1, 2, 1, 1, 0, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 3, 0, 1, 1,
	0, 2, 2, 0, 2, 4, 4, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 4, 2, 2, 3, 5, 5, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 6, 1, 3, 0, 1, 4, 1, 2,
	0, 2,
}

var yyChk = [...]int16{
	-1000, -31, -1, 31, -14, 45, 46, -19, -18, 73,
	-2, -20, -3, -15, 72, 71, 80, 26, 15, -4,
	4, 5, 6, 8, 9, 7, 11, 12, 13, 24,
	32, 16, -16, 71, 72, 73, 74, 75, 67, 68,
	69, 70, 76, 77, 78, -9, -10, -11, 48, 47,
	50, 57, 58, 49, -12, 79, -17, 25, 60, 59,
	53, 52, 51, 61, 62, 63, 64, 54, 55, 4,
	5, 18, -2, -20, -2, -2, -5, -2, -7, -2,
	15, -20, 4, -18, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 49, 13, 53, 52, 51, 54, 55, -2,
	4, -17, 73, -15, 4, 18, -25, -24, 27, 17,
	16, -2, -21, 33, 66, -2, 14, -6, -24, 29,
	-2, -2, 25, -8, 34, -2, -2, -2, 30, -2,
	28, -23, 19, 23, 22, 20, 21, -22, 36, 35,
	-2, 17, -27, 39, -2, -7, -26, 37, 35, -2,
	-28, -29, -2, 16, 38, 16, -13, 40, 41, -2,
	-2, -29, -30, 42, 43, 44,
}

var yyDef = [...]int8{
	0, -2, 1, 3, 0, 4, 5, 0, 6, 8,
	11, 0, 38, 39, 0, 0, 0, 105, 0, 71,
	-2, 72, 73, 74, 75, 76, 77, 78, 79, 0,
	0, 0, 9, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 64, 65, 0, 0, 0, 12, 0, 81, 82,
	83, 85, 87, 89, 90, 91, 92, 93, 95, 14,
	15, 0, 57, 0, 58, 59, 0, 106, 0, 103,
	0, 16, 37, 7, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 60,
	61, 62, 0, 66, 84, 86, 88, 94, 96, 0,
	69, 13, 10, 40, 80, 0, 110, 108, 0, 70,
	0, 0, 18, 0, 0, 63, 0, 0, 109, 0,
	0, 104, 0, 20, 0, 17, 56, 67, 68, 111,
	0, 0, 97, 98, 99, 100, 101, 22, 0, 0,
	107, 102, 33, 0, 21, 19, 2, 0, 0, 34,
	23, 24, 27, 0, 0, 0, 30, 28, 29, 35,
	36, 25, 26, 0, 31, 32,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 75, 67, 3,
	15, 17, 73, 71, 16, 72, 18, 74, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	61, 60, 62, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 68, 3, 80,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 19, 20, 21, 22, 23, 24, 25,
	26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 63, 64, 65, 66, 69, 70,
	76, 77, 78, 79, 81,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).ast = &AST{yyDollar[1].selectStmt}
		}
	case 2:
		yyDollar = yyS[yypt-10 : yypt+1]
		{
			yyVAL.selectStmt = &Select{
				Distinct:         yyDollar[2].string,
				SelectColumnList: yyDollar[3].SelectColumnList,
				From:             yyDollar[5].table,
				Where:            yyDollar[6].where,
				GroupBy:          GroupBy(yyDollar[7].exprs),
				Having:           yyDollar[8].where,
				OrderBy:          yyDollar[9].orderBy,
				Limit:            yyDollar[10].limit,
			}
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = ""
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = DistinctStr
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = AllStr
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.SelectColumnList = SelectColumnList{yyDollar[1].SelectColumn}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.SelectColumnList = append(yyDollar[1].SelectColumnList, yyDollar[3].SelectColumn)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.SelectColumn = &StarSelectColumn{}
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.SelectColumn = &AliasedSelectColumn{Expr: yyDollar[1].expr, As: yyDollar[2].column}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.SelectColumn = &StarSelectColumn{TableRef: yyDollar[1].table}
		}
	case 11:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.column = nil
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.column = yyDollar[1].column
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.column = yyDollar[2].column
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.column = &Column{Name: string(yyDollar[1].bytes)}
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.column = &Column{Name: string(yyDollar[1].bytes)}
		}
	case 16:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.where = nil
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.where = NewWhere(WhereStr, yyDollar[2].expr)
		}
	case 18:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exprs = nil
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 20:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.where = nil
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.where = NewWhere(HavingStr, yyDollar[2].expr)
		}
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.orderBy = nil
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].orderingTerm}
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].orderingTerm)
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.orderingTerm = &OrderingTerm{Expr: yyDollar[1].expr, Direction: yyDollar[2].string, Nulls: yyDollar[3].nulls}
		}
	case 27:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = AscStr
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = AscStr
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = DescStr
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.nulls = NullsNil
		}
	case 31:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.nulls = NullsFirst
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.nulls = NullsLast
		}
	case 33:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.limit = nil
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.limit = &Limit{Limit: yyDollar[2].expr}
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Limit: yyDollar[4].expr}
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Limit: yyDollar[2].expr}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.table = &Table{Name: string(yyDollar[1].bytes)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].column
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyDollar[3].column.TableRef = yyDollar[1].table
			yyVAL.expr = yyDollar[3].column
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ConcatStr, Right: yyDollar[3].expr}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr, Escape: yyDollar[5].expr}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			if value, ok := yyDollar[2].expr.(*Value); ok && value.Type == IntValue {
				yyVAL.expr = &Value{Type: IntValue, Value: append([]byte("-"), value.Value...)}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &IsExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.expr = &IsExpr{Left: yyDollar[1].expr, Right: &NotExpr{Expr: yyDollar[4].expr}}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &IsNullExpr{Expr: yyDollar[1].expr}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &NotNullExpr{Expr: yyDollar[1].expr}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &NotNullExpr{Expr: yyDollar[1].expr}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.expr = &BetweenExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, CollationName: string(yyDollar[3].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = yyDollar[2].exprs
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &Value{Type: StrValue, Value: yyDollar[1].bytes[1 : len(yyDollar[1].bytes)-1]}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &Value{Type: IntValue, Value: yyDollar[1].bytes}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &Value{Type: FloatValue, Value: yyDollar[1].bytes}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &Value{Type: BlobValue, Value: yyDollar[1].bytes}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &Value{Type: HexNumValue, Value: yyDollar[1].bytes}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = BoolValue(true)
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = BoolValue(false)
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &NullValue{}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if len(yyDollar[1].bytes) > MaxColumnNameLength {
				yylex.Error(__yyfmt__.Sprintf("column length greater than %d", MaxColumnNameLength))
				return 1
			}
			yyVAL.column = &Column{Name: string(yyDollar[1].bytes)}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = EqualStr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = NotEqualStr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = RegexpStr
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotRegexpStr
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = GlobStr
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotGlobStr
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = MatchStr
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotMatchStr
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = LessThanStr
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = GreaterThanStr
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = LessEqualStr
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = GreaterEqualStr
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = LikeStr
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotLikeStr
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = BetweenStr
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotBetweenStr
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = NoneStr
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = TextStr
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = RealStr
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = IntegerStr
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = NumericStr
		}
	case 102:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.expr = nil
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.when = &When{Condition: yyDollar[2].expr, Value: yyDollar[4].expr}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.expr = nil
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = yyDollar[2].expr
		}
	}
	goto yystack /* stack new state and value */
}
