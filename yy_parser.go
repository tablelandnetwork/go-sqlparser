// Code generated by goyacc -l -o yy_parser.go grammar.y. DO NOT EDIT.
package sqlparser

import __yyfmt__ "fmt"

const MaxColumnNameLength = 64

type yySymType struct {
	yys              int
	bool             bool
	string           string
	bytes            []byte
	expr             Expr
	exprs            Exprs
	column           *Column
	table            *Table
	convertType      ConvertType
	when             *When
	whens            []*When
	SelectColumn     SelectColumn
	SelectColumnList SelectColumnList
	selectStmt       *Select
	where            *Where
	limit            *Limit
	orderBy          OrderBy
	orderingTerm     *OrderingTerm
	nulls            NullsType
	tableExprList    TableExprList
	tableExpr        TableExpr
	joinTableExpr    *JoinTableExpr
	columnList       ColumnList
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGRAL = 57348
const HEXNUM = 57349
const FLOAT = 57350
const BLOB = 57351
const ERROR = 57352
const TRUE = 57353
const FALSE = 57354
const NULL = 57355
const AND = 57356
const NONE = 57357
const INTEGER = 57358
const NUMERIC = 57359
const REAL = 57360
const TEXT = 57361
const CAST = 57362
const AS = 57363
const CASE = 57364
const WHEN = 57365
const THEN = 57366
const ELSE = 57367
const END = 57368
const SELECT = 57369
const FROM = 57370
const WHERE = 57371
const GROUP = 57372
const BY = 57373
const HAVING = 57374
const LIMIT = 57375
const OFFSET = 57376
const ORDER = 57377
const ASC = 57378
const DESC = 57379
const NULLS = 57380
const FIRST = 57381
const LAST = 57382
const DISTINCT = 57383
const ALL = 57384
const JOIN = 57385
const ON = 57386
const USING = 57387
const OR = 57388
const ANDOP = 57389
const NOT = 57390
const IS = 57391
const MATCH = 57392
const GLOB = 57393
const REGEXP = 57394
const LIKE = 57395
const BETWEEN = 57396
const IN = 57397
const ISNULL = 57398
const NOTNULL = 57399
const NE = 57400
const LE = 57401
const GE = 57402
const INEQUALITY = 57403
const ESCAPE = 57404
const LSHIFT = 57405
const RSHIFT = 57406
const CONCAT = 57407
const JSON_EXTRACT_OP = 57408
const JSON_UNQUOTE_EXTRACT_OP = 57409
const COLLATE = 57410
const UNARY = 57411

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGRAL",
	"HEXNUM",
	"FLOAT",
	"BLOB",
	"ERROR",
	"TRUE",
	"FALSE",
	"NULL",
	"AND",
	"'('",
	"','",
	"')'",
	"'.'",
	"NONE",
	"INTEGER",
	"NUMERIC",
	"REAL",
	"TEXT",
	"CAST",
	"AS",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"SELECT",
	"FROM",
	"WHERE",
	"GROUP",
	"BY",
	"HAVING",
	"LIMIT",
	"OFFSET",
	"ORDER",
	"ASC",
	"DESC",
	"NULLS",
	"FIRST",
	"LAST",
	"DISTINCT",
	"ALL",
	"JOIN",
	"ON",
	"USING",
	"OR",
	"ANDOP",
	"NOT",
	"IS",
	"MATCH",
	"GLOB",
	"REGEXP",
	"LIKE",
	"BETWEEN",
	"IN",
	"ISNULL",
	"NOTNULL",
	"NE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"INEQUALITY",
	"ESCAPE",
	"'&'",
	"'|'",
	"LSHIFT",
	"RSHIFT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"CONCAT",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"COLLATE",
	"'~'",
	"UNARY",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 20,
	18, 55,
	-2, 98,
}

const yyPrivate = 57344

const yyLast = 681

var yyAct = [...]uint8{
	10, 13, 191, 135, 177, 79, 87, 136, 124, 56,
	86, 43, 44, 45, 56, 73, 75, 76, 78, 80,
	39, 40, 41, 42, 34, 35, 36, 37, 38, 43,
	44, 45, 56, 178, 179, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 85, 134, 121, 116, 2, 74, 161,
	133, 5, 6, 11, 34, 35, 36, 37, 38, 43,
	44, 45, 56, 207, 120, 36, 37, 38, 43, 44,
	45, 56, 128, 57, 131, 174, 209, 210, 153, 133,
	11, 88, 49, 54, 51, 63, 62, 61, 68, 69,
	142, 52, 53, 60, 59, 64, 65, 66, 67, 185,
	144, 39, 40, 41, 42, 34, 35, 36, 37, 38,
	43, 44, 45, 56, 120, 186, 149, 119, 150, 110,
	154, 130, 147, 83, 8, 31, 3, 164, 125, 155,
	156, 157, 118, 141, 162, 158, 163, 140, 88, 165,
	90, 32, 202, 201, 175, 80, 125, 122, 148, 72,
	176, 89, 180, 181, 70, 71, 84, 182, 138, 139,
	113, 112, 111, 114, 115, 132, 160, 3, 197, 187,
	168, 171, 172, 170, 169, 58, 189, 192, 183, 137,
	194, 88, 88, 88, 127, 126, 203, 204, 192, 159,
	205, 127, 132, 188, 208, 81, 138, 139, 90, 121,
	50, 49, 54, 51, 63, 62, 61, 68, 69, 89,
	52, 53, 60, 59, 64, 65, 66, 67, 70, 71,
	39, 40, 41, 42, 34, 35, 36, 37, 38, 43,
	44, 45, 56, 199, 200, 117, 1, 193, 30, 206,
	190, 173, 184, 50, 49, 54, 51, 63, 62, 61,
	68, 69, 123, 52, 53, 60, 59, 64, 65, 66,
	67, 195, 167, 39, 40, 41, 42, 34, 35, 36,
	37, 38, 43, 44, 45, 56, 152, 82, 7, 33,
	4, 198, 55, 196, 48, 47, 46, 129, 146, 77,
	19, 12, 0, 0, 0, 50, 49, 54, 51, 63,
	62, 61, 68, 69, 0, 52, 53, 60, 59, 64,
	65, 66, 67, 166, 0, 39, 40, 41, 42, 34,
	35, 36, 37, 38, 43, 44, 45, 56, 0, 0,
	0, 0, 0, 0, 0, 50, 49, 54, 51, 63,
	62, 61, 68, 69, 151, 52, 53, 60, 59, 64,
	65, 66, 67, 0, 0, 39, 40, 41, 42, 34,
	35, 36, 37, 38, 43, 44, 45, 56, 145, 50,
	49, 54, 51, 63, 62, 61, 68, 69, 0, 52,
	53, 60, 59, 64, 65, 66, 67, 0, 0, 39,
	40, 41, 42, 34, 35, 36, 37, 38, 43, 44,
	45, 56, 0, 0, 50, 49, 54, 51, 63, 62,
	61, 68, 69, 0, 52, 53, 60, 59, 64, 65,
	66, 67, 0, 0, 39, 40, 41, 42, 34, 35,
	36, 37, 38, 43, 44, 45, 56, 50, 49, 54,
	51, 63, 62, 61, 68, 69, 0, 52, 53, 60,
	59, 64, 65, 66, 67, 0, 0, 39, 40, 41,
	42, 34, 35, 36, 37, 38, 43, 44, 45, 56,
	54, 51, 63, 62, 61, 68, 69, 0, 52, 53,
	60, 59, 64, 65, 66, 67, 0, 0, 39, 40,
	41, 42, 34, 35, 36, 37, 38, 43, 44, 45,
	56, 64, 65, 66, 67, 0, 143, 39, 40, 41,
	42, 34, 35, 36, 37, 38, 43, 44, 45, 56,
	64, 65, 66, 67, 0, 0, 39, 40, 41, 42,
	34, 35, 36, 37, 38, 43, 44, 45, 56, 20,
	21, 22, 25, 23, 24, 0, 26, 27, 28, 0,
	18, 0, 0, 0, 0, 0, 0, 0, 0, 29,
	0, 17, 20, 21, 22, 25, 23, 24, 0, 26,
	27, 28, 0, 18, 0, 0, 0, 0, 0, 0,
	0, 0, 29, 0, 17, 0, 0, 109, 0, 0,
	0, 20, 21, 22, 25, 23, 24, 0, 26, 27,
	28, 0, 18, 0, 0, 0, 0, 0, 0, 15,
	14, 29, 0, 17, 0, 0, 0, 0, 16, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 15, 14, 9, 0, 0, 0, 0, 0,
	0, 16, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 15, 14, 0, 0, 0, 0, 0, 0, 0,
	16,
}

var yyPact = [...]int16{
	105, -1000, -1000, 16, 568, -1000, -1000, 119, -1000, -1000,
	160, 141, -1000, -1000, 597, 597, 597, 597, 597, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 190,
	100, 568, 204, -1000, 597, 597, 597, 597, 597, 597,
	597, 597, 597, 597, 597, 597, 597, 597, 597, 597,
	597, 545, -1000, -1000, 116, 597, 241, -1000, 224, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 51, -1000, 139, -1000, -1000, 111, 397, 178,
	397, 597, 97, 597, -1000, 186, 13, 7, 164, 146,
	-1000, -1, -1, -68, -68, -68, -10, -10, -10, -10,
	-73, -73, -73, 466, -50, 447, 428, 41, 466, 597,
	-1000, -1000, -1000, -1000, -1000, -1000, 364, -1000, -1000, -1000,
	-1000, -1000, 205, 129, -1000, 597, -1000, 597, 329, 52,
	95, 397, 204, 204, 204, -1000, -1000, 202, -1000, -1000,
	182, 159, 42, 597, 428, 597, 107, -1000, 597, 295,
	397, 161, 46, 597, 597, -1000, -15, -15, -1000, 164,
	-1000, -1000, 466, 466, -1000, 397, 597, 171, -1000, -1000,
	-1000, -1000, -1000, 72, 90, 397, 185, -1000, 597, 188,
	-1000, -1000, 397, -1000, -1000, 597, 597, 397, 205, 255,
	162, -1000, 203, 136, -1000, 597, 597, 597, 31, -1000,
	-1000, -1000, 205, 397, 397, -1000, -1000, 43, -1000, -1000,
	-1000,
}

var yyPgo = [...]int16{
	0, 57, 0, 301, 300, 299, 298, 5, 297, 296,
	295, 294, 292, 291, 290, 1, 289, 83, 134, 288,
	58, 3, 7, 287, 286, 272, 8, 262, 252, 251,
	250, 2, 249, 53, 248, 6, 10, 4, 247, 246,
}

var yyR1 = [...]int8{
	0, 39, 1, 14, 14, 14, 19, 19, 18, 18,
	18, 16, 16, 16, 17, 17, 34, 34, 33, 33,
	35, 35, 35, 35, 21, 21, 21, 22, 22, 36,
	36, 37, 37, 37, 23, 23, 8, 8, 24, 24,
	29, 29, 30, 30, 31, 13, 13, 13, 32, 32,
	32, 28, 28, 28, 28, 20, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 15, 38,
	38, 9, 9, 9, 9, 9, 9, 9, 9, 10,
	10, 10, 10, 11, 11, 12, 12, 25, 25, 25,
	25, 25, 4, 7, 7, 5, 5, 26, 27, 27,
	6, 6,
}

var yyR2 = [...]int8{
	0, 1, 9, 0, 1, 1, 1, 3, 1, 2,
	3, 0, 1, 2, 1, 1, 2, 2, 1, 3,
	2, 4, 3, 3, 0, 1, 2, 1, 1, 4,
	4, 0, 2, 4, 0, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 3, 0, 1, 1, 0, 2,
	2, 0, 2, 4, 4, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 4, 2, 2, 3, 5, 5, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 6, 1, 3, 0, 1, 4, 1, 2,
	0, 2,
}

var yyChk = [...]int16{
	-1000, -39, -1, 31, -14, 45, 46, -19, -18, 76,
	-2, -20, -3, -15, 75, 74, 83, 26, 15, -4,
	4, 5, 6, 8, 9, 7, 11, 12, 13, 24,
	-34, 16, 32, -16, 74, 75, 76, 77, 78, 70,
	71, 72, 73, 79, 80, 81, -9, -10, -11, 51,
	50, 53, 60, 61, 52, -12, 82, -17, 25, 63,
	62, 56, 55, 54, 64, 65, 66, 67, 57, 58,
	4, 5, 18, -2, -20, -2, -2, -5, -2, -7,
	-2, 15, -23, 33, -18, -33, -36, -35, -20, 15,
	4, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 52,
	13, 56, 55, 54, 57, 58, -2, 4, -17, 76,
	-15, 4, 18, -27, -26, 27, 17, 16, -2, -8,
	34, -2, 16, 47, 47, -21, -22, 25, 4, 5,
	-1, -33, -36, 69, -2, 14, -6, -26, 29, -2,
	-2, 25, -24, 36, 35, -35, -35, -35, -22, 17,
	17, 17, -2, -2, 30, -2, 28, -25, 19, 23,
	22, 20, 21, -29, 39, -2, -7, -37, 48, 49,
	-37, -21, -2, 17, -28, 37, 35, -2, 15, -2,
	-30, -31, -2, -38, -15, 16, 38, 16, -13, 40,
	41, 17, 16, -2, -2, -31, -32, 42, -15, 43,
	44,
}

var yyDef = [...]int16{
	0, -2, 1, 3, 0, 4, 5, 0, 6, 8,
	11, 0, 56, 57, 0, 0, 0, 125, 0, 89,
	-2, 90, 91, 92, 93, 94, 95, 96, 97, 0,
	34, 0, 0, 9, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 83, 0, 0, 0, 12, 0, 101,
	102, 103, 105, 107, 109, 110, 111, 112, 113, 115,
	14, 15, 0, 75, 0, 76, 77, 0, 126, 0,
	123, 0, 36, 0, 7, 16, 17, 18, 24, 0,
	55, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 78, 79, 80, 0,
	84, 104, 106, 108, 114, 116, 0, 87, 13, 10,
	58, 98, 0, 130, 128, 0, 88, 0, 0, 38,
	0, 35, 0, 0, 0, 20, 25, 0, 27, 28,
	0, 0, 0, 0, 81, 0, 0, 129, 0, 0,
	124, 0, 40, 0, 0, 19, 31, 31, 26, 24,
	22, 23, 74, 85, 86, 131, 0, 0, 117, 118,
	119, 120, 121, 51, 0, 39, 37, 30, 0, 0,
	29, 21, 127, 122, 2, 0, 0, 32, 0, 52,
	41, 42, 45, 0, 99, 0, 0, 0, 48, 46,
	47, 33, 0, 53, 54, 43, 44, 0, 100, 49,
	50,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 78, 70, 3,
	15, 17, 76, 74, 16, 75, 18, 77, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	64, 63, 65, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 71, 3, 83,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 19, 20, 21, 22, 23, 24, 25,
	26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 66, 67, 68,
	69, 72, 73, 79, 80, 81, 82, 84,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).ast = &AST{yyDollar[1].selectStmt}
		}
	case 2:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.selectStmt = &Select{
				Distinct:         yyDollar[2].string,
				SelectColumnList: yyDollar[3].SelectColumnList,
				From:             yyDollar[4].tableExprList,
				Where:            yyDollar[5].where,
				GroupBy:          GroupBy(yyDollar[6].exprs),
				Having:           yyDollar[7].where,
				OrderBy:          yyDollar[8].orderBy,
				Limit:            yyDollar[9].limit,
			}
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = ""
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = DistinctStr
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = AllStr
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.SelectColumnList = SelectColumnList{yyDollar[1].SelectColumn}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.SelectColumnList = append(yyDollar[1].SelectColumnList, yyDollar[3].SelectColumn)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.SelectColumn = &StarSelectColumn{}
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.SelectColumn = &AliasedSelectColumn{Expr: yyDollar[1].expr, As: yyDollar[2].column}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.SelectColumn = &StarSelectColumn{TableRef: yyDollar[1].table}
		}
	case 11:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.column = nil
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.column = yyDollar[1].column
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.column = yyDollar[2].column
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.column = &Column{Name: string(yyDollar[1].bytes)}
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.column = &Column{Name: string(yyDollar[1].bytes)}
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tableExprList = yyDollar[2].tableExprList
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tableExprList = TableExprList{yyDollar[2].joinTableExpr}
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tableExprList = TableExprList{yyDollar[1].tableExpr}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tableExprList = append(yyVAL.tableExprList, yyDollar[3].tableExpr)
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].table, As: yyDollar[2].table}
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: &Subquery{Select: yyDollar[2].selectStmt}, As: yyDollar[4].table}
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tableExpr = &ParenTableExpr{TableExprList: yyDollar[2].tableExprList}
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tableExpr = yyDollar[2].joinTableExpr
		}
	case 24:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.table = nil
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.table = yyDollar[1].table
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.table = yyDollar[2].table
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.table = &Table{Name: string(yyDollar[1].bytes)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.table = &Table{Name: string(yyDollar[1].bytes)}
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			if yyDollar[4].joinTableExpr == nil {
				yyVAL.joinTableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, JoinOperator: JoinStr, RightExpr: yyDollar[3].tableExpr}
			} else {
				yyDollar[4].joinTableExpr.LeftExpr = yyDollar[1].tableExpr
				yyDollar[4].joinTableExpr.JoinOperator = JoinStr
				yyDollar[4].joinTableExpr.RightExpr = yyDollar[3].tableExpr
				yyVAL.joinTableExpr = yyDollar[4].joinTableExpr
			}
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			if yyDollar[4].joinTableExpr == nil {
				yyVAL.joinTableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].joinTableExpr, JoinOperator: JoinStr, RightExpr: yyDollar[3].tableExpr}
			} else {
				yyDollar[4].joinTableExpr.LeftExpr = yyDollar[1].joinTableExpr
				yyDollar[4].joinTableExpr.JoinOperator = JoinStr
				yyDollar[4].joinTableExpr.RightExpr = yyDollar[3].tableExpr
				yyVAL.joinTableExpr = yyDollar[4].joinTableExpr
			}
		}
	case 31:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.joinTableExpr = nil
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.joinTableExpr = &JoinTableExpr{On: yyDollar[2].expr}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.joinTableExpr = &JoinTableExpr{Using: yyDollar[3].columnList}
		}
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.where = nil
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.where = NewWhere(WhereStr, yyDollar[2].expr)
		}
	case 36:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exprs = nil
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 38:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.where = nil
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.where = NewWhere(HavingStr, yyDollar[2].expr)
		}
	case 40:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.orderBy = nil
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].orderingTerm}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].orderingTerm)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.orderingTerm = &OrderingTerm{Expr: yyDollar[1].expr, Direction: yyDollar[2].string, Nulls: yyDollar[3].nulls}
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = AscStr
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = AscStr
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = DescStr
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.nulls = NullsNil
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.nulls = NullsFirst
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.nulls = NullsLast
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.limit = nil
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.limit = &Limit{Limit: yyDollar[2].expr}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Limit: yyDollar[4].expr}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Limit: yyDollar[2].expr}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.table = &Table{Name: string(yyDollar[1].bytes)}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].column
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyDollar[3].column.TableRef = yyDollar[1].table
			yyVAL.expr = yyDollar[3].column
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ConcatStr, Right: yyDollar[3].expr}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr, Escape: yyDollar[5].expr}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			if value, ok := yyDollar[2].expr.(*Value); ok && value.Type == IntValue {
				yyVAL.expr = &Value{Type: IntValue, Value: append([]byte("-"), value.Value...)}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &IsExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.expr = &IsExpr{Left: yyDollar[1].expr, Right: &NotExpr{Expr: yyDollar[4].expr}}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &IsNullExpr{Expr: yyDollar[1].expr}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &NotNullExpr{Expr: yyDollar[1].expr}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &NotNullExpr{Expr: yyDollar[1].expr}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.expr = &BetweenExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, CollationName: string(yyDollar[3].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = yyDollar[2].exprs
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &Value{Type: StrValue, Value: yyDollar[1].bytes[1 : len(yyDollar[1].bytes)-1]}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &Value{Type: IntValue, Value: yyDollar[1].bytes}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &Value{Type: FloatValue, Value: yyDollar[1].bytes}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &Value{Type: BlobValue, Value: yyDollar[1].bytes}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &Value{Type: HexNumValue, Value: yyDollar[1].bytes}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = BoolValue(true)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = BoolValue(false)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &NullValue{}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if len(yyDollar[1].bytes) > MaxColumnNameLength {
				yylex.Error(__yyfmt__.Sprintf("column length greater than %d", MaxColumnNameLength))
				return 1
			}
			yyVAL.column = &Column{Name: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnList = ColumnList{yyDollar[1].column}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnList = append(yyDollar[1].columnList, yyDollar[3].column)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = EqualStr
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = NotEqualStr
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = RegexpStr
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotRegexpStr
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = GlobStr
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotGlobStr
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = MatchStr
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotMatchStr
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = LessThanStr
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = GreaterThanStr
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = LessEqualStr
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = GreaterEqualStr
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = LikeStr
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotLikeStr
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = BetweenStr
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotBetweenStr
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = NoneStr
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = TextStr
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = RealStr
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = IntegerStr
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = NumericStr
		}
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.expr = nil
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.when = &When{Condition: yyDollar[2].expr, Value: yyDollar[4].expr}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.expr = nil
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = yyDollar[2].expr
		}
	}
	goto yystack /* stack new state and value */
}
