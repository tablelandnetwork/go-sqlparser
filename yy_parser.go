// Code generated by goyacc -l -o yy_parser.go grammar.y. DO NOT EDIT.
package sqlparser

import __yyfmt__ "fmt"

const MaxColumnNameLength = 64

type yySymType struct {
	yys              int
	bool             bool
	string           string
	bytes            []byte
	expr             Expr
	exprs            Exprs
	column           *Column
	table            *Table
	convertType      ConvertType
	when             *When
	whens            []*When
	SelectColumn     SelectColumn
	SelectColumnList SelectColumnList
	selectStmt       *Select
	where            *Where
	limit            *Limit
	orderBy          OrderBy
	orderingTerm     *OrderingTerm
	nulls            NullsType
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGRAL = 57348
const HEXNUM = 57349
const FLOAT = 57350
const BLOB = 57351
const ERROR = 57352
const TRUE = 57353
const FALSE = 57354
const NULL = 57355
const AND = 57356
const NONE = 57357
const INTEGER = 57358
const NUMERIC = 57359
const REAL = 57360
const TEXT = 57361
const CAST = 57362
const AS = 57363
const CASE = 57364
const WHEN = 57365
const THEN = 57366
const ELSE = 57367
const END = 57368
const SELECT = 57369
const FROM = 57370
const WHERE = 57371
const GROUP = 57372
const BY = 57373
const HAVING = 57374
const LIMIT = 57375
const OFFSET = 57376
const ORDER = 57377
const ASC = 57378
const DESC = 57379
const NULLS = 57380
const FIRST = 57381
const LAST = 57382
const OR = 57383
const ANDOP = 57384
const NOT = 57385
const IS = 57386
const MATCH = 57387
const GLOB = 57388
const REGEXP = 57389
const LIKE = 57390
const BETWEEN = 57391
const IN = 57392
const ISNULL = 57393
const NOTNULL = 57394
const NE = 57395
const LE = 57396
const GE = 57397
const INEQUALITY = 57398
const ESCAPE = 57399
const LSHIFT = 57400
const RSHIFT = 57401
const CONCAT = 57402
const JSON_EXTRACT_OP = 57403
const JSON_UNQUOTE_EXTRACT_OP = 57404
const COLLATE = 57405
const UNARY = 57406

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGRAL",
	"HEXNUM",
	"FLOAT",
	"BLOB",
	"ERROR",
	"TRUE",
	"FALSE",
	"NULL",
	"AND",
	"'('",
	"','",
	"')'",
	"'.'",
	"NONE",
	"INTEGER",
	"NUMERIC",
	"REAL",
	"TEXT",
	"CAST",
	"AS",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"SELECT",
	"FROM",
	"WHERE",
	"GROUP",
	"BY",
	"HAVING",
	"LIMIT",
	"OFFSET",
	"ORDER",
	"ASC",
	"DESC",
	"NULLS",
	"FIRST",
	"LAST",
	"OR",
	"ANDOP",
	"NOT",
	"IS",
	"MATCH",
	"GLOB",
	"REGEXP",
	"LIKE",
	"BETWEEN",
	"IN",
	"ISNULL",
	"NOTNULL",
	"NE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"INEQUALITY",
	"ESCAPE",
	"'&'",
	"'|'",
	"LSHIFT",
	"RSHIFT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"CONCAT",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"COLLATE",
	"'~'",
	"UNARY",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 17,
	18, 34,
	-2, 77,
}

const yyPrivate = 57344

const yyLast = 600

var yyAct = [...]uint8{
	7, 158, 75, 114, 52, 111, 10, 39, 40, 41,
	52, 170, 69, 71, 72, 74, 76, 35, 36, 37,
	38, 30, 31, 32, 33, 34, 39, 40, 41, 52,
	150, 81, 82, 83, 84, 85, 86, 87, 88, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 98, 171,
	172, 154, 106, 60, 61, 62, 63, 145, 121, 35,
	36, 37, 38, 30, 31, 32, 33, 34, 39, 40,
	41, 52, 109, 53, 155, 110, 164, 165, 118, 146,
	131, 46, 45, 50, 47, 59, 58, 57, 64, 65,
	120, 48, 49, 56, 55, 60, 61, 62, 63, 28,
	122, 35, 36, 37, 38, 30, 31, 32, 33, 34,
	39, 40, 41, 52, 135, 27, 127, 125, 128, 110,
	3, 132, 133, 115, 134, 126, 115, 136, 108, 66,
	67, 32, 33, 34, 39, 40, 41, 52, 147, 112,
	70, 68, 117, 116, 8, 148, 151, 76, 162, 152,
	54, 117, 77, 66, 67, 156, 159, 111, 1, 107,
	5, 166, 167, 159, 168, 79, 169, 100, 78, 8,
	46, 45, 50, 47, 59, 58, 57, 64, 65, 157,
	48, 49, 56, 55, 60, 61, 62, 63, 160, 80,
	35, 36, 37, 38, 30, 31, 32, 33, 34, 39,
	40, 41, 52, 103, 102, 101, 104, 105, 149, 153,
	161, 139, 142, 143, 141, 140, 113, 46, 45, 50,
	47, 59, 58, 57, 64, 65, 138, 48, 49, 56,
	55, 60, 61, 62, 63, 137, 144, 35, 36, 37,
	38, 30, 31, 32, 33, 34, 39, 40, 41, 52,
	119, 4, 46, 45, 50, 47, 59, 58, 57, 64,
	65, 29, 48, 49, 56, 55, 60, 61, 62, 63,
	129, 163, 35, 36, 37, 38, 30, 31, 32, 33,
	34, 39, 40, 41, 52, 51, 44, 43, 42, 130,
	46, 45, 50, 47, 59, 58, 57, 64, 65, 123,
	48, 49, 56, 55, 60, 61, 62, 63, 124, 73,
	35, 36, 37, 38, 30, 31, 32, 33, 34, 39,
	40, 41, 52, 16, 9, 2, 0, 0, 0, 0,
	46, 45, 50, 47, 59, 58, 57, 64, 65, 0,
	48, 49, 56, 55, 60, 61, 62, 63, 0, 0,
	35, 36, 37, 38, 30, 31, 32, 33, 34, 39,
	40, 41, 52, 46, 45, 50, 47, 59, 58, 57,
	64, 65, 0, 48, 49, 56, 55, 60, 61, 62,
	63, 0, 0, 35, 36, 37, 38, 30, 31, 32,
	33, 34, 39, 40, 41, 52, 45, 50, 47, 59,
	58, 57, 64, 65, 0, 48, 49, 56, 55, 60,
	61, 62, 63, 0, 0, 35, 36, 37, 38, 30,
	31, 32, 33, 34, 39, 40, 41, 52, 50, 47,
	59, 58, 57, 64, 65, 0, 48, 49, 56, 55,
	60, 61, 62, 63, 0, 0, 35, 36, 37, 38,
	30, 31, 32, 33, 34, 39, 40, 41, 52, 60,
	61, 62, 63, 0, 0, 35, 36, 37, 38, 30,
	31, 32, 33, 34, 39, 40, 41, 52, 17, 18,
	19, 22, 20, 21, 0, 23, 24, 25, 0, 15,
	0, 0, 0, 0, 0, 0, 0, 0, 26, 0,
	14, 0, 17, 18, 19, 22, 20, 21, 0, 23,
	24, 25, 0, 15, 0, 0, 0, 0, 0, 0,
	0, 99, 26, 0, 14, 17, 18, 19, 22, 20,
	21, 0, 23, 24, 25, 0, 15, 0, 0, 0,
	0, 0, 0, 12, 11, 26, 0, 14, 0, 0,
	0, 0, 13, 30, 31, 32, 33, 34, 39, 40,
	41, 52, 0, 0, 0, 0, 0, 12, 11, 6,
	0, 0, 0, 0, 0, 0, 13, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	12, 11, 0, 0, 0, 0, 0, 0, 0, 13,
}

var yyPact = [...]int16{
	89, -1000, -1000, 498, 83, -1000, -1000, 125, 123, -1000,
	-1000, 521, 521, 521, 521, 521, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 137, 161, 498, -1000,
	521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
	521, 521, 521, 521, 521, 521, 521, 474, -1000, -1000,
	154, 521, 155, -1000, 149, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1, -1000,
	121, -1000, -1000, 99, 318, 126, 318, 521, 57, -1000,
	-1000, 60, 60, -67, -67, -67, 484, 484, 484, 484,
	-73, -73, -73, 400, -48, -6, 381, 350, 400, 521,
	-1000, -1000, -1000, -1000, -1000, -1000, 285, -1000, -1000, -1000,
	-1000, -1000, 153, 96, -1000, 521, -1000, 521, 245, 46,
	521, 521, 381, 521, 84, -1000, 521, 207, 318, 192,
	21, 44, 318, 400, 400, -1000, 318, 521, 128, -1000,
	-1000, -1000, -1000, -1000, -9, 521, 521, 318, -1000, 14,
	39, 318, 135, -1000, 521, 521, 172, 132, -1000, 36,
	521, 521, 521, -31, -1000, -1000, 318, 318, -1000, -1000,
	6, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 325, 0, 324, 323, 309, 308, 2, 289, 288,
	287, 286, 285, 271, 6, 261, 73, 160, 251, 140,
	250, 236, 226, 3, 216, 209, 208, 179, 1, 166,
	158,
}

var yyR1 = [...]int8{
	0, 30, 1, 18, 18, 17, 17, 17, 15, 15,
	15, 16, 16, 20, 20, 8, 8, 21, 21, 26,
	26, 27, 27, 28, 13, 13, 13, 29, 29, 29,
	25, 25, 25, 25, 19, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 14, 9, 9,
	9, 9, 9, 9, 9, 9, 10, 10, 10, 10,
	11, 11, 12, 12, 22, 22, 22, 22, 22, 4,
	7, 7, 5, 5, 23, 24, 24, 6, 6,
}

var yyR2 = [...]int8{
	0, 1, 9, 1, 3, 1, 2, 3, 0, 1,
	2, 1, 1, 0, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 3, 0, 1, 1, 0, 2, 2,
	0, 2, 4, 4, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	4, 2, 2, 3, 5, 5, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 6,
	1, 3, 0, 1, 4, 1, 2, 0, 2,
}

var yyChk = [...]int16{
	-1000, -30, -1, 31, -18, -17, 71, -2, -19, -3,
	-14, 70, 69, 78, 26, 15, -4, 4, 5, 6,
	8, 9, 7, 11, 12, 13, 24, 32, 16, -15,
	69, 70, 71, 72, 73, 65, 66, 67, 68, 74,
	75, 76, -9, -10, -11, 46, 45, 48, 55, 56,
	47, -12, 77, -16, 25, 58, 57, 51, 50, 49,
	59, 60, 61, 62, 52, 53, 4, 5, 18, -2,
	-19, -2, -2, -5, -2, -7, -2, 15, -19, 4,
	-17, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 47,
	13, 51, 50, 49, 52, 53, -2, 4, -16, 71,
	-14, 4, 18, -24, -23, 27, 17, 16, -2, -20,
	33, 64, -2, 14, -6, -23, 29, -2, -2, 25,
	-8, 34, -2, -2, -2, 30, -2, 28, -22, 19,
	23, 22, 20, 21, -21, 36, 35, -2, 17, -26,
	39, -2, -7, -25, 37, 35, -2, -27, -28, -2,
	16, 38, 16, -13, 40, 41, -2, -2, -28, -29,
	42, 43, 44,
}

var yyDef = [...]int8{
	0, -2, 1, 0, 0, 3, 5, 8, 0, 35,
	36, 0, 0, 0, 102, 0, 68, -2, 69, 70,
	71, 72, 73, 74, 75, 76, 0, 0, 0, 6,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 62,
	0, 0, 0, 9, 0, 78, 79, 80, 82, 84,
	86, 87, 88, 89, 90, 92, 11, 12, 0, 54,
	0, 55, 56, 0, 103, 0, 100, 0, 13, 34,
	4, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 57, 58, 59, 0,
	63, 81, 83, 85, 91, 93, 0, 66, 10, 7,
	37, 77, 0, 107, 105, 0, 67, 0, 0, 15,
	0, 0, 60, 0, 0, 106, 0, 0, 101, 0,
	17, 0, 14, 53, 64, 65, 108, 0, 0, 94,
	95, 96, 97, 98, 19, 0, 0, 104, 99, 30,
	0, 18, 16, 2, 0, 0, 31, 20, 21, 24,
	0, 0, 0, 27, 25, 26, 32, 33, 22, 23,
	0, 28, 29,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 73, 65, 3,
	15, 17, 71, 69, 16, 70, 18, 72, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	59, 58, 60, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 66, 3, 78,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 19, 20, 21, 22, 23, 24, 25,
	26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 61, 62, 63, 64, 67, 68, 74, 75,
	76, 77, 79,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).ast = &AST{yyDollar[1].selectStmt}
		}
	case 2:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.selectStmt = &Select{
				SelectColumnList: yyDollar[2].SelectColumnList,
				From:             yyDollar[4].table,
				Where:            yyDollar[5].where,
				GroupBy:          GroupBy(yyDollar[6].exprs),
				Having:           yyDollar[7].where,
				OrderBy:          yyDollar[8].orderBy,
				Limit:            yyDollar[9].limit,
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.SelectColumnList = SelectColumnList{yyDollar[1].SelectColumn}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.SelectColumnList = append(yyDollar[1].SelectColumnList, yyDollar[3].SelectColumn)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.SelectColumn = &StarSelectColumn{}
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.SelectColumn = &AliasedSelectColumn{Expr: yyDollar[1].expr, As: yyDollar[2].column}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.SelectColumn = &StarSelectColumn{TableRef: yyDollar[1].table}
		}
	case 8:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.column = nil
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.column = yyDollar[1].column
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.column = yyDollar[2].column
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.column = &Column{Name: string(yyDollar[1].bytes)}
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.column = &Column{Name: string(yyDollar[1].bytes)}
		}
	case 13:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.where = nil
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.where = NewWhere(WhereStr, yyDollar[2].expr)
		}
	case 15:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exprs = nil
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 17:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.where = nil
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.where = NewWhere(HavingStr, yyDollar[2].expr)
		}
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.orderBy = nil
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].orderingTerm}
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].orderingTerm)
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.orderingTerm = &OrderingTerm{Expr: yyDollar[1].expr, Direction: yyDollar[2].string, Nulls: yyDollar[3].nulls}
		}
	case 24:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = AscStr
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = AscStr
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = DescStr
		}
	case 27:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.nulls = NullsNil
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.nulls = NullsFirst
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.nulls = NullsLast
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.limit = nil
		}
	case 31:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.limit = &Limit{Limit: yyDollar[2].expr}
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Limit: yyDollar[4].expr}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Limit: yyDollar[2].expr}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.table = &Table{Name: string(yyDollar[1].bytes)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].column
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyDollar[3].column.TableRef = yyDollar[1].table
			yyVAL.expr = yyDollar[3].column
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ConcatStr, Right: yyDollar[3].expr}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr, Escape: yyDollar[5].expr}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			if value, ok := yyDollar[2].expr.(*Value); ok && value.Type == IntValue {
				yyVAL.expr = &Value{Type: IntValue, Value: append([]byte("-"), value.Value...)}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &IsExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.expr = &IsExpr{Left: yyDollar[1].expr, Right: &NotExpr{Expr: yyDollar[4].expr}}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &IsNullExpr{Expr: yyDollar[1].expr}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &NotNullExpr{Expr: yyDollar[1].expr}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &NotNullExpr{Expr: yyDollar[1].expr}
		}
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.expr = &BetweenExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, CollationName: string(yyDollar[3].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = yyDollar[2].exprs
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &Value{Type: StrValue, Value: yyDollar[1].bytes[1 : len(yyDollar[1].bytes)-1]}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &Value{Type: IntValue, Value: yyDollar[1].bytes}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &Value{Type: FloatValue, Value: yyDollar[1].bytes}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &Value{Type: BlobValue, Value: yyDollar[1].bytes}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &Value{Type: HexNumValue, Value: yyDollar[1].bytes}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = BoolValue(true)
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = BoolValue(false)
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &NullValue{}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if len(yyDollar[1].bytes) > MaxColumnNameLength {
				yylex.Error(__yyfmt__.Sprintf("column length greater than %d", MaxColumnNameLength))
				return 1
			}
			yyVAL.column = &Column{Name: string(yyDollar[1].bytes)}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = EqualStr
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = NotEqualStr
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = RegexpStr
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotRegexpStr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = GlobStr
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotGlobStr
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = MatchStr
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotMatchStr
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = LessThanStr
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = GreaterThanStr
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = LessEqualStr
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = GreaterEqualStr
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = LikeStr
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotLikeStr
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = BetweenStr
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotBetweenStr
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = NoneStr
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = TextStr
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = RealStr
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = IntegerStr
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = NumericStr
		}
	case 99:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.expr = nil
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.when = &When{Condition: yyDollar[2].expr, Value: yyDollar[4].expr}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.expr = nil
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = yyDollar[2].expr
		}
	}
	goto yystack /* stack new state and value */
}
