// Code generated by goyacc -l -o yy_parser.go grammar.y. DO NOT EDIT.
package sqlparser

import __yyfmt__ "fmt"

import (
	"bytes"
	"strings"
)

var keywordsNotAllowed = map[string]struct{}{
	// We don't allow non-deterministic keywords as identifiers.
	"CURRENT_TIME":      {},
	"CURRENT_DATE":      {},
	"CURRENT_TIMESTAMP": {},

	// SQLite reserved keywords that are not part of Tableland spec.
	// We can't allow them as identifiers because it will throw an error in SQLite.
	//
	// SQLite has more reserved keywords (eg. CREATE, INSERT, ...). But those are part of the Tableland grammar,
	// that means that the parser already checks from them.
	//
	// These were identified by running the `TestReservedKeywords` test.
	"REFERENCES":    {},
	"ADD":           {},
	"ALTER":         {},
	"AUTOINCREMENT": {},
	"COMMIT":        {},
	"DEFERRABLE":    {},
	"DROP":          {},
	"EXCEPT":        {},
	"FOREIGN":       {},
	"INDEX":         {},
	"INTERSECT":     {},
	"RETURNING":     {},
	"TRANSACTION":   {},
	"UNION":         {},
}

func isRowID(column Identifier) bool {
	if strings.EqualFold(string(column), "rowid") || strings.EqualFold(string(column), "_rowid_") || strings.EqualFold(string(column), "oid") {
		return true
	}

	return false
}

type yySymType struct {
	yys                  int
	bool                 bool
	string               string
	bytes                []byte
	expr                 Expr
	exprs                Exprs
	column               *Column
	table                *Table
	convertType          ConvertType
	when                 *When
	whens                []*When
	SelectColumn         SelectColumn
	SelectColumnList     SelectColumnList
	selectStmt           *Select
	where                *Where
	limit                *Limit
	orderBy              OrderBy
	orderingTerm         *OrderingTerm
	nulls                NullsType
	tableExprList        TableExprList
	tableExpr            TableExpr
	joinTableExpr        *JoinTableExpr
	columnList           ColumnList
	indexedColumnList    IndexedColumnList
	indexedColumn        *IndexedColumn
	subquery             *Subquery
	colTuple             ColTuple
	statement            Statement
	identifier           Identifier
	createTableStmt      *CreateTable
	columnDefList        []*ColumnDef
	columnDef            *ColumnDef
	columnConstraint     ColumnConstraint
	columnConstraints    []ColumnConstraint
	value                *Value
	tableConstraint      TableConstraint
	tableConstraints     []TableConstraint
	insertStmt           *Insert
	insertRows           []Exprs
	deleteStmt           *Delete
	updateStmt           *Update
	updateExpression     *UpdateExpr
	updateList           []*UpdateExpr
	grant                *Grant
	revoke               *Revoke
	strings              []string
	privileges           Privileges
	stmts                []Statement
	upsertClause         Upsert
	onConflictClauseList []*OnConflictClause
	onConflictClause     *OnConflictClause
	onConflictTarget     *OnConflictTarget
	collateOpt           Identifier
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGRAL = 57348
const HEXNUM = 57349
const FLOAT = 57350
const BLOBVAL = 57351
const ERROR = 57352
const TRUE = 57353
const FALSE = 57354
const NULL = 57355
const AND = 57356
const NONE = 57357
const INTEGER = 57358
const TEXT = 57359
const CAST = 57360
const AS = 57361
const CASE = 57362
const WHEN = 57363
const THEN = 57364
const ELSE = 57365
const END = 57366
const SELECT = 57367
const FROM = 57368
const WHERE = 57369
const GROUP = 57370
const BY = 57371
const HAVING = 57372
const LIMIT = 57373
const OFFSET = 57374
const ORDER = 57375
const ASC = 57376
const DESC = 57377
const NULLS = 57378
const FIRST = 57379
const LAST = 57380
const DISTINCT = 57381
const ALL = 57382
const EXISTS = 57383
const FILTER = 57384
const CREATE = 57385
const TABLE = 57386
const INT = 57387
const BLOB = 57388
const ANY = 57389
const PRIMARY = 57390
const KEY = 57391
const UNIQUE = 57392
const CHECK = 57393
const DEFAULT = 57394
const GENERATED = 57395
const ALWAYS = 57396
const STORED = 57397
const VIRTUAL = 57398
const CONSTRAINT = 57399
const INSERT = 57400
const INTO = 57401
const VALUES = 57402
const DELETE = 57403
const UPDATE = 57404
const SET = 57405
const CONFLICT = 57406
const DO = 57407
const NOTHING = 57408
const GRANT = 57409
const TO = 57410
const REVOKE = 57411
const JOIN = 57412
const ON = 57413
const USING = 57414
const OR = 57415
const ANDOP = 57416
const NOT = 57417
const IS = 57418
const ISNOT = 57419
const MATCH = 57420
const GLOB = 57421
const REGEXP = 57422
const LIKE = 57423
const BETWEEN = 57424
const IN = 57425
const ISNULL = 57426
const NOTNULL = 57427
const NE = 57428
const LE = 57429
const GE = 57430
const INEQUALITY = 57431
const ESCAPE = 57432
const LSHIFT = 57433
const RSHIFT = 57434
const CONCAT = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const COLLATE = 57438
const UNARY = 57439

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGRAL",
	"HEXNUM",
	"FLOAT",
	"BLOBVAL",
	"ERROR",
	"TRUE",
	"FALSE",
	"NULL",
	"AND",
	"'('",
	"','",
	"')'",
	"'.'",
	"';'",
	"NONE",
	"INTEGER",
	"TEXT",
	"CAST",
	"AS",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"SELECT",
	"FROM",
	"WHERE",
	"GROUP",
	"BY",
	"HAVING",
	"LIMIT",
	"OFFSET",
	"ORDER",
	"ASC",
	"DESC",
	"NULLS",
	"FIRST",
	"LAST",
	"DISTINCT",
	"ALL",
	"EXISTS",
	"FILTER",
	"CREATE",
	"TABLE",
	"INT",
	"BLOB",
	"ANY",
	"PRIMARY",
	"KEY",
	"UNIQUE",
	"CHECK",
	"DEFAULT",
	"GENERATED",
	"ALWAYS",
	"STORED",
	"VIRTUAL",
	"CONSTRAINT",
	"INSERT",
	"INTO",
	"VALUES",
	"DELETE",
	"UPDATE",
	"SET",
	"CONFLICT",
	"DO",
	"NOTHING",
	"GRANT",
	"TO",
	"REVOKE",
	"JOIN",
	"ON",
	"USING",
	"OR",
	"ANDOP",
	"NOT",
	"IS",
	"ISNOT",
	"MATCH",
	"GLOB",
	"REGEXP",
	"LIKE",
	"BETWEEN",
	"IN",
	"ISNULL",
	"NOTNULL",
	"NE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"INEQUALITY",
	"ESCAPE",
	"'&'",
	"'|'",
	"LSHIFT",
	"RSHIFT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"CONCAT",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"COLLATE",
	"'~'",
	"UNARY",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 57,
	18, 68,
	-2, 115,
	-1, 254,
	16, 172,
	17, 172,
	-2, 185,
	-1, 303,
	16, 173,
	17, 173,
	-2, 185,
}

const yyPrivate = 57344

const yyLast = 1545

var yyAct = [...]int16{
	240, 428, 143, 141, 385, 377, 407, 212, 58, 239,
	309, 298, 299, 45, 304, 292, 226, 319, 227, 267,
	208, 196, 146, 426, 188, 43, 129, 5, 156, 155,
	104, 157, 106, 32, 313, 46, 218, 57, 91, 92,
	93, 104, 52, 41, 123, 203, 320, 321, 122, 124,
	125, 127, 128, 34, 310, 31, 225, 307, 224, 76,
	219, 76, 30, 395, 347, 31, 31, 31, 279, 44,
	431, 416, 71, 72, 73, 415, 74, 211, 210, 179,
	43, 119, 153, 160, 161, 162, 163, 164, 165, 166,
	167, 168, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 28, 300, 369, 186, 15, 202, 132, 16, 17,
	148, 361, 149, 31, 18, 31, 19, 310, 31, 77,
	150, 75, 152, 154, 44, 158, 224, 429, 430, 32,
	151, 200, 140, 358, 192, 35, 205, 206, 37, 36,
	191, 27, 187, 214, 293, 119, 134, 215, 190, 183,
	182, 181, 184, 185, 180, 217, 422, 193, 316, 149,
	87, 88, 89, 90, 82, 83, 84, 85, 86, 91,
	92, 93, 104, 209, 139, 149, 213, 204, 149, 235,
	25, 26, 352, 213, 271, 149, 231, 300, 233, 232,
	332, 353, 333, 334, 433, 434, 229, 31, 244, 386,
	387, 272, 220, 222, 158, 236, 59, 68, 70, 69,
	60, 247, 61, 62, 63, 142, 364, 242, 356, 266,
	32, 79, 29, 190, 8, 284, 197, 23, 243, 197,
	193, 159, 149, 32, 230, 280, 80, 392, 281, 264,
	269, 288, 290, 289, 285, 33, 8, 276, 326, 21,
	294, 295, 148, 228, 149, 273, 274, 275, 194, 7,
	121, 31, 31, 31, 296, 38, 229, 305, 158, 158,
	158, 311, 317, 297, 84, 85, 86, 91, 92, 93,
	104, 291, 318, 39, 324, 424, 423, 325, 209, 277,
	149, 262, 417, 322, 323, 262, 409, 248, 312, 199,
	149, 262, 404, 32, 367, 368, 400, 327, 283, 397,
	283, 394, 283, 336, 147, 229, 305, 314, 337, 346,
	301, 354, 82, 83, 84, 85, 86, 91, 92, 93,
	104, 252, 357, 223, 113, 114, 115, 116, 335, 234,
	87, 88, 89, 90, 82, 83, 84, 85, 86, 91,
	92, 93, 104, 375, 378, 371, 365, 380, 216, 374,
	413, 384, 382, 379, 388, 389, 373, 383, 283, 348,
	370, 393, 283, 282, 223, 278, 390, 391, 262, 265,
	363, 396, 262, 263, 360, 32, 359, 355, 349, 345,
	328, 213, 261, 149, 344, 213, 159, 149, 189, 418,
	419, 378, 32, 120, 133, 137, 420, 256, 257, 213,
	136, 149, 135, 362, 427, 8, 131, 130, 408, 350,
	149, 432, 107, 338, 268, 340, 341, 342, 343, 32,
	436, 435, 1, 9, 439, 372, 255, 258, 259, 308,
	440, 32, 230, 441, 68, 70, 69, 306, 15, 4,
	339, 16, 17, 32, 120, 2, 20, 18, 14, 19,
	408, 22, 149, 13, 437, 145, 144, 148, 12, 149,
	11, 402, 403, 260, 10, 251, 98, 97, 102, 99,
	253, 112, 111, 110, 117, 118, 105, 100, 101, 109,
	108, 113, 114, 115, 116, 331, 330, 87, 88, 89,
	90, 82, 83, 84, 85, 86, 91, 92, 93, 104,
	98, 97, 102, 99, 302, 112, 111, 110, 117, 118,
	105, 100, 101, 109, 108, 113, 114, 115, 116, 398,
	303, 87, 88, 89, 90, 82, 83, 84, 85, 86,
	91, 92, 93, 104, 207, 201, 406, 138, 78, 421,
	399, 376, 315, 351, 195, 287, 270, 98, 97, 102,
	99, 40, 112, 111, 110, 117, 118, 105, 100, 101,
	109, 108, 113, 114, 115, 116, 438, 425, 87, 88,
	89, 90, 82, 83, 84, 85, 86, 91, 92, 93,
	104, 98, 97, 102, 99, 81, 112, 111, 110, 117,
	118, 105, 100, 101, 109, 108, 113, 114, 115, 116,
	414, 254, 87, 88, 89, 90, 82, 83, 84, 85,
	86, 91, 92, 93, 104, 24, 401, 103, 96, 95,
	94, 221, 246, 366, 53, 241, 126, 98, 97, 102,
	99, 56, 112, 111, 110, 117, 118, 105, 100, 101,
	109, 108, 113, 114, 115, 116, 412, 55, 87, 88,
	89, 90, 82, 83, 84, 85, 86, 91, 92, 93,
	104, 98, 97, 102, 99, 6, 112, 111, 110, 117,
	118, 105, 100, 101, 109, 108, 113, 114, 115, 116,
	411, 3, 87, 88, 89, 90, 82, 83, 84, 85,
	86, 91, 92, 93, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 97, 102,
	99, 0, 112, 111, 110, 117, 118, 105, 100, 101,
	109, 108, 113, 114, 115, 116, 410, 0, 87, 88,
	89, 90, 82, 83, 84, 85, 86, 91, 92, 93,
	104, 98, 97, 102, 99, 0, 112, 111, 110, 117,
	118, 105, 100, 101, 109, 108, 113, 114, 115, 116,
	405, 0, 87, 88, 89, 90, 82, 83, 84, 85,
	86, 91, 92, 93, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 97, 102,
	99, 0, 112, 111, 110, 117, 118, 105, 100, 101,
	109, 108, 113, 114, 115, 116, 381, 0, 87, 88,
	89, 90, 82, 83, 84, 85, 86, 91, 92, 93,
	104, 98, 97, 102, 99, 0, 112, 111, 110, 117,
	118, 105, 100, 101, 109, 108, 113, 114, 115, 116,
	329, 0, 87, 88, 89, 90, 82, 83, 84, 85,
	86, 91, 92, 93, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 97, 102,
	99, 0, 112, 111, 110, 117, 118, 105, 100, 101,
	109, 108, 113, 114, 115, 116, 286, 0, 87, 88,
	89, 90, 82, 83, 84, 85, 86, 91, 92, 93,
	104, 98, 97, 102, 99, 0, 112, 111, 110, 117,
	118, 105, 100, 101, 109, 108, 113, 114, 115, 116,
	250, 0, 87, 88, 89, 90, 82, 83, 84, 85,
	86, 91, 92, 93, 104, 0, 0, 98, 97, 102,
	99, 0, 112, 111, 110, 117, 118, 105, 100, 101,
	109, 108, 113, 114, 115, 116, 249, 0, 87, 88,
	89, 90, 82, 83, 84, 85, 86, 91, 92, 93,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 97, 102, 99, 0, 112, 111, 110,
	117, 118, 105, 100, 101, 109, 108, 113, 114, 115,
	116, 245, 0, 87, 88, 89, 90, 82, 83, 84,
	85, 86, 91, 92, 93, 104, 0, 0, 98, 97,
	102, 99, 0, 112, 111, 110, 117, 118, 105, 100,
	101, 109, 108, 113, 114, 115, 116, 237, 0, 87,
	88, 89, 90, 82, 83, 84, 85, 86, 91, 92,
	93, 104, 0, 0, 0, 98, 97, 102, 99, 0,
	112, 111, 110, 117, 118, 105, 100, 101, 109, 108,
	113, 114, 115, 116, 198, 0, 87, 88, 89, 90,
	82, 83, 84, 85, 86, 91, 92, 93, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 97, 102, 99, 0, 112, 111, 110, 117,
	118, 105, 100, 101, 109, 108, 113, 114, 115, 116,
	0, 0, 87, 88, 89, 90, 82, 83, 84, 85,
	86, 91, 92, 93, 104, 98, 97, 102, 99, 0,
	112, 111, 110, 117, 118, 105, 100, 101, 109, 108,
	113, 114, 115, 116, 0, 0, 87, 88, 89, 90,
	82, 83, 84, 85, 86, 91, 92, 93, 104, 98,
	97, 102, 99, 0, 112, 111, 110, 117, 118, 105,
	100, 101, 109, 108, 113, 114, 115, 116, 0, 0,
	87, 88, 89, 90, 82, 83, 84, 85, 86, 91,
	92, 93, 104, 97, 102, 99, 0, 112, 111, 110,
	117, 118, 105, 100, 101, 109, 108, 113, 114, 115,
	116, 0, 0, 87, 88, 89, 90, 82, 83, 84,
	85, 86, 91, 92, 93, 104, 102, 99, 0, 112,
	111, 110, 117, 118, 105, 100, 101, 109, 108, 113,
	114, 115, 116, 0, 0, 87, 88, 89, 90, 82,
	83, 84, 85, 86, 91, 92, 93, 104, 32, 59,
	68, 70, 69, 60, 0, 61, 62, 63, 0, 51,
	0, 238, 0, 0, 0, 0, 0, 54, 0, 50,
	0, 0, 0, 0, 8, 32, 59, 68, 70, 69,
	60, 0, 61, 62, 63, 0, 51, 0, 0, 0,
	64, 0, 0, 0, 54, 0, 50, 32, 59, 68,
	70, 69, 60, 0, 61, 62, 63, 0, 51, 0,
	0, 0, 0, 0, 0, 0, 54, 64, 50, 0,
	0, 0, 0, 0, 65, 0, 0, 0, 66, 0,
	67, 0, 0, 0, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 48, 47, 0,
	0, 65, 0, 178, 0, 66, 49, 67, 0, 32,
	59, 68, 70, 69, 60, 0, 61, 62, 63, 0,
	51, 0, 0, 65, 48, 47, 0, 66, 54, 67,
	50, 0, 0, 49, 0, 8, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 48, 47, 42, 0,
	0, 64, 0, 0, 0, 49, 32, 59, 68, 70,
	69, 60, 0, 61, 62, 63, 0, 51, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 50, 0, 0,
	0, 0, 0, 0, 0, 65, 0, 0, 0, 66,
	0, 67, 0, 0, 0, 0, 0, 0, 64, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 48, 47,
	0, 0, 113, 114, 115, 116, 0, 49, 87, 88,
	89, 90, 82, 83, 84, 85, 86, 91, 92, 93,
	104, 0, 65, 0, 0, 0, 66, 0, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 48, 47, 0, 0, 0,
	0, 0, 0, 0, 49,
}

var yyPact = [...]int16{
	385, -1000, -1000, 230, 208, -1000, -1000, -1000, 136, 92,
	-1000, -1000, -1000, -1000, -1000, 37, 191, 425, 72, 72,
	-1000, -1000, -1000, 42, 1323, -1000, -1000, 425, 425, 425,
	8, -1000, -1000, 45, -1000, -1000, -1000, -1000, 43, -1000,
	205, -1000, -1000, 398, 242, -1000, -1000, 1432, 1432, 1432,
	1432, 1385, -1000, -1000, 402, -1000, -1000, 401, -1000, -1000,
	-1000, -1000, -1000, -1000, 389, 100, 397, 395, -1000, -1000,
	-1000, 390, 117, 183, 299, 425, 72, 425, 183, 1323,
	381, -1000, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432,
	1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1301,
	-1000, -1000, 66, 1432, 425, 383, -1000, 449, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 29, -1000, 240, -1000, -1000, 203, 1101, 1067, 282,
	1432, 1, -1000, 194, 389, 1432, 1432, 425, 13, 12,
	425, -1000, 1432, 183, 342, -1000, -1000, 425, -56, -1000,
	-13, -1000, 171, 170, -1000, 317, -17, -19, 229, 216,
	169, 169, -70, -70, -70, 219, 219, 219, 219, -81,
	-81, -81, 1399, 61, 241, 1166, 1134, 1399, 1432, -1000,
	383, -1000, -1000, -1000, -1000, -1000, 1033, -1000, -1000, 1274,
	-1000, -1000, -1000, -1000, 425, 200, -1000, 1432, -1000, -1000,
	987, 1432, 280, -1000, -1000, 950, 914, 315, -1000, 386,
	377, -1000, 366, -1000, 1101, -1000, 425, 362, 1432, 419,
	419, 149, 167, 381, 381, 381, -1000, -1000, 437, -1000,
	-1000, 272, 358, 51, 1432, 1399, -1000, 1432, -1000, 356,
	1101, 196, -1000, 1432, 869, 221, 264, 296, 97, 1432,
	1432, 247, 125, 304, 40, -1000, -1000, -1000, -1000, -1000,
	41, 1432, 425, -1000, -1000, -58, 1101, 301, -1000, 301,
	120, 1432, 1432, -1000, -30, -30, -1000, 229, -1000, -1000,
	1399, 1399, -1000, 1432, -1000, 1101, 1432, 231, -1000, -1000,
	-1000, 97, -1000, 375, 833, 479, -1000, -1000, -1000, 137,
	425, 40, -1000, 40, -1000, 370, -1000, 374, -22, -1000,
	-5, 352, -1000, 373, 414, 146, 157, 1101, 296, -1000,
	1432, 372, -1000, -1000, 1101, 1101, -1000, -1000, 186, -1000,
	-1000, 1432, 79, 371, 369, -1000, -1000, -1000, 57, 400,
	-1000, 365, 201, 44, 355, 1432, -1000, 351, -1000, 1432,
	-1000, -1000, 1432, 1432, 1101, 425, 1432, 799, 347, 425,
	1432, 160, -1000, 1432, 1432, -1000, -1000, 438, 438, 213,
	1432, 294, -7, 425, 292, 513, 290, -1000, 432, 285,
	753, -1000, 425, 279, 719, -1000, -1000, -1000, 673, 639,
	-1000, -1000, 345, 593, -1000, 4, 275, -1000, 1432, 1432,
	1432, 115, -1000, -1000, -1000, -1000, 269, -1000, -88, -1000,
	-1000, -1000, -1000, 1432, 67, -1000, 2, 183, 1101, 1101,
	-1000, -1000, 152, -1000, 425, 160, 425, 559, -1000, -1000,
	-1000, 299, -1000, -1000, -1000, -1000, -1000, -1000, 67, 183,
	-1000, -1000,
}

var yyPgo = [...]int16{
	0, 259, 691, 26, 675, 0, 13, 657, 641, 636,
	635, 634, 633, 9, 632, 631, 630, 629, 628, 627,
	626, 625, 611, 4, 53, 35, 595, 32, 16, 18,
	12, 37, 577, 43, 561, 44, 3, 556, 15, 555,
	21, 554, 553, 552, 551, 5, 549, 29, 548, 31,
	28, 17, 7, 547, 546, 6, 42, 24, 545, 1,
	544, 20, 14, 530, 514, 8, 11, 480, 475, 474,
	473, 470, 468, 22, 2, 466, 465, 463, 458, 19,
	245, 455, 449, 447, 439, 10, 435, 432, 456,
}

var yyR1 = [...]int8{
	0, 87, 81, 81, 2, 2, 82, 82, 1, 1,
	1, 1, 1, 88, 88, 3, 21, 21, 21, 34,
	34, 33, 33, 33, 26, 26, 26, 27, 27, 48,
	48, 47, 47, 49, 49, 49, 49, 28, 28, 28,
	29, 29, 50, 50, 51, 51, 51, 36, 36, 15,
	15, 37, 37, 43, 43, 44, 44, 45, 20, 20,
	20, 46, 46, 46, 42, 42, 42, 42, 35, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 6,
	6, 6, 6, 6, 6, 25, 52, 52, 16, 16,
	16, 16, 16, 16, 16, 16, 17, 17, 17, 17,
	18, 18, 19, 19, 39, 39, 39, 57, 57, 57,
	56, 11, 11, 7, 7, 7, 8, 8, 58, 58,
	13, 13, 14, 14, 38, 38, 9, 9, 40, 41,
	41, 10, 10, 4, 60, 60, 61, 22, 22, 22,
	22, 22, 64, 64, 63, 63, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 30, 30, 23, 23, 23,
	12, 12, 65, 65, 65, 59, 59, 59, 68, 68,
	67, 67, 66, 66, 66, 54, 54, 55, 32, 32,
	69, 69, 53, 53, 70, 70, 83, 83, 84, 84,
	85, 85, 86, 86, 71, 72, 74, 74, 75, 75,
	76, 73, 77, 78, 79, 79, 80, 80, 24, 24,
	24, 31,
}

var yyR2 = [...]int8{
	0, 1, 2, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 0, 1, 9, 0, 1, 1, 1,
	3, 1, 2, 3, 0, 1, 2, 1, 1, 2,
	2, 1, 3, 2, 4, 3, 3, 0, 1, 2,
	1, 1, 4, 4, 0, 2, 4, 0, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 3, 0, 1,
	1, 0, 2, 2, 0, 2, 4, 4, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 4, 2, 2, 3, 5, 5,
	3, 3, 3, 4, 1, 1, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 1, 1, 2, 1, 3,
	3, 2, 3, 6, 6, 8, 6, 5, 0, 1,
	1, 3, 0, 1, 0, 5, 0, 1, 4, 1,
	2, 0, 2, 7, 1, 3, 3, 1, 1, 1,
	1, 1, 0, 1, 1, 2, 4, 3, 2, 5,
	5, 3, 3, 8, 6, 0, 2, 0, 1, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 0, 1,
	2, 3, 6, 5, 5, 1, 3, 3, 0, 2,
	7, 5, 0, 3, 3, 5, 0, 1, 1, 2,
	5, 8, 0, 4, 4, 5, 1, 1, 1, 3,
	7, 3, 6, 6, 1, 3, 1, 3, 1, 1,
	1, 1,
}

var yyChk = [...]int16{
	-1000, -87, -81, -2, -82, -3, -4, -1, 30, 48,
	-69, -71, -72, -77, -78, 63, 66, 67, 72, 74,
	-88, 19, -88, 19, -21, 44, 45, 49, 64, 31,
	-35, -31, 4, -80, -24, 63, 67, 66, -80, -1,
	-34, -33, 105, -5, -35, -6, -25, 104, 103, 112,
	25, 15, -56, -11, 23, -7, -8, -31, -65, 5,
	9, 11, 12, 13, 46, 80, 84, 86, 6, 8,
	7, -35, -35, -35, 68, 76, 16, 76, -48, 16,
	31, -26, 103, 104, 105, 106, 107, 99, 100, 101,
	102, 108, 109, 110, -16, -17, -18, 79, 78, 81,
	89, 90, 80, -19, 111, 88, -27, 24, 92, 91,
	85, 84, 83, 93, 94, 95, 96, 86, 87, -31,
	5, 18, -5, -35, -5, -5, -9, -5, -5, -3,
	15, 15, -56, 15, 46, 15, 15, 15, -53, 57,
	15, -36, 32, -74, -75, -76, -73, 15, -25, -31,
	-35, -24, -35, -36, -33, -47, -50, -49, -35, 15,
	-5, -5, -5, -5, -5, -5, -5, -5, -5, -5,
	-5, -5, -5, -5, -5, -5, -5, -5, 82, 13,
	88, 85, 84, 83, 86, 87, -5, -31, -57, 15,
	-56, -27, 105, -25, 18, -41, -40, 26, 17, 17,
	-5, -58, 105, 44, -56, -5, -5, -60, -61, -25,
	65, 65, -52, -25, -5, -36, 16, -52, 92, 73,
	31, -15, 33, 16, 75, 75, -28, -29, 24, -31,
	5, -3, -47, -50, 98, -5, -57, 14, 17, -13,
	-5, -10, -40, 28, -5, 24, -14, -13, 17, 16,
	16, -68, 16, -67, -22, 50, 21, 22, 51, 52,
	-70, 15, 16, 17, -73, 17, -5, -79, 5, -79,
	-37, 35, 34, -49, -49, -49, -29, 17, 17, 17,
	-5, -5, 17, 16, 29, -5, 27, -39, 20, 22,
	21, 17, -38, 47, -5, -5, 17, -61, -66, -30,
	62, 16, -64, -63, -62, -30, -83, 16, -84, -85,
	76, -13, -25, 92, 16, -43, 38, -5, -13, -51,
	76, 77, -51, -28, -5, -5, 17, -38, 15, 17,
	17, 16, 53, 55, 56, -31, -66, -62, 53, 80,
	55, 56, 57, 58, 24, 15, -85, 69, 17, 15,
	5, -42, 36, 34, -5, 15, 32, -5, 54, 15,
	15, 54, 13, 15, 15, -6, -12, 103, 104, 59,
	15, -13, -86, 15, -13, -5, -44, -45, -5, -52,
	-5, 17, 15, -52, -5, -23, 39, 40, -5, -5,
	-65, -65, 24, -5, 17, 70, -52, 17, 16, 37,
	16, -20, 39, 40, 17, 17, -54, -55, -25, 17,
	17, 17, 17, 15, 17, 71, 67, 17, -5, -5,
	-45, -46, 41, 17, 16, -32, 111, -5, -59, 60,
	61, 68, -36, 42, 43, -55, -23, -31, 17, -74,
	-59, -36,
}

var yyDef = [...]int16{
	0, -2, 1, 13, 13, 4, 5, 6, 16, 0,
	8, 9, 10, 11, 12, 0, 0, 0, 0, 0,
	2, 14, 3, 14, 0, 17, 18, 0, 0, 0,
	0, 68, 241, 0, 236, 238, 239, 240, 0, 7,
	0, 19, 21, 24, 0, 69, 70, 0, 0, 0,
	156, 0, 104, 105, 0, 107, 108, -2, 109, 110,
	111, 112, 113, 114, 0, 0, 0, 0, 192, 193,
	194, 0, 212, 47, 0, 0, 0, 0, 47, 0,
	0, 22, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 96, 0, 0, 0, 0, 25, 0, 118, 119,
	120, 122, 124, 126, 127, 128, 129, 130, 132, 27,
	28, 0, 88, 0, 89, 90, 0, 157, 0, 0,
	0, 148, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 47, 226, 227, 228, 0, 0, 115,
	0, 237, 0, 49, 20, 29, 30, 31, 37, 0,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 91, 92, 93, 0, 97,
	0, 121, 123, 125, 131, 133, 0, 100, 102, 0,
	138, 26, 23, 71, 0, 161, 159, 0, 101, 140,
	0, 152, 0, 149, 142, 0, 0, 198, 164, 0,
	0, 211, 0, 116, 48, 225, 0, 0, 0, 0,
	0, 51, 0, 0, 0, 0, 33, 38, 0, 40,
	41, 0, 0, 0, 0, 94, 103, 0, 137, 0,
	150, 0, 160, 0, 0, 0, 0, 153, 154, 0,
	0, 0, 185, 199, -2, 167, 168, 169, 170, 171,
	216, 0, 0, 213, 229, 0, 231, 232, 234, 233,
	53, 0, 0, 32, 44, 44, 39, 37, 35, 36,
	87, 98, 139, 0, 99, 162, 0, 0, 134, 135,
	136, 154, 147, 0, 0, 0, 163, 165, 200, 0,
	0, 185, 166, -2, 174, 0, 210, 0, 217, 218,
	0, 0, 117, 0, 0, 64, 0, 52, 50, 43,
	0, 0, 42, 34, 151, 158, 106, 146, 0, 143,
	144, 0, 0, 0, 0, 186, 201, 175, 0, 0,
	178, 0, 0, 0, 0, 0, 219, 222, 214, 0,
	235, 15, 0, 0, 45, 0, 0, 0, 0, 0,
	0, 187, 177, 0, 0, 181, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 65, 54, 55, 58, 0,
	0, 145, 0, 0, 0, 176, 188, 189, 0, 0,
	190, 191, 0, 0, 215, 0, 0, 230, 0, 0,
	0, 61, 59, 60, 46, 155, 0, 205, 208, 203,
	204, 179, 180, 0, 195, 220, 0, 47, 66, 67,
	56, 57, 0, 202, 0, 187, 0, 0, 184, 196,
	197, 0, 223, 62, 63, 206, 207, 209, 195, 47,
	183, 221,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 107, 99, 3,
	15, 17, 105, 103, 16, 104, 18, 106, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 19,
	93, 92, 94, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 100, 3, 112,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 20, 21, 22, 23, 24, 25, 26,
	27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
	87, 88, 89, 90, 91, 95, 96, 97, 98, 101,
	102, 108, 109, 110, 111, 113,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).ast = &AST{Statements: yyDollar[1].stmts}
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.stmts = []Statement{yyDollar[1].statement}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.stmts = yyDollar[1].stmts
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.statement = yyDollar[1].selectStmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.statement = yyDollar[1].createTableStmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.stmts = []Statement{yyDollar[1].statement}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[3].statement)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).statementIdx++
			yyVAL.statement = yyDollar[1].insertStmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).statementIdx++
			yyVAL.statement = yyDollar[1].deleteStmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).statementIdx++
			yyVAL.statement = yyDollar[1].updateStmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).statementIdx++
			yyVAL.statement = yyDollar[1].grant
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).statementIdx++
			yyVAL.statement = yyDollar[1].revoke
		}
	case 13:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
		}
	case 15:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.selectStmt = &Select{
				Distinct:         yyDollar[2].string,
				SelectColumnList: yyDollar[3].SelectColumnList,
				From:             yyDollar[4].tableExprList,
				Where:            yyDollar[5].where,
				GroupBy:          GroupBy(yyDollar[6].exprs),
				Having:           yyDollar[7].where,
				OrderBy:          yyDollar[8].orderBy,
				Limit:            yyDollar[9].limit,
			}
		}
	case 16:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = ""
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = DistinctStr
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = AllStr
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.SelectColumnList = SelectColumnList{yyDollar[1].SelectColumn}
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.SelectColumnList = append(yyDollar[1].SelectColumnList, yyDollar[3].SelectColumn)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.SelectColumn = &StarSelectColumn{}
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.SelectColumn = &AliasedSelectColumn{Expr: yyDollar[1].expr, As: yyDollar[2].identifier}
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.SelectColumn = &StarSelectColumn{TableRef: yyDollar[1].table}
		}
	case 24:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.identifier = Identifier("")
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = yyDollar[1].identifier
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.identifier = yyDollar[2].identifier
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = yyDollar[1].identifier
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = Identifier(string(yyDollar[1].bytes[1 : len(yyDollar[1].bytes)-1]))
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tableExprList = yyDollar[2].tableExprList
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tableExprList = TableExprList{yyDollar[2].joinTableExpr}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tableExprList = TableExprList{yyDollar[1].tableExpr}
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tableExprList = append(yyVAL.tableExprList, yyDollar[3].tableExpr)
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].table, As: yyDollar[2].identifier}
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: &Subquery{Select: yyDollar[2].selectStmt}, As: yyDollar[4].identifier}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tableExpr = &ParenTableExpr{TableExprList: yyDollar[2].tableExprList}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tableExpr = yyDollar[2].joinTableExpr
		}
	case 37:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.identifier = Identifier("")
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = yyDollar[1].identifier
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.identifier = yyDollar[2].identifier
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = yyDollar[1].identifier
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = Identifier(string(yyDollar[1].bytes[1 : len(yyDollar[1].bytes)-1]))
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			if yyDollar[4].joinTableExpr == nil {
				yyVAL.joinTableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, JoinOperator: JoinStr, RightExpr: yyDollar[3].tableExpr}
			} else {
				yyDollar[4].joinTableExpr.LeftExpr = yyDollar[1].tableExpr
				yyDollar[4].joinTableExpr.JoinOperator = JoinStr
				yyDollar[4].joinTableExpr.RightExpr = yyDollar[3].tableExpr
				yyVAL.joinTableExpr = yyDollar[4].joinTableExpr
			}
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			if yyDollar[4].joinTableExpr == nil {
				yyVAL.joinTableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].joinTableExpr, JoinOperator: JoinStr, RightExpr: yyDollar[3].tableExpr}
			} else {
				yyDollar[4].joinTableExpr.LeftExpr = yyDollar[1].joinTableExpr
				yyDollar[4].joinTableExpr.JoinOperator = JoinStr
				yyDollar[4].joinTableExpr.RightExpr = yyDollar[3].tableExpr
				yyVAL.joinTableExpr = yyDollar[4].joinTableExpr
			}
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.joinTableExpr = nil
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.joinTableExpr = &JoinTableExpr{On: yyDollar[2].expr}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.joinTableExpr = &JoinTableExpr{Using: yyDollar[3].columnList}
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.where = nil
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.where = NewWhere(WhereStr, yyDollar[2].expr)
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exprs = nil
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.where = nil
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.where = NewWhere(HavingStr, yyDollar[2].expr)
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.orderBy = nil
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].orderingTerm}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].orderingTerm)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.orderingTerm = &OrderingTerm{Expr: yyDollar[1].expr, Direction: yyDollar[2].string, Nulls: yyDollar[3].nulls}
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = AscStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = AscStr
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = DescStr
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.nulls = NullsNil
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.nulls = NullsFirst
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.nulls = NullsLast
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.limit = nil
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.limit = &Limit{Limit: yyDollar[2].expr}
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Limit: yyDollar[4].expr}
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Limit: yyDollar[2].expr}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.table = &Table{Name: yyDollar[1].identifier}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].column
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyDollar[3].column.TableRef = yyDollar[1].table
			yyVAL.expr = yyDollar[3].column
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ConcatStr, Right: yyDollar[3].expr}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr, Escape: yyDollar[5].expr}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			if value, ok := yyDollar[2].expr.(*Value); ok && value.Type == IntValue {
				yyVAL.expr = &Value{Type: IntValue, Value: append([]byte("-"), value.Value...)}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &IsExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.expr = &IsExpr{Left: yyDollar[1].expr, Right: &NotExpr{Expr: yyDollar[4].expr}}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &IsNullExpr{Expr: yyDollar[1].expr}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &NotNullExpr{Expr: yyDollar[1].expr}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &NotNullExpr{Expr: yyDollar[1].expr}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.expr = &BetweenExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, CollationName: yyDollar[3].identifier}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 106:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].value
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			str := yyDollar[1].bytes[1 : len(yyDollar[1].bytes)-1]
			if len(str) > MaxTextLength {
				yylex.(*Lexer).AddError(&ErrTextTooLong{Length: len(str), MaxAllowed: MaxTextLength})
			}
			yyVAL.expr = &Value{Type: StrValue, Value: str}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if len(yyDollar[1].bytes) > MaxBlobLength {
				yylex.(*Lexer).AddError(&ErrBlobTooBig{Length: len(yyDollar[1].bytes), MaxAllowed: MaxBlobLength})
			}
			yyVAL.expr = &Value{Type: BlobValue, Value: yyDollar[1].bytes}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = BoolValue(true)
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = BoolValue(false)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &NullValue{}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.column = &Column{Name: Identifier(string(yyDollar[1].identifier))}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnList = ColumnList{yyDollar[1].column}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnList = append(yyDollar[1].columnList, yyDollar[3].column)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = EqualStr
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = NotEqualStr
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = RegexpStr
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotRegexpStr
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = GlobStr
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotGlobStr
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = MatchStr
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotMatchStr
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = LessThanStr
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = GreaterThanStr
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = LessEqualStr
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = GreaterEqualStr
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = LikeStr
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotLikeStr
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = BetweenStr
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotBetweenStr
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = NoneStr
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = TextStr
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = IntegerStr
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.colTuple = Exprs{}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.colTuple = yyDollar[2].exprs
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.subquery = &Subquery{Select: yyDollar[2].selectStmt}
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &NotExpr{Expr: &ExistsExpr{Subquery: yyDollar[3].subquery}}
		}
	case 143:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.expr = &FuncExpr{Name: Identifier("glob"), Args: Exprs{yyDollar[3].expr, yyDollar[5].expr}}
		}
	case 144:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.expr = &FuncExpr{Name: Identifier("like"), Args: Exprs{yyDollar[3].expr, yyDollar[5].expr}}
		}
	case 145:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.expr = &FuncExpr{Name: Identifier("like"), Args: Exprs{yyDollar[3].expr, yyDollar[5].expr, yyDollar[7].expr}}
		}
	case 146:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			lowered := strings.ToLower(string(yyDollar[1].identifier))
			if _, ok := AllowedFunctions[lowered]; !ok {
				yylex.(*Lexer).AddError(&ErrNoSuchFunction{FunctionName: string(yyDollar[1].identifier)})
			}
			yyVAL.expr = &FuncExpr{Name: Identifier(lowered), Distinct: yyDollar[3].bool, Args: yyDollar[4].exprs, Filter: yyDollar[6].where}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			lowered := strings.ToLower(string(yyDollar[1].identifier))
			if _, ok := AllowedFunctions[lowered]; !ok {
				yylex.(*Lexer).AddError(&ErrNoSuchFunction{FunctionName: string(yyDollar[1].identifier)})
			}
			yyVAL.expr = &FuncExpr{Name: Identifier(lowered), Distinct: false, Args: nil, Filter: yyDollar[5].where}
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.bool = false
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.bool = true
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exprs = nil
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.where = nil
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.where = &Where{Type: WhereStr, Expr: yyDollar[4].expr}
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.expr = nil
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.when = &When{Condition: yyDollar[2].expr, Value: yyDollar[4].expr}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.expr = nil
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 163:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			if len(yyDollar[5].columnDefList) > MaxAllowedColumns {
				yylex.(*Lexer).AddError(&ErrTooManyColumns{ColumnCount: len(yyDollar[5].columnDefList), MaxAllowed: MaxAllowedColumns})
			}

			// We have to replace a primary key table constraint with an equivalent column constraint primary key,
			// so we can add the autoincrement flag, as part of the rules of the Tableland Protocol.
			//
			// That happens because a primary key table constraint that references a single INTEGER column
			// would be an alias to rowid. For cases where a column becomes an alias to rowid we want to force the AUTOINCREMENT.
			//
			// The exception to the above rule is when a table constraint primary key has order DESC. In that case, we replace with an
			// equivalent column constrain without forcing AUTOINCREMENT and avoiding being interpreted as an alias.
			for index, tableConstraint := range yyDollar[6].tableConstraints {
				if tableConstraintPK, ok := tableConstraint.(*TableConstraintPrimaryKey); ok && len(tableConstraintPK.Columns) == 1 {
					for _, columnDef := range yyDollar[5].columnDefList {
						if columnDef.Type == TypeIntegerStr && !columnDef.HasPrimaryKey() {
							if tableConstraintPK != nil && columnDef.Column.Name == tableConstraintPK.Columns[0].Column.Name {
								forceAutoincrement := tableConstraintPK.Columns[0].Order != PrimaryKeyOrderDesc
								columnDef.Constraints = append(columnDef.Constraints, &ColumnConstraintPrimaryKey{Name: tableConstraintPK.Name, AutoIncrement: forceAutoincrement, Order: tableConstraintPK.Columns[0].Order})
								yyDollar[6].tableConstraints = append(yyDollar[6].tableConstraints[:index], yyDollar[6].tableConstraints[index+1:]...)
							}
						}
					}
				}
			}

			yyVAL.createTableStmt = &CreateTable{Table: yyDollar[3].table, ColumnsDef: yyDollar[5].columnDefList, Constraints: yyDollar[6].tableConstraints}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnDefList = []*ColumnDef{yyDollar[1].columnDef}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnDefList = append(yyDollar[1].columnDefList, yyDollar[3].columnDef)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if isRowID(yyDollar[1].column.Name) {
				yylex.(*Lexer).AddError(&ErrRowIDNotAllowed{})
			}

			if yyDollar[2].string == TypeIntegerStr {
				for _, constraint := range yyDollar[3].columnConstraints {
					if primaryKey, ok := constraint.(*ColumnConstraintPrimaryKey); ok {
						if primaryKey.Order != PrimaryKeyOrderDesc {
							primaryKey.AutoIncrement = true
						}
					}
				}
			}
			yyVAL.columnDef = &ColumnDef{Column: yyDollar[1].column, Type: yyDollar[2].string, Constraints: yyDollar[3].columnConstraints}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeIntStr
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeIntegerStr
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeTextStr
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeBlobStr
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeAnyStr
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.columnConstraints = []ColumnConstraint{}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnConstraints = yyDollar[1].columnConstraints
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if _, ok := yyDollar[1].columnConstraint.(*ColumnConstraintPrimaryKey); ok {
				if yylex.(*Lexer).createStmtHasPrimaryKey {
					yylex.(*Lexer).AddError(&ErrMultiplePrimaryKey{})
				} else {
					yylex.(*Lexer).createStmtHasPrimaryKey = true
				}
			}
			yyVAL.columnConstraints = []ColumnConstraint{yyDollar[1].columnConstraint}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			if _, ok := yyDollar[2].columnConstraint.(*ColumnConstraintPrimaryKey); ok && yylex.(*Lexer).createStmtHasPrimaryKey {
				yylex.(*Lexer).AddError(&ErrMultiplePrimaryKey{})
			}
			yyVAL.columnConstraints = append(yyDollar[1].columnConstraints, yyDollar[2].columnConstraint)
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintPrimaryKey{Name: yyDollar[1].identifier, Order: yyDollar[4].string}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintNotNull{Name: yyDollar[1].identifier}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintUnique{Name: yyDollar[1].identifier}
		}
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintCheck{Name: yyDollar[1].identifier, Expr: yyDollar[4].expr}
		}
	case 180:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintDefault{Name: yyDollar[1].identifier, Expr: yyDollar[4].expr, Parenthesis: true}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintDefault{Name: yyDollar[1].identifier, Expr: yyDollar[3].expr}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintDefault{Name: yyDollar[1].identifier, Expr: yyDollar[3].expr}
		}
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintGenerated{Name: yyDollar[1].identifier, Expr: yyDollar[6].expr, GeneratedAlways: true, IsStored: yyDollar[8].bool}
		}
	case 184:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintGenerated{Name: yyDollar[1].identifier, Expr: yyDollar[4].expr, GeneratedAlways: false, IsStored: yyDollar[6].bool}
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.identifier = Identifier("")
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.identifier = yyDollar[2].identifier
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = PrimaryKeyOrderEmpty
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = PrimaryKeyOrderAsc
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = PrimaryKeyOrderDesc
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = yyDollar[2].value
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyDollar[2].value.Value = append([]byte("-"), yyDollar[2].value.Value...)
			yyVAL.expr = yyDollar[2].value
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Value{Type: IntValue, Value: yyDollar[1].bytes}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).AddError(&ErrNumericLiteralFloat{Value: yyDollar[1].bytes})
			yyVAL.value = &Value{Type: FloatValue, Value: yyDollar[1].bytes}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Value{Type: HexNumValue, Value: yyDollar[1].bytes}
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.bool = false
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.bool = true
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.bool = false
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.tableConstraints = []TableConstraint{}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tableConstraints = yyDollar[1].tableConstraints
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			if _, ok := yyDollar[2].tableConstraint.(*TableConstraintPrimaryKey); ok {
				if yylex.(*Lexer).createStmtHasPrimaryKey {
					yylex.(*Lexer).AddError(&ErrMultiplePrimaryKey{})
				} else {
					yylex.(*Lexer).createStmtHasPrimaryKey = true
				}
			}
			yyVAL.tableConstraints = []TableConstraint{yyDollar[2].tableConstraint}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if _, ok := yyDollar[3].tableConstraint.(*TableConstraintPrimaryKey); ok && yylex.(*Lexer).createStmtHasPrimaryKey {
				yylex.(*Lexer).AddError(&ErrMultiplePrimaryKey{})
			}
			yyVAL.tableConstraints = append(yyDollar[1].tableConstraints, yyDollar[3].tableConstraint)
		}
	case 202:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.tableConstraint = &TableConstraintPrimaryKey{Name: yyDollar[1].identifier, Columns: yyDollar[5].indexedColumnList}
		}
	case 203:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.tableConstraint = &TableConstraintUnique{Name: yyDollar[1].identifier, Columns: yyDollar[4].columnList}
		}
	case 204:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.tableConstraint = &TableConstraintCheck{Name: yyDollar[1].identifier, Expr: yyDollar[4].expr}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.indexedColumnList = IndexedColumnList{yyDollar[1].indexedColumn}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.indexedColumnList = append(yyDollar[1].indexedColumnList, yyDollar[3].indexedColumn)
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.indexedColumn = &IndexedColumn{Column: yyDollar[1].column, CollationName: yyDollar[2].identifier, Order: yyDollar[3].string}
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.identifier = Identifier("")
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.identifier = Identifier(string(yyDollar[2].identifier))
		}
	case 210:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			for i := 0; i < len(yyDollar[4].columnList); i++ {
				if isRowID(yyDollar[4].columnList[i].Name) {
					yylex.(*Lexer).AddError(&ErrRowIDNotAllowed{})
				}
			}

			for _, row := range yyDollar[6].insertRows {
				for _, expr := range row {
					if expr.ContainsSubquery() {
						yylex.(*Lexer).AddError(&ErrStatementContainsSubquery{StatementKind: "insert"})
					}
				}
			}
			yyVAL.insertStmt = &Insert{Table: yyDollar[3].table, Columns: yyDollar[4].columnList, Rows: yyDollar[6].insertRows, Upsert: yyDollar[7].upsertClause}
		}
	case 211:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.insertStmt = &Insert{Table: yyDollar[3].table, Columns: ColumnList{}, Rows: []Exprs{}, DefaultValues: true}
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.columnList = ColumnList{}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnList = yyDollar[2].columnList
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.insertRows = []Exprs{yyDollar[2].exprs}
		}
	case 215:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.insertRows = append(yyDollar[1].insertRows, yyDollar[4].exprs)
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.upsertClause = nil
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			allConflictClausesExceptLast := yyDollar[1].onConflictClauseList[0 : len(yyDollar[1].onConflictClauseList)-1]
			for _, clause := range allConflictClausesExceptLast {
				if clause.Target == nil {
					yylex.(*Lexer).AddError(&ErrUpsertMissingTarget{})
				}
			}
			yyVAL.upsertClause = yyDollar[1].onConflictClauseList
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.onConflictClauseList = []*OnConflictClause{yyDollar[1].onConflictClause}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.onConflictClauseList = append(yyDollar[1].onConflictClauseList, yyDollar[2].onConflictClause)
		}
	case 220:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.onConflictClause = &OnConflictClause{
				Target: yyDollar[3].onConflictTarget,
			}
		}
	case 221:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			if yyDollar[8].where != nil && yyDollar[8].where.Expr.ContainsSubquery() {
				yylex.(*Lexer).AddError(&ErrStatementContainsSubquery{StatementKind: "where"})
			}

			yyVAL.onConflictClause = &OnConflictClause{
				Target: yyDollar[3].onConflictTarget,
				DoUpdate: &OnConflictUpdate{
					Exprs: yyDollar[7].updateList,
					Where: yyDollar[8].where,
				},
			}
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.onConflictTarget = nil
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			if yyDollar[4].where != nil && yyDollar[4].where.Expr.ContainsSubquery() {
				yylex.(*Lexer).AddError(&ErrStatementContainsSubquery{StatementKind: "where"})
			}

			yyVAL.onConflictTarget = &OnConflictTarget{
				Columns: yyDollar[2].columnList,
				Where:   yyDollar[4].where,
			}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			if yyDollar[4].where != nil && yyDollar[4].where.Expr.ContainsSubquery() {
				yylex.(*Lexer).AddError(&ErrStatementContainsSubquery{StatementKind: "delete"})
			}
			yyVAL.deleteStmt = &Delete{Table: yyDollar[3].table, Where: yyDollar[4].where}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			if yyDollar[5].where != nil && yyDollar[5].where.Expr.ContainsSubquery() {
				yylex.(*Lexer).AddError(&ErrStatementContainsSubquery{StatementKind: "where"})
			}
			yyVAL.updateStmt = &Update{Table: yyDollar[2].table, Exprs: yyDollar[4].updateList, Where: yyDollar[5].where}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.updateList = yyDollar[1].updateList
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.updateList = yyDollar[1].updateList
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if yyDollar[1].updateExpression.Expr.ContainsSubquery() {
				yylex.(*Lexer).AddError(&ErrStatementContainsSubquery{StatementKind: "update"})
			}
			yyVAL.updateList = []*UpdateExpr{yyDollar[1].updateExpression}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.updateList = append(yyDollar[1].updateList, yyDollar[3].updateExpression)
		}
	case 230:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			if len(yyDollar[2].columnList) != len(yyDollar[6].exprs) {
				yylex.(*Lexer).AddError(&ErrUpdateColumnsAndValuesDiffer{ColumnsCount: len(yyDollar[2].columnList), ValuesCount: len(yyDollar[6].exprs)})
				yyVAL.updateList = []*UpdateExpr{}
			} else {
				exprs := make([]*UpdateExpr, len(yyDollar[2].columnList))
				for i := 0; i < len(yyDollar[2].columnList); i++ {
					if isRowID(yyDollar[2].columnList[i].Name) {
						yylex.(*Lexer).AddError(&ErrRowIDNotAllowed{})
					}
					exprs[i] = &UpdateExpr{Column: yyDollar[2].columnList[i], Expr: yyDollar[6].exprs[i]}
				}
				yyVAL.updateList = exprs
			}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if isRowID(yyDollar[1].column.Name) {
				yylex.(*Lexer).AddError(&ErrRowIDNotAllowed{})
			}
			yyVAL.updateExpression = &UpdateExpr{Column: yyDollar[1].column, Expr: yyDollar[3].expr}
		}
	case 232:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.grant = &Grant{Table: yyDollar[4].table, Privileges: yyDollar[2].privileges, Roles: yyDollar[6].strings}
		}
	case 233:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.revoke = &Revoke{Table: yyDollar[4].table, Privileges: yyDollar[2].privileges, Roles: yyDollar[6].strings}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.strings = []string{string(yyDollar[1].bytes[1 : len(yyDollar[1].bytes)-1])}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.strings = append(yyDollar[1].strings, string(yyDollar[3].bytes[1:len(yyDollar[3].bytes)-1]))
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			privileges := make(map[string]struct{})
			privileges[yyDollar[1].string] = struct{}{}
			yyVAL.privileges = Privileges(privileges)
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if _, ok := yyDollar[1].privileges[yyDollar[3].string]; ok {
				yylex.(*Lexer).AddError(&ErrGrantRepeatedPrivilege{Privilege: yyDollar[3].string})
			}

			yyDollar[1].privileges[yyDollar[3].string] = struct{}{}
			yyVAL.privileges = yyDollar[1].privileges
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = "insert"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = "update"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = "delete"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			literalUpper := bytes.ToUpper(yyDollar[1].bytes)
			if _, ok := keywordsNotAllowed[string(literalUpper)]; ok {
				yylex.(*Lexer).AddError(&ErrKeywordIsNotAllowed{Keyword: string(yyDollar[1].bytes)})
			}

			yyVAL.identifier = Identifier(yyDollar[1].bytes)
		}
	}
	goto yystack /* stack new state and value */
}
