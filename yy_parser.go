// Code generated by goyacc -l -o yy_parser.go grammar.y. DO NOT EDIT.
package sqlparser

import __yyfmt__ "fmt"

const MaxColumnNameLength = 64

type yySymType struct {
	yys               int
	bool              bool
	string            string
	bytes             []byte
	expr              Expr
	exprs             Exprs
	column            *Column
	table             *Table
	convertType       ConvertType
	when              *When
	whens             []*When
	SelectColumn      SelectColumn
	SelectColumnList  SelectColumnList
	selectStmt        *Select
	where             *Where
	limit             *Limit
	orderBy           OrderBy
	orderingTerm      *OrderingTerm
	nulls             NullsType
	tableExprList     TableExprList
	tableExpr         TableExpr
	joinTableExpr     *JoinTableExpr
	columnList        ColumnList
	subquery          *Subquery
	colTuple          ColTuple
	statement         Statement
	identifier        Identifier
	createTableStmt   *CreateTable
	columnDefList     []*ColumnDef
	columnDef         *ColumnDef
	columnConstraint  ColumnConstraint
	columnConstraints []ColumnConstraint
	value             *Value
	tableConstraint   TableConstraint
	tableConstraints  []TableConstraint
	insertStmt        *Insert
	insertRows        []Exprs
	deleteStmt        *Delete
	updateStmt        *Update
	updateExpression  *UpdateExpr
	updateList        []*UpdateExpr
	grant             *Grant
	revoke            *Revoke
	strings           []string
	privileges        Privileges
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGRAL = 57348
const HEXNUM = 57349
const FLOAT = 57350
const BLOBVAL = 57351
const ERROR = 57352
const TRUE = 57353
const FALSE = 57354
const NULL = 57355
const AND = 57356
const NONE = 57357
const INTEGER = 57358
const NUMERIC = 57359
const REAL = 57360
const TEXT = 57361
const CAST = 57362
const AS = 57363
const CASE = 57364
const WHEN = 57365
const THEN = 57366
const ELSE = 57367
const END = 57368
const SELECT = 57369
const FROM = 57370
const WHERE = 57371
const GROUP = 57372
const BY = 57373
const HAVING = 57374
const LIMIT = 57375
const OFFSET = 57376
const ORDER = 57377
const ASC = 57378
const DESC = 57379
const NULLS = 57380
const FIRST = 57381
const LAST = 57382
const DISTINCT = 57383
const ALL = 57384
const EXISTS = 57385
const FILTER = 57386
const CREATE = 57387
const TABLE = 57388
const INT = 57389
const BLOB = 57390
const ANY = 57391
const PRIMARY = 57392
const KEY = 57393
const UNIQUE = 57394
const CHECK = 57395
const DEFAULT = 57396
const GENERATED = 57397
const ALWAYS = 57398
const STORED = 57399
const VIRTUAL = 57400
const CONSTRAINT = 57401
const INSERT = 57402
const INTO = 57403
const VALUES = 57404
const DELETE = 57405
const UPDATE = 57406
const SET = 57407
const GRANT = 57408
const TO = 57409
const REVOKE = 57410
const JOIN = 57411
const ON = 57412
const USING = 57413
const OR = 57414
const ANDOP = 57415
const NOT = 57416
const IS = 57417
const ISNOT = 57418
const MATCH = 57419
const GLOB = 57420
const REGEXP = 57421
const LIKE = 57422
const BETWEEN = 57423
const IN = 57424
const ISNULL = 57425
const NOTNULL = 57426
const NE = 57427
const LE = 57428
const GE = 57429
const INEQUALITY = 57430
const ESCAPE = 57431
const LSHIFT = 57432
const RSHIFT = 57433
const CONCAT = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const COLLATE = 57437
const UNARY = 57438

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGRAL",
	"HEXNUM",
	"FLOAT",
	"BLOBVAL",
	"ERROR",
	"TRUE",
	"FALSE",
	"NULL",
	"AND",
	"'('",
	"','",
	"')'",
	"'.'",
	"';'",
	"NONE",
	"INTEGER",
	"NUMERIC",
	"REAL",
	"TEXT",
	"CAST",
	"AS",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"SELECT",
	"FROM",
	"WHERE",
	"GROUP",
	"BY",
	"HAVING",
	"LIMIT",
	"OFFSET",
	"ORDER",
	"ASC",
	"DESC",
	"NULLS",
	"FIRST",
	"LAST",
	"DISTINCT",
	"ALL",
	"EXISTS",
	"FILTER",
	"CREATE",
	"TABLE",
	"INT",
	"BLOB",
	"ANY",
	"PRIMARY",
	"KEY",
	"UNIQUE",
	"CHECK",
	"DEFAULT",
	"GENERATED",
	"ALWAYS",
	"STORED",
	"VIRTUAL",
	"CONSTRAINT",
	"INSERT",
	"INTO",
	"VALUES",
	"DELETE",
	"UPDATE",
	"SET",
	"GRANT",
	"TO",
	"REVOKE",
	"JOIN",
	"ON",
	"USING",
	"OR",
	"ANDOP",
	"NOT",
	"IS",
	"ISNOT",
	"MATCH",
	"GLOB",
	"REGEXP",
	"LIKE",
	"BETWEEN",
	"IN",
	"ISNULL",
	"NOTNULL",
	"NE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"INEQUALITY",
	"ESCAPE",
	"'&'",
	"'|'",
	"LSHIFT",
	"RSHIFT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"CONCAT",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"COLLATE",
	"'~'",
	"UNARY",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 55,
	18, 64,
	-2, 110,
	-1, 248,
	16, 170,
	17, 170,
	-2, 183,
	-1, 298,
	16, 171,
	17, 171,
	-2, 183,
}

const yyPrivate = 57344

const yyLast = 1368

var yyAct = [...]int16{
	234, 407, 364, 205, 56, 44, 233, 294, 299, 287,
	220, 293, 203, 309, 221, 153, 260, 142, 192, 184,
	103, 129, 3, 152, 151, 105, 42, 145, 303, 212,
	122, 219, 45, 137, 310, 311, 218, 50, 83, 84,
	85, 90, 91, 92, 103, 31, 197, 121, 123, 124,
	126, 90, 91, 92, 103, 34, 43, 40, 213, 70,
	71, 72, 86, 87, 88, 89, 81, 82, 83, 84,
	85, 90, 91, 92, 103, 73, 75, 29, 75, 42,
	302, 272, 156, 157, 158, 159, 160, 161, 162, 163,
	164, 165, 166, 167, 168, 169, 170, 171, 172, 173,
	207, 130, 295, 182, 196, 146, 144, 148, 357, 43,
	154, 149, 81, 82, 83, 84, 85, 90, 91, 92,
	103, 145, 35, 408, 409, 37, 36, 188, 194, 349,
	135, 147, 187, 200, 201, 76, 150, 74, 218, 208,
	346, 322, 186, 323, 324, 28, 175, 211, 112, 113,
	114, 115, 288, 189, 86, 87, 88, 89, 81, 82,
	83, 84, 85, 90, 91, 92, 103, 204, 206, 199,
	131, 26, 27, 209, 136, 229, 206, 225, 404, 227,
	226, 295, 411, 412, 373, 374, 154, 306, 340, 264,
	341, 265, 216, 334, 238, 344, 230, 57, 67, 69,
	68, 58, 241, 59, 60, 61, 138, 352, 214, 250,
	236, 251, 252, 259, 186, 179, 178, 177, 180, 181,
	176, 10, 328, 189, 330, 331, 332, 333, 257, 273,
	30, 262, 274, 266, 267, 268, 32, 269, 278, 11,
	249, 253, 254, 144, 289, 290, 329, 155, 154, 154,
	154, 78, 10, 277, 12, 193, 300, 13, 14, 292,
	15, 193, 16, 237, 10, 307, 379, 18, 79, 223,
	224, 190, 308, 276, 410, 255, 405, 314, 120, 204,
	315, 313, 312, 281, 284, 285, 283, 282, 301, 255,
	393, 222, 255, 390, 355, 356, 317, 276, 383, 276,
	382, 276, 275, 217, 271, 316, 300, 327, 326, 255,
	258, 342, 255, 256, 291, 286, 270, 242, 198, 386,
	33, 359, 345, 276, 304, 55, 57, 67, 69, 68,
	58, 296, 59, 60, 61, 246, 62, 38, 353, 32,
	217, 362, 365, 360, 361, 367, 52, 366, 49, 371,
	155, 370, 375, 376, 210, 118, 119, 145, 397, 380,
	377, 378, 381, 369, 358, 351, 338, 348, 143, 63,
	347, 343, 337, 392, 336, 318, 206, 106, 185, 62,
	206, 134, 133, 132, 128, 400, 401, 365, 399, 402,
	127, 350, 67, 69, 68, 223, 224, 261, 406, 145,
	64, 325, 206, 17, 65, 183, 66, 32, 19, 20,
	21, 22, 23, 24, 1, 414, 118, 119, 9, 8,
	141, 140, 139, 47, 46, 41, 388, 389, 97, 96,
	101, 98, 48, 111, 110, 109, 116, 117, 104, 99,
	100, 108, 107, 112, 113, 114, 115, 321, 320, 86,
	87, 88, 89, 81, 82, 83, 84, 85, 90, 91,
	92, 103, 97, 96, 101, 98, 7, 111, 110, 109,
	116, 117, 104, 99, 100, 108, 107, 112, 113, 114,
	115, 384, 6, 86, 87, 88, 89, 81, 82, 83,
	84, 85, 90, 91, 92, 103, 335, 5, 245, 247,
	297, 298, 202, 195, 385, 77, 403, 363, 97, 96,
	101, 98, 305, 111, 110, 109, 116, 117, 104, 99,
	100, 108, 107, 112, 113, 114, 115, 413, 339, 86,
	87, 88, 89, 81, 82, 83, 84, 85, 90, 91,
	92, 103, 97, 96, 101, 98, 191, 111, 110, 109,
	116, 117, 104, 99, 100, 108, 107, 112, 113, 114,
	115, 398, 280, 86, 87, 88, 89, 81, 82, 83,
	84, 85, 90, 91, 92, 103, 263, 39, 80, 372,
	248, 25, 387, 102, 95, 94, 93, 97, 96, 101,
	98, 215, 111, 110, 109, 116, 117, 104, 99, 100,
	108, 107, 112, 113, 114, 115, 396, 240, 86, 87,
	88, 89, 81, 82, 83, 84, 85, 90, 91, 92,
	103, 97, 96, 101, 98, 354, 111, 110, 109, 116,
	117, 104, 99, 100, 108, 107, 112, 113, 114, 115,
	395, 51, 86, 87, 88, 89, 81, 82, 83, 84,
	85, 90, 91, 92, 103, 235, 125, 54, 53, 4,
	2, 0, 0, 0, 0, 0, 97, 96, 101, 98,
	0, 111, 110, 109, 116, 117, 104, 99, 100, 108,
	107, 112, 113, 114, 115, 394, 0, 86, 87, 88,
	89, 81, 82, 83, 84, 85, 90, 91, 92, 103,
	97, 96, 101, 98, 0, 111, 110, 109, 116, 117,
	104, 99, 100, 108, 107, 112, 113, 114, 115, 391,
	0, 86, 87, 88, 89, 81, 82, 83, 84, 85,
	90, 91, 92, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 96, 101, 98, 0,
	111, 110, 109, 116, 117, 104, 99, 100, 108, 107,
	112, 113, 114, 115, 368, 0, 86, 87, 88, 89,
	81, 82, 83, 84, 85, 90, 91, 92, 103, 97,
	96, 101, 98, 0, 111, 110, 109, 116, 117, 104,
	99, 100, 108, 107, 112, 113, 114, 115, 319, 0,
	86, 87, 88, 89, 81, 82, 83, 84, 85, 90,
	91, 92, 103, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 96, 101, 98, 0, 111,
	110, 109, 116, 117, 104, 99, 100, 108, 107, 112,
	113, 114, 115, 0, 279, 86, 87, 88, 89, 81,
	82, 83, 84, 85, 90, 91, 92, 103, 97, 96,
	101, 98, 0, 111, 110, 109, 116, 117, 104, 99,
	100, 108, 107, 112, 113, 114, 115, 244, 0, 86,
	87, 88, 89, 81, 82, 83, 84, 85, 90, 91,
	92, 103, 97, 96, 101, 98, 0, 111, 110, 109,
	116, 117, 104, 99, 100, 108, 107, 112, 113, 114,
	115, 243, 0, 86, 87, 88, 89, 81, 82, 83,
	84, 85, 90, 91, 92, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 96,
	101, 98, 0, 111, 110, 109, 116, 117, 104, 99,
	100, 108, 107, 112, 113, 114, 115, 239, 0, 86,
	87, 88, 89, 81, 82, 83, 84, 85, 90, 91,
	92, 103, 97, 96, 101, 98, 0, 111, 110, 109,
	116, 117, 104, 99, 100, 108, 107, 112, 113, 114,
	115, 231, 0, 86, 87, 88, 89, 81, 82, 83,
	84, 85, 90, 91, 92, 103, 0, 0, 97, 96,
	101, 98, 0, 111, 110, 109, 116, 117, 104, 99,
	100, 108, 107, 112, 113, 114, 115, 0, 0, 86,
	87, 88, 89, 81, 82, 83, 84, 85, 90, 91,
	92, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 96, 101, 98, 0, 111,
	110, 109, 116, 117, 104, 99, 100, 108, 107, 112,
	113, 114, 115, 0, 0, 86, 87, 88, 89, 81,
	82, 83, 84, 85, 90, 91, 92, 103, 97, 96,
	101, 98, 0, 111, 110, 109, 116, 117, 104, 99,
	100, 108, 107, 112, 113, 114, 115, 0, 0, 86,
	87, 88, 89, 81, 82, 83, 84, 85, 90, 91,
	92, 103, 96, 101, 98, 0, 111, 110, 109, 116,
	117, 104, 99, 100, 108, 107, 112, 113, 114, 115,
	0, 0, 86, 87, 88, 89, 81, 82, 83, 84,
	85, 90, 91, 92, 103, 101, 98, 0, 111, 110,
	109, 116, 117, 104, 99, 100, 108, 107, 112, 113,
	114, 115, 0, 0, 86, 87, 88, 89, 81, 82,
	83, 84, 85, 90, 91, 92, 103, 55, 57, 67,
	69, 68, 58, 0, 59, 60, 61, 0, 62, 0,
	232, 0, 0, 0, 0, 0, 0, 0, 52, 0,
	49, 0, 0, 0, 0, 10, 55, 57, 67, 69,
	68, 58, 0, 59, 60, 61, 0, 62, 0, 0,
	0, 63, 0, 0, 0, 0, 0, 52, 0, 49,
	0, 0, 0, 0, 0, 0, 55, 57, 67, 69,
	68, 58, 0, 59, 60, 61, 0, 62, 0, 0,
	63, 0, 64, 0, 0, 0, 65, 52, 66, 49,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 47, 46, 0, 0, 0,
	63, 64, 0, 174, 48, 65, 0, 66, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 47, 46, 0, 0, 0, 0,
	0, 64, 0, 48, 0, 65, 0, 66, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 47, 46, 0, 0, 0, 112,
	113, 114, 115, 48, 228, 86, 87, 88, 89, 81,
	82, 83, 84, 85, 90, 91, 92, 103,
}

var yyPact = [...]int16{
	189, -1000, -1000, 248, 248, 248, 248, 248, 248, 248,
	125, 94, 11, 197, 403, 57, 57, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 321, -1000, -1000, 403, 403,
	403, 5, -1000, 62, -1000, -1000, -1000, -1000, 60, 235,
	-1000, -1000, 351, 260, -1000, -1000, 1242, 1242, 1242, 1242,
	-1000, -1000, 375, -1000, -1000, 369, -1000, -1000, -1000, -1000,
	-1000, -1000, 220, 364, 122, 368, 367, -1000, -1000, -1000,
	366, 115, 172, 353, 403, 57, 403, 172, 321, 335,
	-1000, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
	1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1212, -1000,
	-1000, 133, 1242, 401, 363, -1000, 412, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	23, -1000, 253, -1000, -1000, 227, 1011, 1242, 0, 301,
	-1000, 364, 1242, 1242, 395, 395, 33, -1000, 1242, 172,
	338, -1000, -1000, 395, -62, -1000, -14, -1000, 175, 157,
	-1000, 324, -38, -43, 265, 232, -66, -66, -56, -56,
	-56, 10, 10, 10, 10, -90, -90, -90, 56, -36,
	1257, 1076, 1044, 56, 1242, -1000, 363, -1000, -1000, -1000,
	-1000, -1000, 977, -1000, -1000, 1183, -1000, -1000, -1000, -1000,
	395, 233, -1000, 1242, 931, 1242, 300, -1000, -1000, -1000,
	895, 861, 319, -1000, 188, 296, -1000, -1000, 1011, -1000,
	395, 293, 1242, 392, 392, 152, 155, 335, 335, 335,
	-1000, -1000, 391, -1000, -1000, 299, 287, 64, 1242, 56,
	-1000, 1242, -1000, 285, 1011, 222, -1000, 1242, 815, 263,
	298, 307, 103, 1242, 1242, 297, 117, 315, 38, -1000,
	-1000, -1000, -1000, -1000, -1000, 395, 13, -1000, -63, 1011,
	308, -1000, 308, 147, 1242, 1242, -1000, -41, -41, -1000,
	265, -1000, -1000, 56, 56, -1000, 1242, -1000, 1011, 1242,
	288, -1000, -1000, -1000, -1000, -1000, 103, -1000, 360, 781,
	431, -1000, -1000, -1000, 86, 397, 38, -1000, 38, -1000,
	167, -1000, 359, 357, 361, 150, 154, 1011, 307, -1000,
	1242, 356, -1000, -1000, 1011, 1011, -1000, -1000, 161, -1000,
	-1000, 1242, 84, 355, 352, -1000, -1000, -1000, 73, 378,
	-1000, 350, 192, 47, 349, 305, 1242, 1242, -1000, -1000,
	1242, 1242, 1011, 395, 1242, 747, 348, 395, 1242, 143,
	-1000, 1242, 1242, -1000, -1000, 386, 386, 240, 1242, 347,
	283, 281, 465, 303, -1000, 385, 276, 702, -1000, 395,
	273, 668, -1000, -1000, -1000, 623, 589, -1000, -1000, 343,
	544, 1242, -1000, -1000, 1242, 1242, 1242, 135, -1000, -1000,
	-1000, -1000, 259, -1000, -1000, -1000, -1000, 1242, 61, 257,
	1011, 1011, -1000, -1000, 138, -1000, 510, -1000, -1000, -1000,
	-1000, -1000, -1000, 61, -1000,
}

var yyPgo = [...]int16{
	0, 660, 21, 659, 0, 5, 658, 657, 656, 655,
	641, 625, 6, 607, 591, 586, 585, 584, 583, 582,
	581, 580, 579, 55, 32, 578, 25, 10, 14, 7,
	57, 577, 30, 33, 576, 9, 562, 18, 546, 528,
	512, 507, 2, 506, 24, 505, 15, 23, 13, 3,
	37, 19, 503, 1, 502, 12, 8, 501, 500, 4,
	11, 499, 498, 497, 496, 482, 466, 17, 422, 421,
	420, 419, 418, 16, 320, 414, 403,
}

var yyR1 = [...]int8{
	0, 75, 1, 1, 1, 1, 1, 1, 1, 76,
	76, 2, 20, 20, 20, 31, 31, 30, 30, 30,
	25, 25, 25, 26, 26, 45, 45, 44, 44, 46,
	46, 46, 46, 27, 27, 27, 28, 28, 47, 47,
	48, 48, 48, 33, 33, 14, 14, 34, 34, 40,
	40, 41, 41, 42, 19, 19, 19, 43, 43, 43,
	39, 39, 39, 39, 32, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 5, 5, 5, 5, 5, 5,
	24, 49, 49, 15, 15, 15, 15, 15, 15, 15,
	15, 16, 16, 16, 16, 17, 17, 18, 18, 36,
	36, 36, 36, 36, 51, 51, 51, 50, 10, 10,
	6, 6, 6, 7, 7, 52, 52, 12, 12, 13,
	13, 35, 35, 8, 8, 37, 38, 38, 9, 9,
	3, 54, 54, 55, 21, 21, 21, 21, 21, 21,
	58, 58, 57, 57, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 29, 29, 22, 22, 22, 11, 11,
	59, 59, 59, 53, 53, 53, 62, 62, 61, 61,
	60, 60, 60, 63, 63, 64, 64, 65, 66, 68,
	68, 69, 69, 70, 67, 71, 72, 73, 73, 74,
	74, 23, 23, 23,
}

var yyR2 = [...]int8{
	0, 1, 2, 2, 2, 2, 2, 2, 2, 0,
	1, 9, 0, 1, 1, 1, 3, 1, 2, 3,
	0, 1, 2, 1, 1, 2, 2, 1, 3, 2,
	4, 3, 3, 0, 1, 2, 1, 1, 4, 4,
	0, 2, 4, 0, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 3, 0, 1, 1, 0, 2, 2,
	0, 2, 4, 4, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	4, 2, 2, 3, 5, 5, 3, 3, 4, 1,
	1, 6, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 2, 1, 3, 3, 2, 3,
	6, 6, 8, 6, 5, 0, 1, 1, 3, 0,
	1, 0, 5, 0, 1, 4, 1, 2, 0, 2,
	7, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 2, 4, 3, 2, 5, 5, 3,
	3, 8, 6, 0, 2, 0, 1, 1, 2, 2,
	1, 1, 1, 0, 1, 1, 0, 1, 2, 3,
	6, 5, 5, 8, 5, 3, 5, 4, 5, 1,
	1, 1, 3, 7, 3, 6, 6, 1, 3, 1,
	3, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -75, -1, -2, -3, -63, -65, -66, -71, -72,
	32, 50, 65, 68, 69, 71, 73, -76, 19, -76,
	-76, -76, -76, -76, -76, -20, 46, 47, 51, 66,
	33, -32, 4, -74, -23, 65, 69, 68, -74, -31,
	-30, 104, -4, -32, -5, -24, 103, 102, 111, 27,
	-50, -10, 25, -6, -7, 4, -59, 5, 9, 11,
	12, 13, 15, 48, 79, 83, 85, 6, 8, 7,
	-32, -32, -32, 70, 75, 16, 75, -45, 16, 33,
	-25, 102, 103, 104, 105, 106, 98, 99, 100, 101,
	107, 108, 109, -15, -16, -17, 78, 77, 80, 88,
	89, 79, -18, 110, 87, -26, 26, 91, 90, 84,
	83, 82, 92, 93, 94, 95, 85, 86, 4, 5,
	18, -4, -32, -4, -4, -8, -4, 15, 15, -2,
	-50, 48, 15, 15, 15, 15, 59, -33, 34, -68,
	-69, -70, -67, 15, -24, 4, -32, -23, -32, -33,
	-30, -44, -47, -46, -32, 15, -4, -4, -4, -4,
	-4, -4, -4, -4, -4, -4, -4, -4, -4, -4,
	-4, -4, -4, -4, 81, 13, 87, 84, 83, 82,
	85, 86, -4, 4, -51, 15, -50, -26, 104, -24,
	18, -38, -37, 28, -4, -52, 104, 46, 17, -50,
	-4, -4, -54, -55, -24, -49, -24, 67, -4, -33,
	16, -49, 91, 72, 33, -14, 35, 16, 74, 74,
	-27, -28, 26, 4, 5, -2, -44, -47, 97, -4,
	-51, 14, 17, -12, -4, -9, -37, 30, -4, 26,
	-13, -12, 17, 16, 16, -62, 16, -61, -21, 52,
	21, 23, 24, 53, 54, 16, 17, -67, 17, -4,
	-73, 5, -73, -34, 37, 36, -46, -46, -46, -28,
	17, 17, 17, -4, -4, 17, 16, 31, -4, 29,
	-36, 20, 24, 23, 21, 22, 17, -35, 49, -4,
	-4, 17, -55, -60, -29, 64, 16, -58, -57, -56,
	-29, -24, 67, 91, 16, -40, 40, -4, -12, -48,
	75, 76, -48, -27, -4, -4, 17, -35, 15, 17,
	17, 16, 55, 57, 58, 4, -60, -56, 55, 79,
	57, 58, 59, 60, 26, -64, 15, 15, 5, -39,
	38, 36, -4, 15, 34, -4, 56, 15, 15, 56,
	13, 15, 15, -5, -11, 102, 103, 61, 15, 16,
	-12, -12, -4, -41, -42, -4, -49, -4, 17, 15,
	-49, -4, -22, 41, 42, -4, -4, -59, -59, 26,
	-4, 15, 17, 17, 16, 39, 16, -19, 41, 42,
	17, 17, -49, 17, 17, 17, 17, 15, 17, -12,
	-4, -4, -42, -43, 43, 17, -4, -53, 62, 63,
	17, 44, 45, 17, -53,
}

var yyDef = [...]int16{
	0, -2, 1, 9, 9, 9, 9, 9, 9, 9,
	12, 0, 0, 0, 0, 0, 0, 2, 10, 3,
	4, 5, 6, 7, 8, 0, 13, 14, 0, 0,
	0, 0, 64, 0, 219, 221, 222, 223, 0, 0,
	15, 17, 20, 0, 65, 66, 0, 0, 0, 153,
	99, 100, 0, 102, 103, -2, 104, 105, 106, 107,
	108, 109, 0, 0, 0, 0, 0, 190, 191, 192,
	0, 0, 43, 0, 0, 0, 0, 43, 0, 0,
	18, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 0, 0, 0, 0, 21, 0, 113, 114, 115,
	117, 119, 121, 122, 123, 124, 125, 127, 23, 24,
	0, 84, 0, 85, 86, 0, 154, 0, 145, 0,
	138, 0, 0, 0, 0, 0, 0, 207, 0, 43,
	209, 210, 211, 0, 0, 110, 0, 220, 0, 45,
	16, 25, 26, 27, 33, 0, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 87, 88, 89, 0, 93, 0, 116, 118, 120,
	126, 128, 0, 96, 97, 0, 135, 22, 19, 67,
	0, 158, 156, 0, 0, 149, 0, 146, 137, 139,
	0, 0, 196, 161, 0, 0, 111, 204, 44, 208,
	0, 0, 0, 0, 0, 47, 0, 0, 0, 0,
	29, 34, 0, 36, 37, 0, 0, 0, 0, 90,
	98, 0, 134, 0, 147, 0, 157, 0, 0, 0,
	0, 150, 151, 0, 0, 0, 183, 197, -2, 164,
	165, 166, 167, 168, 169, 0, 0, 212, 0, 214,
	215, 217, 216, 49, 0, 0, 28, 40, 40, 35,
	33, 31, 32, 83, 94, 136, 0, 95, 159, 0,
	0, 129, 130, 131, 132, 133, 151, 144, 0, 0,
	0, 160, 162, 198, 0, 0, 183, 163, -2, 172,
	0, 112, 0, 0, 0, 60, 0, 48, 46, 39,
	0, 0, 38, 30, 148, 155, 101, 143, 0, 140,
	141, 0, 0, 0, 0, 184, 199, 173, 0, 0,
	176, 0, 0, 0, 0, 203, 0, 0, 218, 11,
	0, 0, 41, 0, 0, 0, 0, 0, 0, 185,
	175, 0, 0, 179, 180, 0, 0, 0, 0, 0,
	0, 0, 61, 50, 51, 54, 0, 0, 142, 0,
	0, 0, 174, 186, 187, 0, 0, 188, 189, 0,
	0, 0, 205, 213, 0, 0, 0, 57, 55, 56,
	42, 152, 0, 201, 202, 177, 178, 0, 193, 0,
	62, 63, 52, 53, 0, 200, 0, 182, 194, 195,
	206, 58, 59, 193, 181,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 106, 98, 3,
	15, 17, 104, 102, 16, 103, 18, 105, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 19,
	92, 91, 93, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 99, 3, 111,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 20, 21, 22, 23, 24, 25, 26,
	27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
	87, 88, 89, 90, 94, 95, 96, 97, 100, 101,
	107, 108, 109, 110, 112,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).ast = &AST{yyDollar[1].statement}
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.statement = yyDollar[1].selectStmt
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.statement = yyDollar[1].createTableStmt
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.statement = yyDollar[1].insertStmt
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.statement = yyDollar[1].deleteStmt
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.statement = yyDollar[1].updateStmt
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.statement = yyDollar[1].grant
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.statement = yyDollar[1].revoke
		}
	case 9:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
		}
	case 11:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.selectStmt = &Select{
				Distinct:         yyDollar[2].string,
				SelectColumnList: yyDollar[3].SelectColumnList,
				From:             yyDollar[4].tableExprList,
				Where:            yyDollar[5].where,
				GroupBy:          GroupBy(yyDollar[6].exprs),
				Having:           yyDollar[7].where,
				OrderBy:          yyDollar[8].orderBy,
				Limit:            yyDollar[9].limit,
			}
		}
	case 12:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = ""
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = DistinctStr
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = AllStr
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.SelectColumnList = SelectColumnList{yyDollar[1].SelectColumn}
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.SelectColumnList = append(yyDollar[1].SelectColumnList, yyDollar[3].SelectColumn)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.SelectColumn = &StarSelectColumn{}
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.SelectColumn = &AliasedSelectColumn{Expr: yyDollar[1].expr, As: yyDollar[2].identifier}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.SelectColumn = &StarSelectColumn{TableRef: yyDollar[1].table}
		}
	case 20:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.identifier = Identifier("")
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = yyDollar[1].identifier
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.identifier = yyDollar[2].identifier
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = Identifier(string(yyDollar[1].bytes))
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = Identifier(string(yyDollar[1].bytes[1 : len(yyDollar[1].bytes)-1]))
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tableExprList = yyDollar[2].tableExprList
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tableExprList = TableExprList{yyDollar[2].joinTableExpr}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tableExprList = TableExprList{yyDollar[1].tableExpr}
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tableExprList = append(yyVAL.tableExprList, yyDollar[3].tableExpr)
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].table, As: yyDollar[2].identifier}
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: &Subquery{Select: yyDollar[2].selectStmt}, As: yyDollar[4].identifier}
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tableExpr = &ParenTableExpr{TableExprList: yyDollar[2].tableExprList}
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tableExpr = yyDollar[2].joinTableExpr
		}
	case 33:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.identifier = Identifier("")
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = yyDollar[1].identifier
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.identifier = yyDollar[2].identifier
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = Identifier(string(yyDollar[1].bytes))
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.identifier = Identifier(string(yyDollar[1].bytes))
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			if yyDollar[4].joinTableExpr == nil {
				yyVAL.joinTableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, JoinOperator: JoinStr, RightExpr: yyDollar[3].tableExpr}
			} else {
				yyDollar[4].joinTableExpr.LeftExpr = yyDollar[1].tableExpr
				yyDollar[4].joinTableExpr.JoinOperator = JoinStr
				yyDollar[4].joinTableExpr.RightExpr = yyDollar[3].tableExpr
				yyVAL.joinTableExpr = yyDollar[4].joinTableExpr
			}
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			if yyDollar[4].joinTableExpr == nil {
				yyVAL.joinTableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].joinTableExpr, JoinOperator: JoinStr, RightExpr: yyDollar[3].tableExpr}
			} else {
				yyDollar[4].joinTableExpr.LeftExpr = yyDollar[1].joinTableExpr
				yyDollar[4].joinTableExpr.JoinOperator = JoinStr
				yyDollar[4].joinTableExpr.RightExpr = yyDollar[3].tableExpr
				yyVAL.joinTableExpr = yyDollar[4].joinTableExpr
			}
		}
	case 40:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.joinTableExpr = nil
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.joinTableExpr = &JoinTableExpr{On: yyDollar[2].expr}
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.joinTableExpr = &JoinTableExpr{Using: yyDollar[3].columnList}
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.where = nil
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.where = NewWhere(WhereStr, yyDollar[2].expr)
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exprs = nil
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.where = nil
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.where = NewWhere(HavingStr, yyDollar[2].expr)
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.orderBy = nil
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].orderingTerm}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].orderingTerm)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.orderingTerm = &OrderingTerm{Expr: yyDollar[1].expr, Direction: yyDollar[2].string, Nulls: yyDollar[3].nulls}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = AscStr
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = AscStr
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = DescStr
		}
	case 57:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.nulls = NullsNil
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.nulls = NullsFirst
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.nulls = NullsLast
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.limit = nil
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.limit = &Limit{Limit: yyDollar[2].expr}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Limit: yyDollar[4].expr}
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Limit: yyDollar[2].expr}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.table = &Table{Name: Identifier(string(yyDollar[1].bytes))}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].column
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyDollar[3].column.TableRef = yyDollar[1].table
			yyVAL.expr = yyDollar[3].column
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ConcatStr, Right: yyDollar[3].expr}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr}
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, Right: yyDollar[3].expr, Escape: yyDollar[5].expr}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			if value, ok := yyDollar[2].expr.(*Value); ok && value.Type == IntValue {
				yyVAL.expr = &Value{Type: IntValue, Value: append([]byte("-"), value.Value...)}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &IsExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.expr = &IsExpr{Left: yyDollar[1].expr, Right: &NotExpr{Expr: yyDollar[4].expr}}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &IsNullExpr{Expr: yyDollar[1].expr}
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &NotNullExpr{Expr: yyDollar[1].expr}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &NotNullExpr{Expr: yyDollar[1].expr}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.expr = &BetweenExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].string, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, CollationName: string(yyDollar[3].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.expr = &CmpExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 101:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].value
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &Value{Type: StrValue, Value: yyDollar[1].bytes[1 : len(yyDollar[1].bytes)-1]}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &Value{Type: BlobValue, Value: yyDollar[1].bytes}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = BoolValue(true)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = BoolValue(false)
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &NullValue{}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if len(yyDollar[1].bytes) > MaxColumnNameLength {
				yylex.Error(__yyfmt__.Sprintf("column length greater than %d", MaxColumnNameLength))
				return 1
			}
			yyVAL.column = &Column{Name: Identifier(string(yyDollar[1].bytes))}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnList = ColumnList{yyDollar[1].column}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnList = append(yyDollar[1].columnList, yyDollar[3].column)
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = EqualStr
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = NotEqualStr
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = RegexpStr
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotRegexpStr
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = GlobStr
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotGlobStr
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = MatchStr
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotMatchStr
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = LessThanStr
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = GreaterThanStr
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = LessEqualStr
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = GreaterEqualStr
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = LikeStr
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotLikeStr
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = BetweenStr
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.string = NotBetweenStr
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = NoneStr
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = TextStr
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = RealStr
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = IntegerStr
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.convertType = NumericStr
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.colTuple = Exprs{}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.colTuple = yyDollar[2].exprs
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.subquery = &Subquery{Select: yyDollar[2].selectStmt}
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &NotExpr{Expr: &ExistsExpr{Subquery: yyDollar[3].subquery}}
		}
	case 140:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.expr = &FuncExpr{Name: Identifier("glob"), Args: Exprs{yyDollar[3].expr, yyDollar[5].expr}}
		}
	case 141:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.expr = &FuncExpr{Name: Identifier("like"), Args: Exprs{yyDollar[3].expr, yyDollar[5].expr}}
		}
	case 142:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.expr = &FuncExpr{Name: Identifier("like"), Args: Exprs{yyDollar[3].expr, yyDollar[5].expr, yyDollar[7].expr}}
		}
	case 143:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			if _, ok := AllowedFunctions[string(yyDollar[1].bytes)]; !ok {
				yylex.Error(__yyfmt__.Sprintf("no such function: %s,", string(yyDollar[1].bytes)))
				return 1
			}
			yyVAL.expr = &FuncExpr{Name: Identifier(string(yyDollar[1].bytes)), Distinct: yyDollar[3].bool, Args: yyDollar[4].exprs, Filter: yyDollar[6].where}
		}
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			if _, ok := AllowedFunctions[string(yyDollar[1].bytes)]; !ok {
				yylex.Error(__yyfmt__.Sprintf("no such function: %s,", string(yyDollar[1].bytes)))
				return 1
			}
			yyVAL.expr = &FuncExpr{Name: Identifier(string(yyDollar[1].bytes)), Distinct: false, Args: nil, Filter: yyDollar[5].where}
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.bool = false
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.bool = true
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exprs = nil
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.where = nil
		}
	case 152:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.where = &Where{Type: WhereStr, Expr: yyDollar[4].expr}
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.expr = nil
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.when = &When{Condition: yyDollar[2].expr, Value: yyDollar[4].expr}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.expr = nil
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 160:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.createTableStmt = &CreateTable{Table: yyDollar[3].table, Columns: yyDollar[5].columnDefList, Constraints: yyDollar[6].tableConstraints}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnDefList = []*ColumnDef{yyDollar[1].columnDef}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnDefList = append(yyDollar[1].columnDefList, yyDollar[3].columnDef)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnDef = &ColumnDef{Name: yyDollar[1].column, Type: yyDollar[2].string, Constraints: yyDollar[3].columnConstraints}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeIntStr
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeIntegerStr
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeRealStr
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeTextStr
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeBlobStr
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = TypeAnyStr
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.columnConstraints = []ColumnConstraint{}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnConstraints = yyDollar[1].columnConstraints
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnConstraints = []ColumnConstraint{yyDollar[1].columnConstraint}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.columnConstraints = append(yyDollar[1].columnConstraints, yyDollar[2].columnConstraint)
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintPrimaryKey{Name: yyDollar[1].identifier, Order: yyDollar[4].string}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintNotNull{Name: yyDollar[1].identifier}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintUnique{Name: yyDollar[1].identifier}
		}
	case 177:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintCheck{Name: yyDollar[1].identifier, Expr: yyDollar[4].expr}
		}
	case 178:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintDefault{Name: yyDollar[1].identifier, Expr: yyDollar[4].expr, Parenthesis: true}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintDefault{Name: yyDollar[1].identifier, Expr: yyDollar[3].expr}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintDefault{Name: yyDollar[1].identifier, Expr: yyDollar[3].expr}
		}
	case 181:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintGenerated{Name: yyDollar[1].identifier, Expr: yyDollar[6].expr, GeneratedAlways: true, IsStored: yyDollar[8].bool}
		}
	case 182:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.columnConstraint = &ColumnConstraintGenerated{Name: yyDollar[1].identifier, Expr: yyDollar[4].expr, GeneratedAlways: false, IsStored: yyDollar[6].bool}
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.identifier = Identifier("")
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.identifier = Identifier(string(yyDollar[2].bytes))
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.string = ColumnConstraintPrimaryKeyOrderEmpty
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = ColumnConstraintPrimaryKeyOrderAsc
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = ColumnConstraintPrimaryKeyOrderDesc
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = yyDollar[2].value
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyDollar[2].value.Value = append([]byte("-"), yyDollar[2].value.Value...)
			yyVAL.expr = yyDollar[2].value
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Value{Type: IntValue, Value: yyDollar[1].bytes}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Value{Type: FloatValue, Value: yyDollar[1].bytes}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Value{Type: HexNumValue, Value: yyDollar[1].bytes}
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.bool = false
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.bool = true
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.bool = false
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.tableConstraints = []TableConstraint{}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tableConstraints = yyDollar[1].tableConstraints
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tableConstraints = []TableConstraint{yyDollar[2].tableConstraint}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tableConstraints = append(yyDollar[1].tableConstraints, yyDollar[3].tableConstraint)
		}
	case 200:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.tableConstraint = &TableConstraintPrimaryKey{Name: yyDollar[1].identifier, Columns: yyDollar[5].columnList}
		}
	case 201:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.tableConstraint = &TableConstraintUnique{Name: yyDollar[1].identifier, Columns: yyDollar[4].columnList}
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.tableConstraint = &TableConstraintCheck{Name: yyDollar[1].identifier, Expr: yyDollar[4].expr}
		}
	case 203:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.insertStmt = &Insert{Table: yyDollar[3].table, Columns: yyDollar[5].columnList, Rows: yyDollar[8].insertRows}
		}
	case 204:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.insertStmt = &Insert{Table: yyDollar[3].table, Columns: ColumnList{}, Rows: []Exprs{}, DefaultValues: true}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.insertRows = []Exprs{yyDollar[2].exprs}
		}
	case 206:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.insertRows = append(yyDollar[1].insertRows, yyDollar[4].exprs)
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.deleteStmt = &Delete{Table: yyDollar[3].table, Where: yyDollar[4].where}
		}
	case 208:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.updateStmt = &Update{Table: yyDollar[2].table, Exprs: yyDollar[4].updateList, Where: yyDollar[5].where}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.updateList = yyDollar[1].updateList
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.updateList = yyDollar[1].updateList
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.updateList = []*UpdateExpr{yyDollar[1].updateExpression}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.updateList = append(yyDollar[1].updateList, yyDollar[3].updateExpression)
		}
	case 213:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			if len(yyDollar[2].columnList) != len(yyDollar[6].exprs) {
				yylex.Error(__yyfmt__.Sprintf("%d columns assigned %d values", len(yyDollar[2].columnList), len(yyDollar[6].exprs)))
				return 1
			}
			exprs := make([]*UpdateExpr, len(yyDollar[2].columnList))
			for i := 0; i < len(yyDollar[2].columnList); i++ {
				exprs[i] = &UpdateExpr{Column: yyDollar[2].columnList[i], Expr: yyDollar[6].exprs[i]}
			}
			yyVAL.updateList = exprs
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.updateExpression = &UpdateExpr{Column: yyDollar[1].column, Expr: yyDollar[3].expr}
		}
	case 215:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.grant = &Grant{Table: yyDollar[4].table, Privileges: yyDollar[2].privileges, Roles: yyDollar[6].strings}
		}
	case 216:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.revoke = &Revoke{Table: yyDollar[4].table, Privileges: yyDollar[2].privileges, Roles: yyDollar[6].strings}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.strings = []string{string(yyDollar[1].bytes[1 : len(yyDollar[1].bytes)-1])}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.strings = append(yyDollar[1].strings, string(yyDollar[3].bytes[1:len(yyDollar[3].bytes)-1]))
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			privileges := make(map[string]struct{})
			privileges[yyDollar[1].string] = struct{}{}
			yyVAL.privileges = Privileges(privileges)
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if len(yyDollar[1].privileges) == 3 {
				yylex.Error("number of privileges exceeded")
				return 1
			}

			if _, ok := yyDollar[1].privileges[yyDollar[3].string]; ok {
				yylex.Error(__yyfmt__.Sprintf("repeated privilege: %s", yyDollar[3].string))
				return 1
			}

			yyDollar[1].privileges[yyDollar[3].string] = struct{}{}
			yyVAL.privileges = yyDollar[1].privileges
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = "insert"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = "update"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.string = "delete"
		}
	}
	goto yystack /* stack new state and value */
}
